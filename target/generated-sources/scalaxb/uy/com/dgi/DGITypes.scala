// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package uy.com.dgi

sealed trait CFEType

object CFEType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.CFEType]): CFEType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: CFEType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[CFEType] = Seq(Number101, Number102, Number103, Number111, Number112, Number113, Number121, Number122, Number123, Number124, Number131, Number132, Number133, Number141, Number142, Number143, Number151, Number152, Number153, Number181, Number182, Number201, Number202, Number203, Number211, Number212, Number213, Number221, Number222, Number223, Number224, Number231, Number232, Number233, Number241, Number242, Number243, Number251, Number252, Number253, Number281, Number282)
}

case object Number101 extends CFEType { override def toString = "101" }
case object Number102 extends CFEType { override def toString = "102" }
case object Number103 extends CFEType { override def toString = "103" }
case object Number111 extends CFEType { override def toString = "111" }
case object Number112 extends CFEType { override def toString = "112" }
case object Number113 extends CFEType { override def toString = "113" }
case object Number121 extends CFEType { override def toString = "121" }
case object Number122 extends CFEType { override def toString = "122" }
case object Number123 extends CFEType { override def toString = "123" }
case object Number124 extends CFEType { override def toString = "124" }
case object Number131 extends CFEType { override def toString = "131" }
case object Number132 extends CFEType { override def toString = "132" }
case object Number133 extends CFEType { override def toString = "133" }
case object Number141 extends CFEType { override def toString = "141" }
case object Number142 extends CFEType { override def toString = "142" }
case object Number143 extends CFEType { override def toString = "143" }
case object Number151 extends CFEType { override def toString = "151" }
case object Number152 extends CFEType { override def toString = "152" }
case object Number153 extends CFEType { override def toString = "153" }
case object Number181 extends CFEType { override def toString = "181" }
case object Number182 extends CFEType { override def toString = "182" }
case object Number201 extends CFEType { override def toString = "201" }
case object Number202 extends CFEType { override def toString = "202" }
case object Number203 extends CFEType { override def toString = "203" }
case object Number211 extends CFEType { override def toString = "211" }
case object Number212 extends CFEType { override def toString = "212" }
case object Number213 extends CFEType { override def toString = "213" }
case object Number221 extends CFEType { override def toString = "221" }
case object Number222 extends CFEType { override def toString = "222" }
case object Number223 extends CFEType { override def toString = "223" }
case object Number224 extends CFEType { override def toString = "224" }
case object Number231 extends CFEType { override def toString = "231" }
case object Number232 extends CFEType { override def toString = "232" }
case object Number233 extends CFEType { override def toString = "233" }
case object Number241 extends CFEType { override def toString = "241" }
case object Number242 extends CFEType { override def toString = "242" }
case object Number243 extends CFEType { override def toString = "243" }
case object Number251 extends CFEType { override def toString = "251" }
case object Number252 extends CFEType { override def toString = "252" }
case object Number253 extends CFEType { override def toString = "253" }
case object Number281 extends CFEType { override def toString = "281" }
case object Number282 extends CFEType { override def toString = "282" }

sealed trait TipoTrasladoType

object TipoTrasladoType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoTrasladoType]): TipoTrasladoType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoTrasladoType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoTrasladoType] = Seq(Number1Value9, Number2Value7)
}

case object Number1Value9 extends TipoTrasladoType { override def toString = "1" }
case object Number2Value7 extends TipoTrasladoType { override def toString = "2" }

sealed trait IndMontoBrutoType

object IndMontoBrutoType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndMontoBrutoType]): IndMontoBrutoType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndMontoBrutoType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndMontoBrutoType] = Seq(Number0, Number1Value10)
}

case object Number0 extends IndMontoBrutoType { override def toString = "0" }
case object Number1Value10 extends IndMontoBrutoType { override def toString = "1" }

sealed trait FormaDePagoType

object FormaDePagoType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.FormaDePagoType]): FormaDePagoType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FormaDePagoType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FormaDePagoType] = Seq(Number1Value8, Number2Value6)
}

case object Number1Value8 extends FormaDePagoType { override def toString = "1" }
case object Number2Value6 extends FormaDePagoType { override def toString = "2" }

sealed trait IndicadorAgResp

object IndicadorAgResp {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndicadorAgResp]): IndicadorAgResp = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndicadorAgResp) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndicadorAgResp] = Seq(R)
}

case object R extends IndicadorAgResp { override def toString = "R" }

sealed trait SubDescRecType

object SubDescRecType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.SubDescRecType]): SubDescRecType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: SubDescRecType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[SubDescRecType] = Seq(Number1Value7, Number2Value5)
}

case object Number1Value7 extends SubDescRecType { override def toString = "1" }
case object Number2Value5 extends SubDescRecType { override def toString = "2" }

sealed trait DocType

object DocType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.DocType]): DocType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DocType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DocType] = Seq(Number1Value6, Number2Value4, Number3Value2, Number4Value2, Number5Value, Number6Value, Number7Value)
}

case object Number1Value6 extends DocType { override def toString = "1" }
case object Number2Value4 extends DocType { override def toString = "2" }
case object Number3Value2 extends DocType { override def toString = "3" }
case object Number4Value2 extends DocType { override def toString = "4" }
case object Number5Value extends DocType { override def toString = "5" }
case object Number6Value extends DocType { override def toString = "6" }
case object Number7Value extends DocType { override def toString = "7" }

sealed trait TipMonType

object TipMonType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipMonType]): TipMonType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipMonType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipMonType] = Seq(AED, AFN, ALL, AMD, ANG, AOA, ARS, AUD, AWG, AZM, BAM, BBD, BDT, BGN, BHD, BIF, BMD, BND, BOB, BOV, BRL, BSD, BTN, BWP, BYR, BZD, CAD, CDF, CHF, CLF, CLP, CNY, COP, COU, CRC, CSD, CUP, CUC, CVE, CYP, CZK, DJF, DKK, DOP, DZD, EEK, EGP, ERN, ETB, EUR, FJD, FKP, GBP, GEL, GHS, GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR, ILS, INR, IQD, IRR, ISK, JMD, JOD, JPY, KES, KGS, KHR, KMF, KPW, KRW, KWD, KYD, KZT, LAK, LBP, LKR, LRD, LSL, LTL, LVL, LYD, MAD, MDL, MGA, MKD, MMK, MNT, MOP, MRO, MTL, MUR, MVR, MWK, MXN, MXV, MYR, MZN, NAD, NGN, NIO, NOK, NPR, NZD, OMR, PAB, PEN, PGK, PHP, PKR, PLN, PYG, QAR, RON, RUB, RWF, SAR, SBD, SCR, SDG, SEK, SGD, SHP, SKK, SLL, SOS, SRD, STD, SYP, SZL, THB, TJS, TMT, TND, TOP, TRY, TTD, TWD, TZS, UAH, UGX, USD, USN, USS, UYU, UZS, VEF, VND, VUV, WST, XAF, XAG, XAU, XBA, XBB, XBC, XBD, XCD, XDR, XFO, XFU, XOF, XPD, XPF, XPT, XTS, XXX, YER, ZAR, ZMK, ZWL, UYI, UYR, AZN, BYN, CHE, CHW, MRU, RSD, SSP, STN, VES, XSU, XUA, ZMW)
}

case object AED extends TipMonType { override def toString = "AED" }
case object AFN extends TipMonType { override def toString = "AFN" }
case object ALL extends TipMonType { override def toString = "ALL" }
case object AMD extends TipMonType { override def toString = "AMD" }
case object ANG extends TipMonType { override def toString = "ANG" }
case object AOA extends TipMonType { override def toString = "AOA" }
case object ARS extends TipMonType { override def toString = "ARS" }
case object AUD extends TipMonType { override def toString = "AUD" }
case object AWG extends TipMonType { override def toString = "AWG" }
case object AZM extends TipMonType { override def toString = "AZM" }
case object BAM extends TipMonType { override def toString = "BAM" }
case object BBD extends TipMonType { override def toString = "BBD" }
case object BDT extends TipMonType { override def toString = "BDT" }
case object BGN extends TipMonType { override def toString = "BGN" }
case object BHD extends TipMonType { override def toString = "BHD" }
case object BIF extends TipMonType { override def toString = "BIF" }
case object BMD extends TipMonType { override def toString = "BMD" }
case object BND extends TipMonType { override def toString = "BND" }
case object BOB extends TipMonType { override def toString = "BOB" }
case object BOV extends TipMonType { override def toString = "BOV" }
case object BRL extends TipMonType { override def toString = "BRL" }
case object BSD extends TipMonType { override def toString = "BSD" }
case object BTN extends TipMonType { override def toString = "BTN" }
case object BWP extends TipMonType { override def toString = "BWP" }
case object BYR extends TipMonType { override def toString = "BYR" }
case object BZD extends TipMonType { override def toString = "BZD" }
case object CAD extends TipMonType { override def toString = "CAD" }
case object CDF extends TipMonType { override def toString = "CDF" }
case object CHF extends TipMonType { override def toString = "CHF" }
case object CLF extends TipMonType { override def toString = "CLF" }
case object CLP extends TipMonType { override def toString = "CLP" }
case object CNY extends TipMonType { override def toString = "CNY" }
case object COP extends TipMonType { override def toString = "COP" }
case object COU extends TipMonType { override def toString = "COU" }
case object CRC extends TipMonType { override def toString = "CRC" }
case object CSD extends TipMonType { override def toString = "CSD" }
case object CUP extends TipMonType { override def toString = "CUP" }
case object CUC extends TipMonType { override def toString = "CUC" }
case object CVE extends TipMonType { override def toString = "CVE" }
case object CYP extends TipMonType { override def toString = "CYP" }
case object CZK extends TipMonType { override def toString = "CZK" }
case object DJF extends TipMonType { override def toString = "DJF" }
case object DKK extends TipMonType { override def toString = "DKK" }
case object DOP extends TipMonType { override def toString = "DOP" }
case object DZD extends TipMonType { override def toString = "DZD" }
case object EEK extends TipMonType { override def toString = "EEK" }
case object EGP extends TipMonType { override def toString = "EGP" }
case object ERN extends TipMonType { override def toString = "ERN" }
case object ETB extends TipMonType { override def toString = "ETB" }
case object EUR extends TipMonType { override def toString = "EUR" }
case object FJD extends TipMonType { override def toString = "FJD" }
case object FKP extends TipMonType { override def toString = "FKP" }
case object GBP extends TipMonType { override def toString = "GBP" }
case object GEL extends TipMonType { override def toString = "GEL" }
case object GHS extends TipMonType { override def toString = "GHS" }
case object GIP extends TipMonType { override def toString = "GIP" }
case object GMD extends TipMonType { override def toString = "GMD" }
case object GNF extends TipMonType { override def toString = "GNF" }
case object GTQ extends TipMonType { override def toString = "GTQ" }
case object GYD extends TipMonType { override def toString = "GYD" }
case object HKD extends TipMonType { override def toString = "HKD" }
case object HNL extends TipMonType { override def toString = "HNL" }
case object HRK extends TipMonType { override def toString = "HRK" }
case object HTG extends TipMonType { override def toString = "HTG" }
case object HUF extends TipMonType { override def toString = "HUF" }
case object IDR extends TipMonType { override def toString = "IDR" }
case object ILS extends TipMonType { override def toString = "ILS" }
case object INR extends TipMonType { override def toString = "INR" }
case object IQD extends TipMonType { override def toString = "IQD" }
case object IRR extends TipMonType { override def toString = "IRR" }
case object ISK extends TipMonType { override def toString = "ISK" }
case object JMD extends TipMonType { override def toString = "JMD" }
case object JOD extends TipMonType { override def toString = "JOD" }
case object JPY extends TipMonType { override def toString = "JPY" }
case object KES extends TipMonType { override def toString = "KES" }
case object KGS extends TipMonType { override def toString = "KGS" }
case object KHR extends TipMonType { override def toString = "KHR" }
case object KMF extends TipMonType { override def toString = "KMF" }
case object KPW extends TipMonType { override def toString = "KPW" }
case object KRW extends TipMonType { override def toString = "KRW" }
case object KWD extends TipMonType { override def toString = "KWD" }
case object KYD extends TipMonType { override def toString = "KYD" }
case object KZT extends TipMonType { override def toString = "KZT" }
case object LAK extends TipMonType { override def toString = "LAK" }
case object LBP extends TipMonType { override def toString = "LBP" }
case object LKR extends TipMonType { override def toString = "LKR" }
case object LRD extends TipMonType { override def toString = "LRD" }
case object LSL extends TipMonType { override def toString = "LSL" }
case object LTL extends TipMonType { override def toString = "LTL" }
case object LVL extends TipMonType { override def toString = "LVL" }
case object LYD extends TipMonType { override def toString = "LYD" }
case object MAD extends TipMonType { override def toString = "MAD" }
case object MDL extends TipMonType { override def toString = "MDL" }
case object MGA extends TipMonType { override def toString = "MGA" }
case object MKD extends TipMonType { override def toString = "MKD" }
case object MMK extends TipMonType { override def toString = "MMK" }
case object MNT extends TipMonType { override def toString = "MNT" }
case object MOP extends TipMonType { override def toString = "MOP" }
case object MRO extends TipMonType { override def toString = "MRO" }
case object MTL extends TipMonType { override def toString = "MTL" }
case object MUR extends TipMonType { override def toString = "MUR" }
case object MVR extends TipMonType { override def toString = "MVR" }
case object MWK extends TipMonType { override def toString = "MWK" }
case object MXN extends TipMonType { override def toString = "MXN" }
case object MXV extends TipMonType { override def toString = "MXV" }
case object MYR extends TipMonType { override def toString = "MYR" }
case object MZN extends TipMonType { override def toString = "MZN" }
case object NAD extends TipMonType { override def toString = "NAD" }
case object NGN extends TipMonType { override def toString = "NGN" }
case object NIO extends TipMonType { override def toString = "NIO" }
case object NOK extends TipMonType { override def toString = "NOK" }
case object NPR extends TipMonType { override def toString = "NPR" }
case object NZD extends TipMonType { override def toString = "NZD" }
case object OMR extends TipMonType { override def toString = "OMR" }
case object PAB extends TipMonType { override def toString = "PAB" }
case object PEN extends TipMonType { override def toString = "PEN" }
case object PGK extends TipMonType { override def toString = "PGK" }
case object PHP extends TipMonType { override def toString = "PHP" }
case object PKR extends TipMonType { override def toString = "PKR" }
case object PLN extends TipMonType { override def toString = "PLN" }
case object PYG extends TipMonType { override def toString = "PYG" }
case object QAR extends TipMonType { override def toString = "QAR" }
case object RON extends TipMonType { override def toString = "RON" }
case object RUB extends TipMonType { override def toString = "RUB" }
case object RWF extends TipMonType { override def toString = "RWF" }
case object SAR extends TipMonType { override def toString = "SAR" }
case object SBD extends TipMonType { override def toString = "SBD" }
case object SCR extends TipMonType { override def toString = "SCR" }
case object SDG extends TipMonType { override def toString = "SDG" }
case object SEK extends TipMonType { override def toString = "SEK" }
case object SGD extends TipMonType { override def toString = "SGD" }
case object SHP extends TipMonType { override def toString = "SHP" }
case object SKK extends TipMonType { override def toString = "SKK" }
case object SLL extends TipMonType { override def toString = "SLL" }
case object SOS extends TipMonType { override def toString = "SOS" }
case object SRD extends TipMonType { override def toString = "SRD" }
case object STD extends TipMonType { override def toString = "STD" }
case object SYP extends TipMonType { override def toString = "SYP" }
case object SZL extends TipMonType { override def toString = "SZL" }
case object THB extends TipMonType { override def toString = "THB" }
case object TJS extends TipMonType { override def toString = "TJS" }
case object TMT extends TipMonType { override def toString = "TMT" }
case object TND extends TipMonType { override def toString = "TND" }
case object TOP extends TipMonType { override def toString = "TOP" }
case object TRY extends TipMonType { override def toString = "TRY" }
case object TTD extends TipMonType { override def toString = "TTD" }
case object TWD extends TipMonType { override def toString = "TWD" }
case object TZS extends TipMonType { override def toString = "TZS" }
case object UAH extends TipMonType { override def toString = "UAH" }
case object UGX extends TipMonType { override def toString = "UGX" }
case object USD extends TipMonType { override def toString = "USD" }
case object USN extends TipMonType { override def toString = "USN" }
case object USS extends TipMonType { override def toString = "USS" }
case object UYU extends TipMonType { override def toString = "UYU" }
case object UZS extends TipMonType { override def toString = "UZS" }
case object VEF extends TipMonType { override def toString = "VEF" }
case object VND extends TipMonType { override def toString = "VND" }
case object VUV extends TipMonType { override def toString = "VUV" }
case object WST extends TipMonType { override def toString = "WST" }
case object XAF extends TipMonType { override def toString = "XAF" }
case object XAG extends TipMonType { override def toString = "XAG" }
case object XAU extends TipMonType { override def toString = "XAU" }
case object XBA extends TipMonType { override def toString = "XBA" }
case object XBB extends TipMonType { override def toString = "XBB" }
case object XBC extends TipMonType { override def toString = "XBC" }
case object XBD extends TipMonType { override def toString = "XBD" }
case object XCD extends TipMonType { override def toString = "XCD" }
case object XDR extends TipMonType { override def toString = "XDR" }
case object XFO extends TipMonType { override def toString = "XFO" }
case object XFU extends TipMonType { override def toString = "XFU" }
case object XOF extends TipMonType { override def toString = "XOF" }
case object XPD extends TipMonType { override def toString = "XPD" }
case object XPF extends TipMonType { override def toString = "XPF" }
case object XPT extends TipMonType { override def toString = "XPT" }
case object XTS extends TipMonType { override def toString = "XTS" }
case object XXX extends TipMonType { override def toString = "XXX" }
case object YER extends TipMonType { override def toString = "YER" }
case object ZAR extends TipMonType { override def toString = "ZAR" }
case object ZMK extends TipMonType { override def toString = "ZMK" }
case object ZWL extends TipMonType { override def toString = "ZWL" }
case object UYI extends TipMonType { override def toString = "UYI" }
case object UYR extends TipMonType { override def toString = "UYR" }
case object AZN extends TipMonType { override def toString = "AZN" }
case object BYN extends TipMonType { override def toString = "BYN" }
case object CHE extends TipMonType { override def toString = "CHE" }
case object CHW extends TipMonType { override def toString = "CHW" }
case object MRU extends TipMonType { override def toString = "MRU" }
case object RSD extends TipMonType { override def toString = "RSD" }
case object SSP extends TipMonType { override def toString = "SSP" }
case object STN extends TipMonType { override def toString = "STN" }
case object VES extends TipMonType { override def toString = "VES" }
case object XSU extends TipMonType { override def toString = "XSU" }
case object XUA extends TipMonType { override def toString = "XUA" }
case object ZMW extends TipMonType { override def toString = "ZMW" }

sealed trait TasaIVAType

object TasaIVAType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TasaIVAType]): TasaIVAType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TasaIVAType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TasaIVAType] = Seq(Number10u46000, Number22u46000)
}

case object Number10u46000 extends TasaIVAType { override def toString = "10.000" }
case object Number22u46000 extends TasaIVAType { override def toString = "22.000" }

sealed trait CodPaisType

object CodPaisType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.CodPaisType]): CodPaisType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: CodPaisType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[CodPaisType] = Seq(AD, AE, AF, AG, AI, AL, AM, AN, CW, SX, AO, AQ, AR, ASValue, AT, AU, AW, AX, AZ, BAValue, BB, BD, BE, BF, BG, BH, BI, BJ, BM, BN, BO, BR, BSValue, BT, BU, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CS, CU, CV, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EA, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KA, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, ST, SU, SV, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TP, TR, TT, TV, TW, TZ, UA, UE, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YD, YE, YT, YU, ZA, ZM, ZR, ZW, Number99Value)
}

case object AD extends CodPaisType { override def toString = "AD" }
case object AE extends CodPaisType { override def toString = "AE" }
case object AF extends CodPaisType { override def toString = "AF" }
case object AG extends CodPaisType { override def toString = "AG" }
case object AI extends CodPaisType { override def toString = "AI" }
case object AL extends CodPaisType { override def toString = "AL" }
case object AM extends CodPaisType { override def toString = "AM" }
case object AN extends CodPaisType { override def toString = "AN" }
case object CW extends CodPaisType { override def toString = "CW" }
case object SX extends CodPaisType { override def toString = "SX" }
case object AO extends CodPaisType { override def toString = "AO" }
case object AQ extends CodPaisType { override def toString = "AQ" }
case object AR extends CodPaisType { override def toString = "AR" }
case object ASValue extends CodPaisType { override def toString = "AS" }
case object AT extends CodPaisType { override def toString = "AT" }
case object AU extends CodPaisType { override def toString = "AU" }
case object AW extends CodPaisType { override def toString = "AW" }
case object AX extends CodPaisType { override def toString = "AX" }
case object AZ extends CodPaisType { override def toString = "AZ" }
case object BAValue extends CodPaisType { override def toString = "BA" }
case object BB extends CodPaisType { override def toString = "BB" }
case object BD extends CodPaisType { override def toString = "BD" }
case object BE extends CodPaisType { override def toString = "BE" }
case object BF extends CodPaisType { override def toString = "BF" }
case object BG extends CodPaisType { override def toString = "BG" }
case object BH extends CodPaisType { override def toString = "BH" }
case object BI extends CodPaisType { override def toString = "BI" }
case object BJ extends CodPaisType { override def toString = "BJ" }
case object BM extends CodPaisType { override def toString = "BM" }
case object BN extends CodPaisType { override def toString = "BN" }
case object BO extends CodPaisType { override def toString = "BO" }
case object BR extends CodPaisType { override def toString = "BR" }
case object BSValue extends CodPaisType { override def toString = "BS" }
case object BT extends CodPaisType { override def toString = "BT" }
case object BU extends CodPaisType { override def toString = "BU" }
case object BV extends CodPaisType { override def toString = "BV" }
case object BW extends CodPaisType { override def toString = "BW" }
case object BY extends CodPaisType { override def toString = "BY" }
case object BZ extends CodPaisType { override def toString = "BZ" }
case object CA extends CodPaisType { override def toString = "CA" }
case object CC extends CodPaisType { override def toString = "CC" }
case object CD extends CodPaisType { override def toString = "CD" }
case object CF extends CodPaisType { override def toString = "CF" }
case object CG extends CodPaisType { override def toString = "CG" }
case object CH extends CodPaisType { override def toString = "CH" }
case object CI extends CodPaisType { override def toString = "CI" }
case object CK extends CodPaisType { override def toString = "CK" }
case object CL extends CodPaisType { override def toString = "CL" }
case object CM extends CodPaisType { override def toString = "CM" }
case object CN extends CodPaisType { override def toString = "CN" }
case object CO extends CodPaisType { override def toString = "CO" }
case object CR extends CodPaisType { override def toString = "CR" }
case object CS extends CodPaisType { override def toString = "CS" }
case object CU extends CodPaisType { override def toString = "CU" }
case object CV extends CodPaisType { override def toString = "CV" }
case object CX extends CodPaisType { override def toString = "CX" }
case object CY extends CodPaisType { override def toString = "CY" }
case object CZ extends CodPaisType { override def toString = "CZ" }
case object DE extends CodPaisType { override def toString = "DE" }
case object DJ extends CodPaisType { override def toString = "DJ" }
case object DK extends CodPaisType { override def toString = "DK" }
case object DM extends CodPaisType { override def toString = "DM" }
case object DO extends CodPaisType { override def toString = "DO" }
case object DZ extends CodPaisType { override def toString = "DZ" }
case object EA extends CodPaisType { override def toString = "EA" }
case object EC extends CodPaisType { override def toString = "EC" }
case object EE extends CodPaisType { override def toString = "EE" }
case object EG extends CodPaisType { override def toString = "EG" }
case object EH extends CodPaisType { override def toString = "EH" }
case object ER extends CodPaisType { override def toString = "ER" }
case object ES extends CodPaisType { override def toString = "ES" }
case object ET extends CodPaisType { override def toString = "ET" }
case object FI extends CodPaisType { override def toString = "FI" }
case object FJ extends CodPaisType { override def toString = "FJ" }
case object FK extends CodPaisType { override def toString = "FK" }
case object FM extends CodPaisType { override def toString = "FM" }
case object FO extends CodPaisType { override def toString = "FO" }
case object FR extends CodPaisType { override def toString = "FR" }
case object GA extends CodPaisType { override def toString = "GA" }
case object GB extends CodPaisType { override def toString = "GB" }
case object GD extends CodPaisType { override def toString = "GD" }
case object GE extends CodPaisType { override def toString = "GE" }
case object GF extends CodPaisType { override def toString = "GF" }
case object GG extends CodPaisType { override def toString = "GG" }
case object GH extends CodPaisType { override def toString = "GH" }
case object GI extends CodPaisType { override def toString = "GI" }
case object GL extends CodPaisType { override def toString = "GL" }
case object GM extends CodPaisType { override def toString = "GM" }
case object GN extends CodPaisType { override def toString = "GN" }
case object GP extends CodPaisType { override def toString = "GP" }
case object GQ extends CodPaisType { override def toString = "GQ" }
case object GR extends CodPaisType { override def toString = "GR" }
case object GS extends CodPaisType { override def toString = "GS" }
case object GT extends CodPaisType { override def toString = "GT" }
case object GU extends CodPaisType { override def toString = "GU" }
case object GW extends CodPaisType { override def toString = "GW" }
case object GY extends CodPaisType { override def toString = "GY" }
case object HK extends CodPaisType { override def toString = "HK" }
case object HM extends CodPaisType { override def toString = "HM" }
case object HN extends CodPaisType { override def toString = "HN" }
case object HR extends CodPaisType { override def toString = "HR" }
case object HT extends CodPaisType { override def toString = "HT" }
case object HU extends CodPaisType { override def toString = "HU" }
case object ID extends CodPaisType { override def toString = "ID" }
case object IE extends CodPaisType { override def toString = "IE" }
case object IL extends CodPaisType { override def toString = "IL" }
case object IM extends CodPaisType { override def toString = "IM" }
case object IN extends CodPaisType { override def toString = "IN" }
case object IO extends CodPaisType { override def toString = "IO" }
case object IQ extends CodPaisType { override def toString = "IQ" }
case object IR extends CodPaisType { override def toString = "IR" }
case object IS extends CodPaisType { override def toString = "IS" }
case object IT extends CodPaisType { override def toString = "IT" }
case object JE extends CodPaisType { override def toString = "JE" }
case object JM extends CodPaisType { override def toString = "JM" }
case object JO extends CodPaisType { override def toString = "JO" }
case object JP extends CodPaisType { override def toString = "JP" }
case object KA extends CodPaisType { override def toString = "KA" }
case object KE extends CodPaisType { override def toString = "KE" }
case object KG extends CodPaisType { override def toString = "KG" }
case object KH extends CodPaisType { override def toString = "KH" }
case object KI extends CodPaisType { override def toString = "KI" }
case object KM extends CodPaisType { override def toString = "KM" }
case object KN extends CodPaisType { override def toString = "KN" }
case object KP extends CodPaisType { override def toString = "KP" }
case object KR extends CodPaisType { override def toString = "KR" }
case object KW extends CodPaisType { override def toString = "KW" }
case object KY extends CodPaisType { override def toString = "KY" }
case object KZ extends CodPaisType { override def toString = "KZ" }
case object LA extends CodPaisType { override def toString = "LA" }
case object LB extends CodPaisType { override def toString = "LB" }
case object LC extends CodPaisType { override def toString = "LC" }
case object LI extends CodPaisType { override def toString = "LI" }
case object LK extends CodPaisType { override def toString = "LK" }
case object LR extends CodPaisType { override def toString = "LR" }
case object LS extends CodPaisType { override def toString = "LS" }
case object LT extends CodPaisType { override def toString = "LT" }
case object LU extends CodPaisType { override def toString = "LU" }
case object LV extends CodPaisType { override def toString = "LV" }
case object LY extends CodPaisType { override def toString = "LY" }
case object MA extends CodPaisType { override def toString = "MA" }
case object MC extends CodPaisType { override def toString = "MC" }
case object MD extends CodPaisType { override def toString = "MD" }
case object ME extends CodPaisType { override def toString = "ME" }
case object MG extends CodPaisType { override def toString = "MG" }
case object MH extends CodPaisType { override def toString = "MH" }
case object MK extends CodPaisType { override def toString = "MK" }
case object ML extends CodPaisType { override def toString = "ML" }
case object MM extends CodPaisType { override def toString = "MM" }
case object MN extends CodPaisType { override def toString = "MN" }
case object MO extends CodPaisType { override def toString = "MO" }
case object MP extends CodPaisType { override def toString = "MP" }
case object MQ extends CodPaisType { override def toString = "MQ" }
case object MR extends CodPaisType { override def toString = "MR" }
case object MS extends CodPaisType { override def toString = "MS" }
case object MT extends CodPaisType { override def toString = "MT" }
case object MU extends CodPaisType { override def toString = "MU" }
case object MV extends CodPaisType { override def toString = "MV" }
case object MW extends CodPaisType { override def toString = "MW" }
case object MX extends CodPaisType { override def toString = "MX" }
case object MY extends CodPaisType { override def toString = "MY" }
case object MZ extends CodPaisType { override def toString = "MZ" }
case object NA extends CodPaisType { override def toString = "NA" }
case object NC extends CodPaisType { override def toString = "NC" }
case object NE extends CodPaisType { override def toString = "NE" }
case object NF extends CodPaisType { override def toString = "NF" }
case object NG extends CodPaisType { override def toString = "NG" }
case object NI extends CodPaisType { override def toString = "NI" }
case object NL extends CodPaisType { override def toString = "NL" }
case object NO extends CodPaisType { override def toString = "NO" }
case object NP extends CodPaisType { override def toString = "NP" }
case object NR extends CodPaisType { override def toString = "NR" }
case object NU extends CodPaisType { override def toString = "NU" }
case object NZ extends CodPaisType { override def toString = "NZ" }
case object OM extends CodPaisType { override def toString = "OM" }
case object PA extends CodPaisType { override def toString = "PA" }
case object PE extends CodPaisType { override def toString = "PE" }
case object PF extends CodPaisType { override def toString = "PF" }
case object PG extends CodPaisType { override def toString = "PG" }
case object PH extends CodPaisType { override def toString = "PH" }
case object PK extends CodPaisType { override def toString = "PK" }
case object PL extends CodPaisType { override def toString = "PL" }
case object PM extends CodPaisType { override def toString = "PM" }
case object PN extends CodPaisType { override def toString = "PN" }
case object PR extends CodPaisType { override def toString = "PR" }
case object PS extends CodPaisType { override def toString = "PS" }
case object PT extends CodPaisType { override def toString = "PT" }
case object PW extends CodPaisType { override def toString = "PW" }
case object PY extends CodPaisType { override def toString = "PY" }
case object QA extends CodPaisType { override def toString = "QA" }
case object RE extends CodPaisType { override def toString = "RE" }
case object RO extends CodPaisType { override def toString = "RO" }
case object RS extends CodPaisType { override def toString = "RS" }
case object RU extends CodPaisType { override def toString = "RU" }
case object RW extends CodPaisType { override def toString = "RW" }
case object SA extends CodPaisType { override def toString = "SA" }
case object SB extends CodPaisType { override def toString = "SB" }
case object SC extends CodPaisType { override def toString = "SC" }
case object SD extends CodPaisType { override def toString = "SD" }
case object SE extends CodPaisType { override def toString = "SE" }
case object SG extends CodPaisType { override def toString = "SG" }
case object SH extends CodPaisType { override def toString = "SH" }
case object SI extends CodPaisType { override def toString = "SI" }
case object SJ extends CodPaisType { override def toString = "SJ" }
case object SK extends CodPaisType { override def toString = "SK" }
case object SL extends CodPaisType { override def toString = "SL" }
case object SM extends CodPaisType { override def toString = "SM" }
case object SN extends CodPaisType { override def toString = "SN" }
case object SO extends CodPaisType { override def toString = "SO" }
case object SR extends CodPaisType { override def toString = "SR" }
case object ST extends CodPaisType { override def toString = "ST" }
case object SU extends CodPaisType { override def toString = "SU" }
case object SV extends CodPaisType { override def toString = "SV" }
case object SY extends CodPaisType { override def toString = "SY" }
case object SZ extends CodPaisType { override def toString = "SZ" }
case object TC extends CodPaisType { override def toString = "TC" }
case object TD extends CodPaisType { override def toString = "TD" }
case object TF extends CodPaisType { override def toString = "TF" }
case object TG extends CodPaisType { override def toString = "TG" }
case object TH extends CodPaisType { override def toString = "TH" }
case object TJ extends CodPaisType { override def toString = "TJ" }
case object TK extends CodPaisType { override def toString = "TK" }
case object TL extends CodPaisType { override def toString = "TL" }
case object TM extends CodPaisType { override def toString = "TM" }
case object TN extends CodPaisType { override def toString = "TN" }
case object TO extends CodPaisType { override def toString = "TO" }
case object TP extends CodPaisType { override def toString = "TP" }
case object TR extends CodPaisType { override def toString = "TR" }
case object TT extends CodPaisType { override def toString = "TT" }
case object TV extends CodPaisType { override def toString = "TV" }
case object TW extends CodPaisType { override def toString = "TW" }
case object TZ extends CodPaisType { override def toString = "TZ" }
case object UA extends CodPaisType { override def toString = "UA" }
case object UE extends CodPaisType { override def toString = "UE" }
case object UG extends CodPaisType { override def toString = "UG" }
case object UM extends CodPaisType { override def toString = "UM" }
case object US extends CodPaisType { override def toString = "US" }
case object UY extends CodPaisType { override def toString = "UY" }
case object UZ extends CodPaisType { override def toString = "UZ" }
case object VA extends CodPaisType { override def toString = "VA" }
case object VC extends CodPaisType { override def toString = "VC" }
case object VE extends CodPaisType { override def toString = "VE" }
case object VG extends CodPaisType { override def toString = "VG" }
case object VI extends CodPaisType { override def toString = "VI" }
case object VN extends CodPaisType { override def toString = "VN" }
case object VU extends CodPaisType { override def toString = "VU" }
case object WF extends CodPaisType { override def toString = "WF" }
case object WS extends CodPaisType { override def toString = "WS" }
case object YD extends CodPaisType { override def toString = "YD" }
case object YE extends CodPaisType { override def toString = "YE" }
case object YT extends CodPaisType { override def toString = "YT" }
case object YU extends CodPaisType { override def toString = "YU" }
case object ZA extends CodPaisType { override def toString = "ZA" }
case object ZM extends CodPaisType { override def toString = "ZM" }
case object ZR extends CodPaisType { override def toString = "ZR" }
case object ZW extends CodPaisType { override def toString = "ZW" }
case object Number99Value extends CodPaisType { override def toString = "99" }

sealed trait TipoDRType

object TipoDRType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoDRType]): TipoDRType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoDRType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoDRType] = Seq(Number1Value5, Number2Value3)
}

case object Number1Value5 extends TipoDRType { override def toString = "1" }
case object Number2Value3 extends TipoDRType { override def toString = "2" }

sealed trait EstadoACKRepType

object EstadoACKRepType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.EstadoACKRepType]): EstadoACKRepType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: EstadoACKRepType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[EstadoACKRepType] = Seq(ARValue, BAValue2, BRValue)
}

case object ARValue extends EstadoACKRepType { override def toString = "AR" }
case object BAValue2 extends EstadoACKRepType { override def toString = "BA" }
case object BRValue extends EstadoACKRepType { override def toString = "BR" }

sealed trait EstadoACKSobreType

object EstadoACKSobreType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.EstadoACKSobreType]): EstadoACKSobreType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: EstadoACKSobreType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[EstadoACKSobreType] = Seq(AS, BA, BS)
}

case object AS extends EstadoACKSobreType { override def toString = "AS" }
case object BA extends EstadoACKSobreType { override def toString = "BA" }
case object BS extends EstadoACKSobreType { override def toString = "BS" }

sealed trait EstadoACKCFEType

object EstadoACKCFEType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.EstadoACKCFEType]): EstadoACKCFEType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: EstadoACKCFEType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[EstadoACKCFEType] = Seq(AEValue, BEValue, CE)
}

case object AEValue extends EstadoACKCFEType { override def toString = "AE" }
case object BEValue extends EstadoACKCFEType { override def toString = "BE" }
case object CE extends EstadoACKCFEType { override def toString = "CE" }

sealed trait Motivo

object Motivo {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.Motivo]): Motivo = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Motivo) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Motivo] = Seq(R01, R02, R03, R04, R05, R06)
}

case object R01 extends Motivo { override def toString = "R01" }
case object R02 extends Motivo { override def toString = "R02" }
case object R03 extends Motivo { override def toString = "R03" }
case object R04 extends Motivo { override def toString = "R04" }
case object R05 extends Motivo { override def toString = "R05" }
case object R06 extends Motivo { override def toString = "R06" }

sealed trait Glosa

object Glosa {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.Glosa]): Glosa = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Glosa) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Glosa] = Seq(Formatodelarchivonoeselindicado, NocoincideRUCenReporteu44Certificadooenvío, FirmaoCertificadoelectrónicosnosonválidos, NocumplevalidacionessegúnFormatodeReporte, Lasecuenciaindicadaenelreportenoescorrecta, Fecharecepciónnopuedesermenorafecharesumen)
}

case object Formatodelarchivonoeselindicado extends Glosa { override def toString = "Formato del archivo no es el indicado" }
case object NocoincideRUCenReporteu44Certificadooenvío extends Glosa { override def toString = "No coincide RUC en Reporte, Certificado o envío" }
case object FirmaoCertificadoelectrónicosnosonválidos extends Glosa { override def toString = "Firma o Certificado electrónicos no son válidos" }
case object NocumplevalidacionessegúnFormatodeReporte extends Glosa { override def toString = "No cumple validaciones según Formato de Reporte" }
case object Lasecuenciaindicadaenelreportenoescorrecta extends Glosa { override def toString = "La secuencia indicada en el reporte no es correcta" }
case object Fecharecepciónnopuedesermenorafecharesumen extends Glosa { override def toString = "Fecha recepción no puede ser menor a fecha resumen" }


case class RechazoRepType(Motivo: uy.com.dgi.Motivo,
  Glosa: uy.com.dgi.Glosa,
  Detalle: Option[String] = None)
      

sealed trait MotivoType

object MotivoType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.MotivoType]): MotivoType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: MotivoType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[MotivoType] = Seq(S01, S02, S03, S04, S05, S06, S07, S08)
}

case object S01 extends MotivoType { override def toString = "S01" }
case object S02 extends MotivoType { override def toString = "S02" }
case object S03 extends MotivoType { override def toString = "S03" }
case object S04 extends MotivoType { override def toString = "S04" }
case object S05 extends MotivoType { override def toString = "S05" }
case object S06 extends MotivoType { override def toString = "S06" }
case object S07 extends MotivoType { override def toString = "S07" }
case object S08 extends MotivoType { override def toString = "S08" }

sealed trait GlosaType

object GlosaType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.GlosaType]): GlosaType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: GlosaType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[GlosaType] = Seq(FormatodelarchivonoeselindicadoValue, NocoincideRUCdeSobreu44Certificadou44envíooCFE, Certificadoelectróniconoesválido, NocumplevalidacionessegúnFormatodesobre, NocoincidencantidadCFEdecarátulaycontenido, Nocoincidencertificadodesobreycomprobantes, Sobreenviadosuperaeltamañomáximoadmitido, SobreenviadoyaexisteenlosregistrosdeDGI)
}

case object FormatodelarchivonoeselindicadoValue extends GlosaType { override def toString = "Formato del archivo no es el indicado" }
case object NocoincideRUCdeSobreu44Certificadou44envíooCFE extends GlosaType { override def toString = "No coincide RUC de Sobre, Certificado, envío o CFE" }
case object Certificadoelectróniconoesválido extends GlosaType { override def toString = "Certificado electrónico no es válido" }
case object NocumplevalidacionessegúnFormatodesobre extends GlosaType { override def toString = "No cumple validaciones según Formato de sobre" }
case object NocoincidencantidadCFEdecarátulaycontenido extends GlosaType { override def toString = "No coinciden cantidad CFE de carátula y contenido" }
case object Nocoincidencertificadodesobreycomprobantes extends GlosaType { override def toString = "No coinciden certificado de sobre y comprobantes" }
case object Sobreenviadosuperaeltamañomáximoadmitido extends GlosaType { override def toString = "Sobre enviado supera el tamaño máximo admitido" }
case object SobreenviadoyaexisteenlosregistrosdeDGI extends GlosaType { override def toString = "Sobre enviado ya existe en los registros de DGI" }


case class RechazoSobreType(Motivo: uy.com.dgi.MotivoType,
  Glosa: uy.com.dgi.GlosaType,
  Detalle: Option[String] = None)
      

sealed trait MotivoType2

object MotivoType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.MotivoType2]): MotivoType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: MotivoType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[MotivoType2] = Seq(E01, E02, E03, E04, E05, E07, E08, E09)
}

case object E01 extends MotivoType2 { override def toString = "E01" }
case object E02 extends MotivoType2 { override def toString = "E02" }
case object E03 extends MotivoType2 { override def toString = "E03" }
case object E04 extends MotivoType2 { override def toString = "E04" }
case object E05 extends MotivoType2 { override def toString = "E05" }
case object E07 extends MotivoType2 { override def toString = "E07" }
case object E08 extends MotivoType2 { override def toString = "E08" }
case object E09 extends MotivoType2 { override def toString = "E09" }

sealed trait GlosaType2

object GlosaType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.GlosaType2]): GlosaType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: GlosaType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[GlosaType2] = Seq(TipoyNºdeCFEyafuereportadocomoanulado, TipoyNºdeCFEyaexisteenlosregistros, TipoyNºdeCFEnosecorrespondenconelCAE, Firmaelectrónicanoesválida, NocumplevalidacionesdeFormatocomprobantes, FechaFirmadeCFEnosecorrespondeconfechaCAE, NocoincideRUCdeCFEyComplementoFiscal, LongName)
}

case object TipoyNºdeCFEyafuereportadocomoanulado extends GlosaType2 { override def toString = "Tipo y Nº de CFE ya fue reportado como anulado" }
case object TipoyNºdeCFEyaexisteenlosregistros extends GlosaType2 { override def toString = "Tipo y Nº de CFE ya existe en los registros" }
case object TipoyNºdeCFEnosecorrespondenconelCAE extends GlosaType2 { override def toString = "Tipo y Nº de CFE no se corresponden con el CAE" }
case object Firmaelectrónicanoesválida extends GlosaType2 { override def toString = "Firma electrónica no es válida" }
case object NocumplevalidacionesdeFormatocomprobantes extends GlosaType2 { override def toString = "No cumple validaciones de Formato comprobantes" }
case object FechaFirmadeCFEnosecorrespondeconfechaCAE extends GlosaType2 { override def toString = "Fecha Firma de CFE no se corresponde con fecha CAE" }
case object NocoincideRUCdeCFEyComplementoFiscal extends GlosaType2 { override def toString = "No coincide RUC de CFE y Complemento Fiscal" }
case object LongName extends GlosaType2 { override def toString = "RUC emisor y/o tipo de CFE no se corresponden con el CAE" }


case class RechazoCFE_DGIType(Motivo: uy.com.dgi.MotivoType2,
  Glosa: uy.com.dgi.GlosaType2,
  Detalle: Option[String] = None)
      

sealed trait MotivoType3

object MotivoType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.MotivoType3]): MotivoType3 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: MotivoType3) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[MotivoType3] = Seq(C03, C04, C05, C08, C09)
}

case object C03 extends MotivoType3 { override def toString = "C03" }
case object C04 extends MotivoType3 { override def toString = "C04" }
case object C05 extends MotivoType3 { override def toString = "C05" }
case object C08 extends MotivoType3 { override def toString = "C08" }
case object C09 extends MotivoType3 { override def toString = "C09" }

sealed trait GlosaType3

object GlosaType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.GlosaType3]): GlosaType3 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: GlosaType3) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[GlosaType3] = Seq(TipoyNºdeCFCyaexisteenlosregistros, Constancianoautorizadasegúnregistros, FirmaelectrónicanoesválidaValue, NocumplevalidacionesdeFormatocomprobantesValue, NocoincideRUCdeCFEyComplementoFiscalValue, NºdeCFCnofueautorizadosegúnregistros)
}

case object TipoyNºdeCFCyaexisteenlosregistros extends GlosaType3 { override def toString = "Tipo y Nº de CFC ya existe en los registros" }
case object Constancianoautorizadasegúnregistros extends GlosaType3 { override def toString = "Constancia no autorizada según registros" }
case object FirmaelectrónicanoesválidaValue extends GlosaType3 { override def toString = "Firma electrónica no es válida" }
case object NocumplevalidacionesdeFormatocomprobantesValue extends GlosaType3 { override def toString = "No cumple validaciones de Formato comprobantes" }
case object NocoincideRUCdeCFEyComplementoFiscalValue extends GlosaType3 { override def toString = "No coincide RUC de CFE y Complemento Fiscal" }
case object NºdeCFCnofueautorizadosegúnregistros extends GlosaType3 { override def toString = "Nº de CFC no fue autorizado según registros" }


case class ObsCFCType(Motivo: uy.com.dgi.MotivoType3,
  Glosa: uy.com.dgi.GlosaType3,
  Detalle: Option[String] = None)
      

sealed trait MotivoType4

object MotivoType4 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.MotivoType4]): MotivoType4 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: MotivoType4) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[MotivoType4] = Seq(E02Value, E03Value, E04Value, E05Value, E07Value, E08Value, E09Value, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)
}

case object E02Value extends MotivoType4 { override def toString = "E02" }
case object E03Value extends MotivoType4 { override def toString = "E03" }
case object E04Value extends MotivoType4 { override def toString = "E04" }
case object E05Value extends MotivoType4 { override def toString = "E05" }
case object E07Value extends MotivoType4 { override def toString = "E07" }
case object E08Value extends MotivoType4 { override def toString = "E08" }
case object E09Value extends MotivoType4 { override def toString = "E09" }
case object E20 extends MotivoType4 { override def toString = "E20" }
case object E21 extends MotivoType4 { override def toString = "E21" }
case object E22 extends MotivoType4 { override def toString = "E22" }
case object E23 extends MotivoType4 { override def toString = "E23" }
case object E24 extends MotivoType4 { override def toString = "E24" }
case object E25 extends MotivoType4 { override def toString = "E25" }
case object E26 extends MotivoType4 { override def toString = "E26" }
case object E27 extends MotivoType4 { override def toString = "E27" }
case object E28 extends MotivoType4 { override def toString = "E28" }
case object E29 extends MotivoType4 { override def toString = "E29" }
case object E30 extends MotivoType4 { override def toString = "E30" }
case object E31 extends MotivoType4 { override def toString = "E31" }
case object E32 extends MotivoType4 { override def toString = "E32" }
case object E33 extends MotivoType4 { override def toString = "E33" }
case object E34 extends MotivoType4 { override def toString = "E34" }
case object E35 extends MotivoType4 { override def toString = "E35" }
case object E36 extends MotivoType4 { override def toString = "E36" }
case object E37 extends MotivoType4 { override def toString = "E37" }
case object E38 extends MotivoType4 { override def toString = "E38" }
case object E39 extends MotivoType4 { override def toString = "E39" }
case object E40 extends MotivoType4 { override def toString = "E40" }
case object E41 extends MotivoType4 { override def toString = "E41" }
case object E42 extends MotivoType4 { override def toString = "E42" }
case object E43 extends MotivoType4 { override def toString = "E43" }
case object E44 extends MotivoType4 { override def toString = "E44" }
case object E45 extends MotivoType4 { override def toString = "E45" }
case object E46 extends MotivoType4 { override def toString = "E46" }
case object E47 extends MotivoType4 { override def toString = "E47" }
case object E48 extends MotivoType4 { override def toString = "E48" }
case object E49 extends MotivoType4 { override def toString = "E49" }
case object E50 extends MotivoType4 { override def toString = "E50" }
case object E51 extends MotivoType4 { override def toString = "E51" }
case object E52 extends MotivoType4 { override def toString = "E52" }
case object E53 extends MotivoType4 { override def toString = "E53" }
case object E54 extends MotivoType4 { override def toString = "E54" }
case object E55 extends MotivoType4 { override def toString = "E55" }
case object E56 extends MotivoType4 { override def toString = "E56" }
case object E57 extends MotivoType4 { override def toString = "E57" }
case object E58 extends MotivoType4 { override def toString = "E58" }
case object E59 extends MotivoType4 { override def toString = "E59" }
case object E60 extends MotivoType4 { override def toString = "E60" }


case class RechazoCFE_PartesType(Motivo: uy.com.dgi.MotivoType4,
  Glosa: String,
  Detalle: Option[String] = None)
      


case class InfoRespOriType(IDRespSobre: BigInt,
  IDEmisorSobre: BigInt,
  IDReceptorSobre: BigInt,
  IDTokenSobre: scalaxb.Base64Binary)
      

sealed trait ModVentaType

object ModVentaType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.ModVentaType]): ModVentaType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: ModVentaType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[ModVentaType] = Seq(Number1Value4, Number2Value2, Number3Value, Number4Value, Number90, Number99)
}

case object Number1Value4 extends ModVentaType { override def toString = "1" }
case object Number2Value2 extends ModVentaType { override def toString = "2" }
case object Number3Value extends ModVentaType { override def toString = "3" }
case object Number4Value extends ModVentaType { override def toString = "4" }
case object Number90 extends ModVentaType { override def toString = "90" }
case object Number99 extends ModVentaType { override def toString = "99" }

sealed trait ViaTranspType

object ViaTranspType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.ViaTranspType]): ViaTranspType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: ViaTranspType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[ViaTranspType] = Seq(Number1Value11, Number2Value8, Number3Value3, Number8, Number9)
}

case object Number1Value11 extends ViaTranspType { override def toString = "1" }
case object Number2Value8 extends ViaTranspType { override def toString = "2" }
case object Number3Value3 extends ViaTranspType { override def toString = "3" }
case object Number8 extends ViaTranspType { override def toString = "8" }
case object Number9 extends ViaTranspType { override def toString = "9" }

sealed trait DocTypemasNIE

object DocTypemasNIE {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.DocTypemasNIE]): DocTypemasNIE = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DocTypemasNIE) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DocTypemasNIE] = Seq(Number1Value3, Number2Value, Number3, Number4, Number5, Number6, Number7)
}

case object Number1Value3 extends DocTypemasNIE { override def toString = "1" }
case object Number2Value extends DocTypemasNIE { override def toString = "2" }
case object Number3 extends DocTypemasNIE { override def toString = "3" }
case object Number4 extends DocTypemasNIE { override def toString = "4" }
case object Number5 extends DocTypemasNIE { override def toString = "5" }
case object Number6 extends DocTypemasNIE { override def toString = "6" }
case object Number7 extends DocTypemasNIE { override def toString = "7" }

sealed trait IndPropiedadType

object IndPropiedadType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndPropiedadType]): IndPropiedadType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndPropiedadType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndPropiedadType] = Seq(Number1Value2)
}

case object Number1Value2 extends IndPropiedadType { override def toString = "1" }

sealed trait IndIVAalDiaType

object IndIVAalDiaType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndIVAalDiaType]): IndIVAalDiaType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndIVAalDiaType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndIVAalDiaType] = Seq(Number1Value12)
}

case object Number1Value12 extends IndIVAalDiaType { override def toString = "1" }

sealed trait SecProfType

object SecProfType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.SecProfType]): SecProfType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: SecProfType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[SecProfType] = Seq(Number1Value, Number2)
}

case object Number1Value extends SecProfType { override def toString = "1" }
case object Number2 extends SecProfType { override def toString = "2" }

sealed trait IndPagCta3rosType

object IndPagCta3rosType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndPagCta3rosType]): IndPagCta3rosType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndPagCta3rosType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndPagCta3rosType] = Seq(Number1Value13)
}

case object Number1Value13 extends IndPagCta3rosType { override def toString = "1" }

sealed trait IndCobPropiaType

object IndCobPropiaType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndCobPropiaType]): IndCobPropiaType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndCobPropiaType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndCobPropiaType] = Seq(Number1)
}

case object Number1 extends IndCobPropiaType { override def toString = "1" }

