// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package uy.com.dgi

sealed trait CAEEspecial

object CAEEspecial {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.CAEEspecial]): CAEEspecial = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: CAEEspecial) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[CAEEspecial] = Seq(Number1Value14, Number2Value9, Number3Value4, Number4Value3)
}

case object Number1Value14 extends CAEEspecial { override def toString = "1" }
case object Number2Value9 extends CAEEspecial { override def toString = "2" }
case object Number3Value4 extends CAEEspecial { override def toString = "3" }
case object Number4Value3 extends CAEEspecial { override def toString = "4" }


/** Referencia al CAE
*/
case class CAEDataType(CAE_ID: BigInt,
  DNro: BigInt,
  HNro: BigInt,
  FecVenc: javax.xml.datatype.XMLGregorianCalendar,
  CAEEspecial: Option[uy.com.dgi.CAEEspecial] = None,
  CausalCAEEsp: Option[BigInt] = None)
      


case class Encabezado(IdDoc: uy.com.dgi.IdDoc_Tck,
  Emisor: uy.com.dgi.Emisor,
  Receptor: Option[uy.com.dgi.Receptor_Tck] = None,
  Totales: uy.com.dgi.TotalesType)
      


case class Detalle(Item: Seq[uy.com.dgi.Item_Det_Fact] = Nil)
      


case class ETck(TmstFirma: javax.xml.datatype.XMLGregorianCalendar,
  Encabezado: uy.com.dgi.Encabezado,
  Detalle: uy.com.dgi.Detalle,
  SubTotInfo: Option[uy.com.dgi.SubTotInfo] = None,
  DscRcgGlobal: Option[uy.com.dgi.DscRcgGlobal] = None,
  MediosPago: Option[uy.com.dgi.MediosPago] = None,
  Referencia: Option[uy.com.dgi.ReferenciaType] = None,
  CAEData: uy.com.dgi.CAEDataType,
  Compl_Fiscal: Option[uy.com.dgi.Compl_FiscalType] = None) extends CFEDefTypeOption
      


case class Encabezado2(IdDoc: uy.com.dgi.IdDoc_Fact,
  Emisor: uy.com.dgi.Emisor,
  Receptor: Option[uy.com.dgi.Receptor_Fact] = None,
  Totales: uy.com.dgi.TotalesType)
      


case class Detalle2(Item: Seq[uy.com.dgi.Item_Det_Fact] = Nil)
      


case class EFact(TmstFirma: javax.xml.datatype.XMLGregorianCalendar,
  Encabezado: uy.com.dgi.Encabezado2,
  Detalle: uy.com.dgi.Detalle2,
  SubTotInfo: Option[uy.com.dgi.SubTotInfo] = None,
  DscRcgGlobal: Option[uy.com.dgi.DscRcgGlobal] = None,
  MediosPago: Option[uy.com.dgi.MediosPago] = None,
  Referencia: Option[uy.com.dgi.ReferenciaType] = None,
  CAEData: uy.com.dgi.CAEDataType,
  Compl_Fiscal: Option[uy.com.dgi.Compl_FiscalType] = None) extends CFEDefTypeOption
      


case class Encabezado3(IdDoc: uy.com.dgi.IdDoc_Fact_Exp,
  Emisor: uy.com.dgi.Emisor,
  Receptor: Option[uy.com.dgi.Receptor_Fact_Exp] = None,
  Totales: uy.com.dgi.Totales_Fact_Exp)
      


case class Detalle3(Item: Seq[uy.com.dgi.Item_Det_Fact_Exp] = Nil)
      


case class EFact_Exp(TmstFirma: javax.xml.datatype.XMLGregorianCalendar,
  Encabezado: uy.com.dgi.Encabezado3,
  Detalle: uy.com.dgi.Detalle3,
  SubTotInfo: Option[uy.com.dgi.SubTotInfo] = None,
  DscRcgGlobal: Option[uy.com.dgi.DscRcgGlobal] = None,
  MediosPago: Option[uy.com.dgi.MediosPago] = None,
  Referencia: Option[uy.com.dgi.ReferenciaType] = None,
  CAEData: uy.com.dgi.CAEDataType) extends CFEDefTypeOption
      


case class Totales(CantLinDet: BigInt)
      


case class Encabezado4(IdDoc: uy.com.dgi.IdDoc_Rem,
  Emisor: uy.com.dgi.Emisor,
  Receptor: Option[uy.com.dgi.Receptor_Rem] = None,
  Totales: uy.com.dgi.Totales)
      


case class Detalle4(Item: Seq[uy.com.dgi.Item_Rem] = Nil)
      


case class ERem(TmstFirma: javax.xml.datatype.XMLGregorianCalendar,
  Encabezado: uy.com.dgi.Encabezado4,
  Detalle: uy.com.dgi.Detalle4,
  SubTotInfo: Option[uy.com.dgi.SubTotInfo] = None,
  Referencia: Option[uy.com.dgi.ReferenciaType] = None,
  CAEData: uy.com.dgi.CAEDataType) extends CFEDefTypeOption
      


case class Encabezado5(IdDoc: uy.com.dgi.IdDoc_Rem_Exp,
  Emisor: uy.com.dgi.Emisor,
  Receptor: Option[uy.com.dgi.Receptor_Rem_Exp] = None,
  Totales: uy.com.dgi.Totales_Rem_Exp)
      


case class Detalle5(Item: Seq[uy.com.dgi.Item_Rem_Exp] = Nil)
      


case class ERem_Exp(TmstFirma: javax.xml.datatype.XMLGregorianCalendar,
  Encabezado: uy.com.dgi.Encabezado5,
  Detalle: uy.com.dgi.Detalle5,
  SubTotInfo: Option[uy.com.dgi.SubTotInfo] = None,
  Referencia: Option[uy.com.dgi.ReferenciaType] = None,
  CAEData: uy.com.dgi.CAEDataType) extends CFEDefTypeOption
      


case class Encabezado6(IdDoc: uy.com.dgi.IdDoc_Resg,
  Emisor: uy.com.dgi.Emisor,
  Receptor: Option[uy.com.dgi.Receptor_Resg] = None,
  Totales: uy.com.dgi.Totales_Resg)
      


case class Detalle6(Item: Seq[uy.com.dgi.Item_Resg] = Nil)
      


case class EResg(TmstFirma: javax.xml.datatype.XMLGregorianCalendar,
  Encabezado: uy.com.dgi.Encabezado6,
  Detalle: uy.com.dgi.Detalle6,
  SubTotInfo: Option[uy.com.dgi.SubTotInfo] = None,
  Referencia: Option[uy.com.dgi.ReferenciaType] = None,
  CAEData: uy.com.dgi.CAEDataType) extends CFEDefTypeOption
      


case class Encabezado7(IdDoc: uy.com.dgi.IdDoc_Boleta,
  Emisor: uy.com.dgi.Emisor,
  Receptor: uy.com.dgi.Receptor_Boleta,
  Totales: uy.com.dgi.Totales_Boleta)
      


case class Detalle7(Item: Seq[uy.com.dgi.Item_Det_Boleta] = Nil)
      


case class EBoleta(TmstFirma: javax.xml.datatype.XMLGregorianCalendar,
  Encabezado: uy.com.dgi.Encabezado7,
  Detalle: uy.com.dgi.Detalle7,
  SubTotInfo: Option[uy.com.dgi.SubTotInfo] = None,
  DscRcgGlobal: Option[uy.com.dgi.DscRcgGlobal] = None,
  MediosPago: Option[uy.com.dgi.MediosPago] = None,
  Referencia: Option[uy.com.dgi.ReferenciaType] = None,
  CAEData: uy.com.dgi.CAEDataType) extends CFEDefTypeOption
      


/** Comprobante Fiscal Electronico
*/
case class CFEDefType(cfedeftypeoption: scalaxb.DataRecord[uy.com.dgi.CFEDefTypeOption],
  Signature: uy.com.dgi.SignatureType,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val version = attributes("@version").as[String]
}

      

trait CFEDefTypeOption
sealed trait TpoMovDR

object TpoMovDR {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TpoMovDR]): TpoMovDR = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TpoMovDR) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TpoMovDR] = Seq(D, RValue)
}

case object D extends TpoMovDR { override def toString = "D" }
case object RValue extends TpoMovDR { override def toString = "R" }

sealed trait IndFactDR

object IndFactDR {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndFactDR]): IndFactDR = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndFactDR) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndFactDR] = Seq(Number1Value16, Number2Value10, Number3Value5, Number4Value4, Number6Value2, Number7Value2, Number10, Number11, Number12, Number13, Number14, Number15, Number16)
}

case object Number1Value16 extends IndFactDR { override def toString = "1" }
case object Number2Value10 extends IndFactDR { override def toString = "2" }
case object Number3Value5 extends IndFactDR { override def toString = "3" }
case object Number4Value4 extends IndFactDR { override def toString = "4" }
case object Number6Value2 extends IndFactDR { override def toString = "6" }
case object Number7Value2 extends IndFactDR { override def toString = "7" }
case object Number10 extends IndFactDR { override def toString = "10" }
case object Number11 extends IndFactDR { override def toString = "11" }
case object Number12 extends IndFactDR { override def toString = "12" }
case object Number13 extends IndFactDR { override def toString = "13" }
case object Number14 extends IndFactDR { override def toString = "14" }
case object Number15 extends IndFactDR { override def toString = "15" }
case object Number16 extends IndFactDR { override def toString = "16" }


case class DRG_Item(NroLinDR: BigInt,
  TpoMovDR: uy.com.dgi.TpoMovDR,
  TpoDR: uy.com.dgi.TipoDRType,
  CodDR: Option[BigInt] = None,
  GlosaDR: String,
  ValorDR: BigDecimal,
  IndFactDR: uy.com.dgi.IndFactDR)
      


case class DscRcgGlobal(DRG_Item: Seq[uy.com.dgi.DRG_Item] = Nil)
      


case class Emisor(RUCEmisor: String,
  RznSoc: String,
  NomComercial: Option[String] = None,
  GiroEmis: Option[String] = None,
  Telefono: Seq[String] = Nil,
  CorreoEmisor: Option[String] = None,
  EmiSucursal: Option[String] = None,
  CdgDGISucur: BigInt,
  DomFiscal: String,
  Ciudad: String,
  Departamento: String,
  InfoAdicionalEmisor: Option[String] = None)
      

sealed trait TipoCFE

object TipoCFE {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoCFE]): TipoCFE = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoCFE) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoCFE] = Seq(Number111Value, Number112Value, Number113Value, Number141Value, Number142Value, Number143Value, Number211Value, Number212Value, Number213Value, Number241Value, Number242Value, Number243Value)
}

case object Number111Value extends TipoCFE { override def toString = "111" }
case object Number112Value extends TipoCFE { override def toString = "112" }
case object Number113Value extends TipoCFE { override def toString = "113" }
case object Number141Value extends TipoCFE { override def toString = "141" }
case object Number142Value extends TipoCFE { override def toString = "142" }
case object Number143Value extends TipoCFE { override def toString = "143" }
case object Number211Value extends TipoCFE { override def toString = "211" }
case object Number212Value extends TipoCFE { override def toString = "212" }
case object Number213Value extends TipoCFE { override def toString = "213" }
case object Number241Value extends TipoCFE { override def toString = "241" }
case object Number242Value extends TipoCFE { override def toString = "242" }
case object Number243Value extends TipoCFE { override def toString = "243" }

sealed trait MntBruto

object MntBruto {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.MntBruto]): MntBruto = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: MntBruto) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[MntBruto] = Seq(Number1Value15, Number2Value11, Number3Value6)
}

case object Number1Value15 extends MntBruto { override def toString = "1" }
case object Number2Value11 extends MntBruto { override def toString = "2" }
case object Number3Value6 extends MntBruto { override def toString = "3" }

sealed trait FmaPago

object FmaPago {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.FmaPago]): FmaPago = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FmaPago) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FmaPago] = Seq(Number1Value17, Number2Value12)
}

case object Number1Value17 extends FmaPago { override def toString = "1" }
case object Number2Value12 extends FmaPago { override def toString = "2" }


case class IdDoc_Fact(TipoCFE: uy.com.dgi.TipoCFE,
  Serie: String,
  Nro: BigInt,
  FchEmis: javax.xml.datatype.XMLGregorianCalendar,
  PeriodoDesde: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  PeriodoHasta: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  MntBruto: Option[uy.com.dgi.MntBruto] = None,
  FmaPago: uy.com.dgi.FmaPago,
  FchVenc: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  InfoAdicionalDoc: Option[String] = None,
  IVAalDia: Option[uy.com.dgi.IndIVAalDiaType] = None,
  SecProf: Option[uy.com.dgi.SecProfType] = None,
  IndPagCta3ros: Option[uy.com.dgi.IndPagCta3rosType] = None,
  IndCobPropia: Option[uy.com.dgi.IndCobPropiaType] = None)
      

sealed trait TipoCFEType

object TipoCFEType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType]): TipoCFEType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoCFEType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoCFEType] = Seq(Number121Value, Number122Value, Number123Value, Number221Value, Number222Value, Number223Value)
}

case object Number121Value extends TipoCFEType { override def toString = "121" }
case object Number122Value extends TipoCFEType { override def toString = "122" }
case object Number123Value extends TipoCFEType { override def toString = "123" }
case object Number221Value extends TipoCFEType { override def toString = "221" }
case object Number222Value extends TipoCFEType { override def toString = "222" }
case object Number223Value extends TipoCFEType { override def toString = "223" }

sealed trait MntBrutoType

object MntBrutoType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.MntBrutoType]): MntBrutoType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: MntBrutoType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[MntBrutoType] = Seq(Number1Value18, Number2Value13, Number3Value7)
}

case object Number1Value18 extends MntBrutoType { override def toString = "1" }
case object Number2Value13 extends MntBrutoType { override def toString = "2" }
case object Number3Value7 extends MntBrutoType { override def toString = "3" }

sealed trait FmaPagoType

object FmaPagoType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.FmaPagoType]): FmaPagoType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FmaPagoType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FmaPagoType] = Seq(Number1Value19, Number2Value14)
}

case object Number1Value19 extends FmaPagoType { override def toString = "1" }
case object Number2Value14 extends FmaPagoType { override def toString = "2" }


case class IdDoc_Fact_Exp(TipoCFE: uy.com.dgi.TipoCFEType,
  Serie: String,
  Nro: BigInt,
  FchEmis: javax.xml.datatype.XMLGregorianCalendar,
  PeriodoDesde: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  PeriodoHasta: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  MntBruto: Option[uy.com.dgi.MntBrutoType] = None,
  FmaPago: uy.com.dgi.FmaPagoType,
  FchVenc: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  ClauVenta: String,
  ModVenta: Option[uy.com.dgi.ModVentaType] = None,
  ViaTransp: uy.com.dgi.ViaTranspType,
  InfoAdicionalDoc: Option[String] = None,
  IVAalDia: Option[uy.com.dgi.IndIVAalDiaType] = None,
  SecProf: Option[uy.com.dgi.SecProfType] = None,
  IndPagCta3ros: Option[uy.com.dgi.IndPagCta3rosType] = None)
      

sealed trait TipoCFEType2

object TipoCFEType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType2]): TipoCFEType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoCFEType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoCFEType2] = Seq(Number181Value, Number281Value)
}

case object Number181Value extends TipoCFEType2 { override def toString = "181" }
case object Number281Value extends TipoCFEType2 { override def toString = "281" }


case class IdDoc_Rem(TipoCFE: uy.com.dgi.TipoCFEType2,
  Serie: String,
  Nro: BigInt,
  FchEmis: javax.xml.datatype.XMLGregorianCalendar,
  TipoTraslado: uy.com.dgi.TipoTrasladoType,
  IndPropiedad: Option[uy.com.dgi.IndPropiedadType] = None,
  TipoDocProp: Option[uy.com.dgi.DocType] = None,
  CodPaisProp: Option[uy.com.dgi.CodPaisType] = None,
  iddoc_remoption: Option[scalaxb.DataRecord[Any]] = None,
  RznSocProp: Option[String] = None,
  InfoAdicionalDoc: Option[String] = None,
  SecProf: Option[uy.com.dgi.SecProfType] = None)
      

trait IdDoc_RemOption
sealed trait TipoCFEType3

object TipoCFEType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType3]): TipoCFEType3 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoCFEType3) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoCFEType3] = Seq(Number124Value, Number224Value)
}

case object Number124Value extends TipoCFEType3 { override def toString = "124" }
case object Number224Value extends TipoCFEType3 { override def toString = "224" }


case class IdDoc_Rem_Exp(TipoCFE: uy.com.dgi.TipoCFEType3,
  Serie: String,
  Nro: BigInt,
  FchEmis: javax.xml.datatype.XMLGregorianCalendar,
  TipoTraslado: uy.com.dgi.TipoTrasladoType,
  IndPropiedad: Option[uy.com.dgi.IndPropiedadType] = None,
  TipoDocProp: Option[uy.com.dgi.DocType] = None,
  CodPaisProp: Option[uy.com.dgi.CodPaisType] = None,
  iddoc_rem_expoption: Option[scalaxb.DataRecord[Any]] = None,
  RznSocProp: Option[String] = None,
  ClauVenta: Option[String] = None,
  ModVenta: uy.com.dgi.ModVentaType,
  ViaTransp: uy.com.dgi.ViaTranspType,
  InfoAdicionalDoc: Option[String] = None,
  SecProf: Option[uy.com.dgi.SecProfType] = None)
      

trait IdDoc_Rem_ExpOption
sealed trait TipoCFEType4

object TipoCFEType4 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType4]): TipoCFEType4 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoCFEType4) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoCFEType4] = Seq(Number182Value, Number282Value)
}

case object Number182Value extends TipoCFEType4 { override def toString = "182" }
case object Number282Value extends TipoCFEType4 { override def toString = "282" }


case class IdDoc_Resg(TipoCFE: uy.com.dgi.TipoCFEType4,
  Serie: String,
  Nro: BigInt,
  FchEmis: javax.xml.datatype.XMLGregorianCalendar,
  InfoAdicionalDoc: Option[String] = None,
  SecProf: Option[uy.com.dgi.SecProfType] = None)
      

sealed trait TipoCFEType5

object TipoCFEType5 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType5]): TipoCFEType5 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoCFEType5) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoCFEType5] = Seq(Number101Value, Number102Value, Number103Value, Number131Value, Number132Value, Number133Value, Number201Value, Number202Value, Number203Value, Number231Value, Number232Value, Number233Value)
}

case object Number101Value extends TipoCFEType5 { override def toString = "101" }
case object Number102Value extends TipoCFEType5 { override def toString = "102" }
case object Number103Value extends TipoCFEType5 { override def toString = "103" }
case object Number131Value extends TipoCFEType5 { override def toString = "131" }
case object Number132Value extends TipoCFEType5 { override def toString = "132" }
case object Number133Value extends TipoCFEType5 { override def toString = "133" }
case object Number201Value extends TipoCFEType5 { override def toString = "201" }
case object Number202Value extends TipoCFEType5 { override def toString = "202" }
case object Number203Value extends TipoCFEType5 { override def toString = "203" }
case object Number231Value extends TipoCFEType5 { override def toString = "231" }
case object Number232Value extends TipoCFEType5 { override def toString = "232" }
case object Number233Value extends TipoCFEType5 { override def toString = "233" }

sealed trait MntBrutoType2

object MntBrutoType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.MntBrutoType2]): MntBrutoType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: MntBrutoType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[MntBrutoType2] = Seq(Number1Value20, Number2Value15, Number3Value8)
}

case object Number1Value20 extends MntBrutoType2 { override def toString = "1" }
case object Number2Value15 extends MntBrutoType2 { override def toString = "2" }
case object Number3Value8 extends MntBrutoType2 { override def toString = "3" }

sealed trait FmaPagoType2

object FmaPagoType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.FmaPagoType2]): FmaPagoType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FmaPagoType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FmaPagoType2] = Seq(Number1Value21, Number2Value16)
}

case object Number1Value21 extends FmaPagoType2 { override def toString = "1" }
case object Number2Value16 extends FmaPagoType2 { override def toString = "2" }


case class IdDoc_Tck(TipoCFE: uy.com.dgi.TipoCFEType5,
  Serie: String,
  Nro: BigInt,
  FchEmis: javax.xml.datatype.XMLGregorianCalendar,
  PeriodoDesde: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  PeriodoHasta: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  MntBruto: Option[uy.com.dgi.MntBrutoType2] = None,
  FmaPago: uy.com.dgi.FmaPagoType2,
  FchVenc: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  InfoAdicionalDoc: Option[String] = None,
  IVAalDia: Option[uy.com.dgi.IndIVAalDiaType] = None,
  SecProf: Option[uy.com.dgi.SecProfType] = None,
  IndPagCta3ros: Option[uy.com.dgi.IndPagCta3rosType] = None,
  IndCobPropia: Option[uy.com.dgi.IndCobPropiaType] = None)
      

sealed trait TipoCFEType6

object TipoCFEType6 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType6]): TipoCFEType6 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoCFEType6) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoCFEType6] = Seq(Number131Value2, Number132Value2, Number133Value2, Number141Value2, Number142Value2, Number143Value2, Number231Value2, Number232Value2, Number233Value2, Number241Value2, Number242Value2, Number243Value2)
}

case object Number131Value2 extends TipoCFEType6 { override def toString = "131" }
case object Number132Value2 extends TipoCFEType6 { override def toString = "132" }
case object Number133Value2 extends TipoCFEType6 { override def toString = "133" }
case object Number141Value2 extends TipoCFEType6 { override def toString = "141" }
case object Number142Value2 extends TipoCFEType6 { override def toString = "142" }
case object Number143Value2 extends TipoCFEType6 { override def toString = "143" }
case object Number231Value2 extends TipoCFEType6 { override def toString = "231" }
case object Number232Value2 extends TipoCFEType6 { override def toString = "232" }
case object Number233Value2 extends TipoCFEType6 { override def toString = "233" }
case object Number241Value2 extends TipoCFEType6 { override def toString = "241" }
case object Number242Value2 extends TipoCFEType6 { override def toString = "242" }
case object Number243Value2 extends TipoCFEType6 { override def toString = "243" }


case class IdDoc_CompFisc(TipoCFE: uy.com.dgi.TipoCFEType6,
  Serie: String,
  Nro: BigInt)
      

sealed trait TipoCFEType7

object TipoCFEType7 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType7]): TipoCFEType7 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: TipoCFEType7) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[TipoCFEType7] = Seq(Number151Value, Number152Value, Number153Value, Number251Value, Number252Value, Number253Value)
}

case object Number151Value extends TipoCFEType7 { override def toString = "151" }
case object Number152Value extends TipoCFEType7 { override def toString = "152" }
case object Number153Value extends TipoCFEType7 { override def toString = "153" }
case object Number251Value extends TipoCFEType7 { override def toString = "251" }
case object Number252Value extends TipoCFEType7 { override def toString = "252" }
case object Number253Value extends TipoCFEType7 { override def toString = "253" }

sealed trait MntBrutoType3

object MntBrutoType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.MntBrutoType3]): MntBrutoType3 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: MntBrutoType3) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[MntBrutoType3] = Seq(Number1Value22, Number2Value17, Number3Value9)
}

case object Number1Value22 extends MntBrutoType3 { override def toString = "1" }
case object Number2Value17 extends MntBrutoType3 { override def toString = "2" }
case object Number3Value9 extends MntBrutoType3 { override def toString = "3" }

sealed trait FmaPagoType3

object FmaPagoType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.FmaPagoType3]): FmaPagoType3 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FmaPagoType3) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FmaPagoType3] = Seq(Number1Value23, Number2Value18)
}

case object Number1Value23 extends FmaPagoType3 { override def toString = "1" }
case object Number2Value18 extends FmaPagoType3 { override def toString = "2" }


case class IdDoc_Boleta(TipoCFE: uy.com.dgi.TipoCFEType7,
  Serie: String,
  Nro: BigInt,
  FchEmis: javax.xml.datatype.XMLGregorianCalendar,
  PeriodoDesde: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  PeriodoHasta: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  MntBruto: Option[uy.com.dgi.MntBrutoType3] = None,
  FmaPago: uy.com.dgi.FmaPagoType3,
  FchVenc: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  InfoAdicionalDoc: Option[String] = None)
      


case class CodItem(TpoCod: String,
  Cod: String)
      

sealed trait IndFact

object IndFact {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndFact]): IndFact = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndFact) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndFact] = Seq(Number5Value2, Number6Value3, Number7Value3, Number10Value)
}

case object Number5Value2 extends IndFact { override def toString = "5" }
case object Number6Value3 extends IndFact { override def toString = "6" }
case object Number7Value3 extends IndFact { override def toString = "7" }
case object Number10Value extends IndFact { override def toString = "10" }

sealed trait DescTipo

object DescTipo {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.DescTipo]): DescTipo = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DescTipo) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DescTipo] = Seq(Number1Value24, Number2Value19)
}

case object Number1Value24 extends DescTipo { override def toString = "1" }
case object Number2Value19 extends DescTipo { override def toString = "2" }


case class SubDescuento(DescTipo: uy.com.dgi.DescTipo,
  DescVal: BigDecimal)
      

sealed trait RecargoTipo

object RecargoTipo {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.RecargoTipo]): RecargoTipo = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: RecargoTipo) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[RecargoTipo] = Seq(Number1Value25, Number2Value20)
}

case object Number1Value25 extends RecargoTipo { override def toString = "1" }
case object Number2Value20 extends RecargoTipo { override def toString = "2" }


case class SubRecargo(RecargoTipo: uy.com.dgi.RecargoTipo,
  RecargoVal: BigDecimal)
      


case class Item_Det_Fact_Exp(NroLinDet: BigInt,
  CodItem: Seq[uy.com.dgi.CodItem] = Nil,
  IndFact: uy.com.dgi.IndFact,
  NomItem: String,
  DscItem: Option[String] = None,
  Cantidad: BigDecimal,
  UniMed: String,
  PrecioUnitario: BigDecimal,
  DescuentoPct: Option[BigDecimal] = None,
  DescuentoMonto: Option[BigDecimal] = None,
  SubDescuento: Seq[uy.com.dgi.SubDescuento] = Nil,
  RecargoPct: Option[BigDecimal] = None,
  RecargoMnt: Option[BigDecimal] = None,
  SubRecargo: Seq[uy.com.dgi.SubRecargo] = Nil,
  MontoItem: BigDecimal)
      


case class CodItem2(TpoCod: String,
  Cod: String)
      

sealed trait IndFactType

object IndFactType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndFactType]): IndFactType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndFactType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndFactType] = Seq(Number1Value26, Number2Value21, Number3Value10, Number4Value5, Number5Value3, Number6Value4, Number7Value4, Number10Value2, Number11Value, Number12Value, Number16Value)
}

case object Number1Value26 extends IndFactType { override def toString = "1" }
case object Number2Value21 extends IndFactType { override def toString = "2" }
case object Number3Value10 extends IndFactType { override def toString = "3" }
case object Number4Value5 extends IndFactType { override def toString = "4" }
case object Number5Value3 extends IndFactType { override def toString = "5" }
case object Number6Value4 extends IndFactType { override def toString = "6" }
case object Number7Value4 extends IndFactType { override def toString = "7" }
case object Number10Value2 extends IndFactType { override def toString = "10" }
case object Number11Value extends IndFactType { override def toString = "11" }
case object Number12Value extends IndFactType { override def toString = "12" }
case object Number16Value extends IndFactType { override def toString = "16" }

sealed trait IndAgenteResp

object IndAgenteResp {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndAgenteResp]): IndAgenteResp = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndAgenteResp) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndAgenteResp] = Seq(RValue2, A)
}

case object RValue2 extends IndAgenteResp { override def toString = "R" }
case object A extends IndAgenteResp { override def toString = "A" }

sealed trait DescTipoType

object DescTipoType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.DescTipoType]): DescTipoType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DescTipoType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DescTipoType] = Seq(Number1Value27, Number2Value22)
}

case object Number1Value27 extends DescTipoType { override def toString = "1" }
case object Number2Value22 extends DescTipoType { override def toString = "2" }


case class SubDescuento2(DescTipo: uy.com.dgi.DescTipoType,
  DescVal: BigDecimal)
      

sealed trait RecargoTipoType

object RecargoTipoType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.RecargoTipoType]): RecargoTipoType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: RecargoTipoType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[RecargoTipoType] = Seq(Number1Value28, Number2Value23)
}

case object Number1Value28 extends RecargoTipoType { override def toString = "1" }
case object Number2Value23 extends RecargoTipoType { override def toString = "2" }


case class SubRecargo2(RecargoTipo: uy.com.dgi.RecargoTipoType,
  RecargoVal: BigDecimal)
      


case class Item_Det_Fact(NroLinDet: BigInt,
  CodItem: Seq[uy.com.dgi.CodItem2] = Nil,
  IndFact: uy.com.dgi.IndFactType,
  IndAgenteResp: Option[uy.com.dgi.IndAgenteResp] = None,
  NomItem: String,
  DscItem: Option[String] = None,
  Cantidad: BigDecimal,
  UniMed: String,
  PrecioUnitario: BigDecimal,
  DescuentoPct: Option[BigDecimal] = None,
  DescuentoMonto: Option[BigDecimal] = None,
  SubDescuento: Seq[uy.com.dgi.SubDescuento2] = Nil,
  RecargoPct: Option[BigDecimal] = None,
  RecargoMnt: Option[BigDecimal] = None,
  SubRecargo: Seq[uy.com.dgi.SubRecargo2] = Nil,
  RetencPercep: Seq[uy.com.dgi.RetPerc] = Nil,
  MontoItem: BigDecimal)
      


case class CodItem3(TpoCod: String,
  Cod: String)
      

sealed trait IndFactType2

object IndFactType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndFactType2]): IndFactType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndFactType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndFactType2] = Seq(Number5Value4, Number8Value)
}

case object Number5Value4 extends IndFactType2 { override def toString = "5" }
case object Number8Value extends IndFactType2 { override def toString = "8" }


case class Item_Rem_Exp(NroLinDet: BigInt,
  CodItem: Seq[uy.com.dgi.CodItem3] = Nil,
  IndFact: Option[uy.com.dgi.IndFactType2] = None,
  NomItem: String,
  DscItem: Option[String] = None,
  Cantidad: BigDecimal,
  UniMed: String,
  PrecioUnitario: BigDecimal,
  MontoItem: BigDecimal)
      


case class CodItem4(TpoCod: String,
  Cod: String)
      

sealed trait IndFactType3

object IndFactType3 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndFactType3]): IndFactType3 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndFactType3) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndFactType3] = Seq(Number8Value2)
}

case object Number8Value2 extends IndFactType3 { override def toString = "8" }


case class Item_Rem(NroLinDet: BigInt,
  CodItem: Seq[uy.com.dgi.CodItem4] = Nil,
  IndFact: Option[uy.com.dgi.IndFactType3] = None,
  NomItem: String,
  DscItem: Option[String] = None,
  Cantidad: BigDecimal,
  UniMed: String)
      

sealed trait IndFactType4

object IndFactType4 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndFactType4]): IndFactType4 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndFactType4) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndFactType4] = Seq(Number9Value)
}

case object Number9Value extends IndFactType4 { override def toString = "9" }


case class Item_Resg(NroLinDet: BigInt,
  IndFact: Option[uy.com.dgi.IndFactType4] = None,
  RetencPercep: Seq[uy.com.dgi.RetPerc_Resg] = Nil)
      


case class CodItem5(TpoCod: String,
  Cod: String)
      

sealed trait IndFactType5

object IndFactType5 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndFactType5]): IndFactType5 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndFactType5) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndFactType5] = Seq(Number5Value5, Number6Value5, Number7Value5, Number12Value2, Number13Value, Number14Value, Number15Value)
}

case object Number5Value5 extends IndFactType5 { override def toString = "5" }
case object Number6Value5 extends IndFactType5 { override def toString = "6" }
case object Number7Value5 extends IndFactType5 { override def toString = "7" }
case object Number12Value2 extends IndFactType5 { override def toString = "12" }
case object Number13Value extends IndFactType5 { override def toString = "13" }
case object Number14Value extends IndFactType5 { override def toString = "14" }
case object Number15Value extends IndFactType5 { override def toString = "15" }

sealed trait IndAgenteRespType

object IndAgenteRespType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndAgenteRespType]): IndAgenteRespType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndAgenteRespType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndAgenteRespType] = Seq(RValue3, AValue)
}

case object RValue3 extends IndAgenteRespType { override def toString = "R" }
case object AValue extends IndAgenteRespType { override def toString = "A" }

sealed trait DescTipoType2

object DescTipoType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.DescTipoType2]): DescTipoType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DescTipoType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DescTipoType2] = Seq(Number1Value29, Number2Value24)
}

case object Number1Value29 extends DescTipoType2 { override def toString = "1" }
case object Number2Value24 extends DescTipoType2 { override def toString = "2" }


case class SubDescuento3(DescTipo: uy.com.dgi.DescTipoType2,
  DescVal: BigDecimal)
      

sealed trait RecargoTipoType2

object RecargoTipoType2 {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.RecargoTipoType2]): RecargoTipoType2 = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: RecargoTipoType2) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[RecargoTipoType2] = Seq(Number1Value30, Number2Value25)
}

case object Number1Value30 extends RecargoTipoType2 { override def toString = "1" }
case object Number2Value25 extends RecargoTipoType2 { override def toString = "2" }


case class SubRecargo3(RecargoTipo: uy.com.dgi.RecargoTipoType2,
  RecargoVal: BigDecimal)
      


case class Item_Det_Boleta(NroLinDet: BigInt,
  CodItem: Seq[uy.com.dgi.CodItem5] = Nil,
  IndFact: uy.com.dgi.IndFactType5,
  IndAgenteResp: Option[uy.com.dgi.IndAgenteRespType] = None,
  NomItem: String,
  DscItem: Option[String] = None,
  Cantidad: BigDecimal,
  UniMed: String,
  PrecioUnitario: BigDecimal,
  DescuentoPct: Option[BigDecimal] = None,
  DescuentoMonto: Option[BigDecimal] = None,
  SubDescuento: Seq[uy.com.dgi.SubDescuento3] = Nil,
  RecargoPct: Option[BigDecimal] = None,
  RecargoMnt: Option[BigDecimal] = None,
  SubRecargo: Seq[uy.com.dgi.SubRecargo3] = Nil,
  RetencPercep: Seq[uy.com.dgi.RetPerc] = Nil,
  MontoItem: BigDecimal)
      


case class MedioPago(NroLinMP: BigInt,
  CodMP: Option[BigInt] = None,
  GlosaMP: String,
  OrdenMP: Option[BigInt] = None,
  ValorPago: BigDecimal)
      


case class MediosPago(MedioPago: Seq[uy.com.dgi.MedioPago] = Nil)
      


case class Receptor_Fact(TipoDocRecep: uy.com.dgi.DocType,
  CodPaisRecep: uy.com.dgi.CodPaisType,
  DocRecep: String,
  RznSocRecep: String,
  DirRecep: String,
  CiudadRecep: String,
  DeptoRecep: Option[String] = None,
  PaisRecep: Option[String] = None,
  CP: Option[BigInt] = None,
  InfoAdicional: Option[String] = None,
  LugarDestEnt: Option[String] = None,
  CompraID: Option[String] = None)
      


case class Receptor_Fact_Exp(TipoDocRecep: Option[uy.com.dgi.DocType] = None,
  CodPaisRecep: Option[uy.com.dgi.CodPaisType] = None,
  receptor_fact_expoption: Option[scalaxb.DataRecord[Any]] = None,
  RznSocRecep: String,
  DirRecep: String,
  CiudadRecep: String,
  DeptoRecep: String,
  PaisRecep: String,
  CP: Option[BigInt] = None,
  InfoAdicional: Option[String] = None,
  LugarDestEnt: Option[String] = None,
  CompraID: Option[String] = None)
      

trait Receptor_Fact_ExpOption

case class Receptor_Rem(TipoDocRecep: Option[uy.com.dgi.DocType] = None,
  CodPaisRecep: Option[uy.com.dgi.CodPaisType] = None,
  receptor_remoption: Option[scalaxb.DataRecord[Any]] = None,
  RznSocRecep: String,
  DirRecep: String,
  CiudadRecep: String,
  DeptoRecep: Option[String] = None,
  PaisRecep: Option[String] = None,
  CP: Option[BigInt] = None,
  InfoAdicional: Option[String] = None,
  LugarDestEnt: Option[String] = None,
  CompraID: Option[String] = None)
      

trait Receptor_RemOption

case class Receptor_Rem_Exp(TipoDocRecep: Option[uy.com.dgi.DocType] = None,
  CodPaisRecep: Option[uy.com.dgi.CodPaisType] = None,
  receptor_rem_expoption: Option[scalaxb.DataRecord[Any]] = None,
  RznSocRecep: String,
  DirRecep: String,
  CiudadRecep: String,
  DeptoRecep: String,
  PaisRecep: String,
  CP: Option[BigInt] = None,
  InfoAdicional: Option[String] = None,
  LugarDestEnt: Option[String] = None,
  CompraID: Option[String] = None)
      

trait Receptor_Rem_ExpOption

case class Receptor_Resg(TipoDocRecep: Option[uy.com.dgi.DocType] = None,
  CodPaisRecep: Option[uy.com.dgi.CodPaisType] = None,
  receptor_resgoption: Option[scalaxb.DataRecord[Any]] = None,
  RznSocRecep: Option[String] = None,
  DirRecep: Option[String] = None,
  CiudadRecep: Option[String] = None,
  DeptoRecep: Option[String] = None,
  PaisRecep: Option[String] = None,
  CP: Option[BigInt] = None,
  InfoAdicional: Option[String] = None)
      

trait Receptor_ResgOption

case class Receptor_Tck(TipoDocRecep: Option[uy.com.dgi.DocType] = None,
  CodPaisRecep: Option[uy.com.dgi.CodPaisType] = None,
  receptor_tckoption: Option[scalaxb.DataRecord[Any]] = None,
  RznSocRecep: Option[String] = None,
  DirRecep: Option[String] = None,
  CiudadRecep: Option[String] = None,
  DeptoRecep: Option[String] = None,
  PaisRecep: Option[String] = None,
  CP: Option[BigInt] = None,
  InfoAdicional: Option[String] = None,
  LugarDestEnt: Option[String] = None,
  CompraID: Option[String] = None)
      

trait Receptor_TckOption

case class Receptor_Boleta(TipoDocRecep: uy.com.dgi.DocType,
  CodPaisRecep: uy.com.dgi.CodPaisType,
  receptor_boletaoption: Option[scalaxb.DataRecord[Any]] = None,
  RznSocRecep: String,
  DirRecep: String,
  CiudadRecep: String,
  DeptoRecep: Option[String] = None,
  PaisRecep: Option[String] = None,
  CP: Option[BigInt] = None,
  InfoAdicional: Option[String] = None,
  LugarDestEnt: Option[String] = None,
  CompraID: Option[String] = None)
      

trait Receptor_BoletaOption
sealed trait IndGlobal

object IndGlobal {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[uy.com.dgi.IndGlobal]): IndGlobal = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: IndGlobal) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[IndGlobal] = Seq(Number1Value31)
}

case object Number1Value31 extends IndGlobal { override def toString = "1" }


case class Referencia(NroLinRef: BigInt,
  IndGlobal: Option[uy.com.dgi.IndGlobal] = None,
  TpoDocRef: Option[uy.com.dgi.CFEType] = None,
  Serie: Option[String] = None,
  NroCFERef: Option[BigInt] = None,
  RazonRef: Option[String] = None,
  FechaCFEref: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      


case class ReferenciaType(Referencia: Seq[uy.com.dgi.Referencia] = Nil)
      


case class RetPerc(CodRet: String,
  Tasa: Option[BigDecimal] = None,
  MntSujetoaRet: Option[BigDecimal] = None,
  InfoAdicionalRet: Option[String] = None,
  ValRetPerc: BigDecimal)
      


case class RetPerc_Resg(CodRet: String,
  Tasa: Option[BigDecimal] = None,
  MntSujetoaRet: BigDecimal,
  InfoAdicionalRet: Option[String] = None,
  ValRetPerc: BigDecimal)
      


case class STI_Item(NroSTI: BigInt,
  GlosaSTI: String,
  OrdenSTI: Option[BigInt] = None,
  ValSubtotSTI: BigDecimal)
      


case class SubTotInfo(STI_Item: Seq[uy.com.dgi.STI_Item] = Nil)
      


case class RetencPercep(CodRet: String,
  ValRetPerc: BigDecimal)
      


case class TotalesType(TpoMoneda: uy.com.dgi.TipMonType,
  TpoCambio: Option[BigDecimal] = None,
  MntNoGrv: Option[BigDecimal] = None,
  MntExpoyAsim: Option[BigDecimal] = None,
  MntImpuestoPerc: Option[BigDecimal] = None,
  MntIVaenSusp: Option[BigDecimal] = None,
  MntNetoIvaTasaMin: Option[BigDecimal] = None,
  MntNetoIVATasaBasica: Option[BigDecimal] = None,
  MntNetoIVAOtra: Option[BigDecimal] = None,
  IVATasaMin: Option[uy.com.dgi.TasaIVAType] = None,
  IVATasaBasica: Option[uy.com.dgi.TasaIVAType] = None,
  MntIVATasaMin: Option[BigDecimal] = None,
  MntIVATasaBasica: Option[BigDecimal] = None,
  MntIVAOtra: Option[BigDecimal] = None,
  MntTotal: BigDecimal,
  MntTotRetenido: Option[BigDecimal] = None,
  MntTotCredFisc: Option[BigDecimal] = None,
  CantLinDet: BigInt,
  RetencPercep: Seq[uy.com.dgi.RetencPercep] = Nil,
  MontoNF: Option[BigDecimal] = None,
  MntPagar: BigDecimal)
      


case class Totales_Fact_Exp(TpoMoneda: uy.com.dgi.TipMonType,
  TpoCambio: Option[BigDecimal] = None,
  MntExpoyAsim: BigDecimal,
  MntTotal: BigDecimal,
  CantLinDet: BigInt,
  MontoNF: Option[BigDecimal] = None,
  MntPagar: BigDecimal)
      


case class Totales_Rem_Exp(TpoMoneda: uy.com.dgi.TipMonType,
  TpoCambio: Option[BigDecimal] = None,
  MntExpoyAsim: BigDecimal,
  MntTotal: BigDecimal,
  CantLinDet: BigInt,
  MntPagar: Option[BigDecimal] = None)
      


case class RetencPercep2(CodRet: String,
  ValRetPerc: BigDecimal)
      


case class Totales_Resg(TpoMoneda: uy.com.dgi.TipMonType,
  TpoCambio: Option[BigDecimal] = None,
  MntTotRetenido: BigDecimal,
  MntTotCredFisc: Option[BigDecimal] = None,
  CantLinDet: BigInt,
  RetencPercep: Seq[uy.com.dgi.RetencPercep2] = Nil)
      


case class RetencPercep3(CodRet: String,
  ValRetPerc: BigDecimal)
      


case class Totales_Boleta(TpoMoneda: uy.com.dgi.TipMonType,
  TpoCambio: Option[BigDecimal] = None,
  MntNoGrv: Option[BigDecimal] = None,
  MntIVaenSusp: Option[BigDecimal] = None,
  MntTotal: BigDecimal,
  MntTotRetenido: Option[BigDecimal] = None,
  CantLinDet: BigInt,
  RetencPercep: Seq[uy.com.dgi.RetencPercep3] = Nil,
  MontoNF: Option[BigDecimal] = None,
  MntPagar: BigDecimal)
      


case class DatosComplFiscType()
      


case class Compl_Fiscal_DataType(RUCEmisor: String,
  TipoDocMdte: uy.com.dgi.DocTypemasNIE,
  Pais: uy.com.dgi.CodPaisType,
  DocMdte: String,
  NombreMdte: String) extends Compl_FiscalTypeOption
      


case class Compl_FiscalType(compl_fiscaltypeoption: scalaxb.DataRecord[uy.com.dgi.Compl_FiscalTypeOption])
      

trait Compl_FiscalTypeOption
