// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package uy.com.dgi

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[uy.com.dgi.Foo](node)
val document = scalaxb.toXML[uy.com.dgi.Foo](obj, "foo", uy.com.dgi.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://cfe.dgi.gub.uy",
    Some("ds") -> "http://www.w3.org/2000/09/xmldsig#",
    Some("ns0") -> "http://cfe.dgi.gub.uy",
    Some("xenc") -> "http://www.w3.org/2001/04/xmlenc#",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Uycomdgi_CAEEspecialFormat: scalaxb.XMLFormat[uy.com.dgi.CAEEspecial] = new DefaultUycomdgi_CAEEspecialFormat {}
  implicit lazy val Uycomdgi_CAEDataTypeFormat: scalaxb.XMLFormat[uy.com.dgi.CAEDataType] = new DefaultUycomdgi_CAEDataTypeFormat {}
  implicit lazy val Uycomdgi_EncabezadoFormat: scalaxb.XMLFormat[uy.com.dgi.Encabezado] = new DefaultUycomdgi_EncabezadoFormat {}
  implicit lazy val Uycomdgi_DetalleFormat: scalaxb.XMLFormat[uy.com.dgi.Detalle] = new DefaultUycomdgi_DetalleFormat {}
  implicit lazy val Uycomdgi_ETckFormat: scalaxb.XMLFormat[uy.com.dgi.ETck] = new DefaultUycomdgi_ETckFormat {}
  implicit lazy val Uycomdgi_Encabezado2Format: scalaxb.XMLFormat[uy.com.dgi.Encabezado2] = new DefaultUycomdgi_Encabezado2Format {}
  implicit lazy val Uycomdgi_Detalle2Format: scalaxb.XMLFormat[uy.com.dgi.Detalle2] = new DefaultUycomdgi_Detalle2Format {}
  implicit lazy val Uycomdgi_EFactFormat: scalaxb.XMLFormat[uy.com.dgi.EFact] = new DefaultUycomdgi_EFactFormat {}
  implicit lazy val Uycomdgi_Encabezado3Format: scalaxb.XMLFormat[uy.com.dgi.Encabezado3] = new DefaultUycomdgi_Encabezado3Format {}
  implicit lazy val Uycomdgi_Detalle3Format: scalaxb.XMLFormat[uy.com.dgi.Detalle3] = new DefaultUycomdgi_Detalle3Format {}
  implicit lazy val Uycomdgi_EFact_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.EFact_Exp] = new DefaultUycomdgi_EFact_ExpFormat {}
  implicit lazy val Uycomdgi_TotalesFormat: scalaxb.XMLFormat[uy.com.dgi.Totales] = new DefaultUycomdgi_TotalesFormat {}
  implicit lazy val Uycomdgi_Encabezado4Format: scalaxb.XMLFormat[uy.com.dgi.Encabezado4] = new DefaultUycomdgi_Encabezado4Format {}
  implicit lazy val Uycomdgi_Detalle4Format: scalaxb.XMLFormat[uy.com.dgi.Detalle4] = new DefaultUycomdgi_Detalle4Format {}
  implicit lazy val Uycomdgi_ERemFormat: scalaxb.XMLFormat[uy.com.dgi.ERem] = new DefaultUycomdgi_ERemFormat {}
  implicit lazy val Uycomdgi_Encabezado5Format: scalaxb.XMLFormat[uy.com.dgi.Encabezado5] = new DefaultUycomdgi_Encabezado5Format {}
  implicit lazy val Uycomdgi_Detalle5Format: scalaxb.XMLFormat[uy.com.dgi.Detalle5] = new DefaultUycomdgi_Detalle5Format {}
  implicit lazy val Uycomdgi_ERem_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.ERem_Exp] = new DefaultUycomdgi_ERem_ExpFormat {}
  implicit lazy val Uycomdgi_Encabezado6Format: scalaxb.XMLFormat[uy.com.dgi.Encabezado6] = new DefaultUycomdgi_Encabezado6Format {}
  implicit lazy val Uycomdgi_Detalle6Format: scalaxb.XMLFormat[uy.com.dgi.Detalle6] = new DefaultUycomdgi_Detalle6Format {}
  implicit lazy val Uycomdgi_EResgFormat: scalaxb.XMLFormat[uy.com.dgi.EResg] = new DefaultUycomdgi_EResgFormat {}
  implicit lazy val Uycomdgi_Encabezado7Format: scalaxb.XMLFormat[uy.com.dgi.Encabezado7] = new DefaultUycomdgi_Encabezado7Format {}
  implicit lazy val Uycomdgi_Detalle7Format: scalaxb.XMLFormat[uy.com.dgi.Detalle7] = new DefaultUycomdgi_Detalle7Format {}
  implicit lazy val Uycomdgi_EBoletaFormat: scalaxb.XMLFormat[uy.com.dgi.EBoleta] = new DefaultUycomdgi_EBoletaFormat {}
  implicit lazy val Uycomdgi_CFEDefTypeFormat: scalaxb.XMLFormat[uy.com.dgi.CFEDefType] = new DefaultUycomdgi_CFEDefTypeFormat {}
  implicit lazy val Uycomdgi_TpoMovDRFormat: scalaxb.XMLFormat[uy.com.dgi.TpoMovDR] = new DefaultUycomdgi_TpoMovDRFormat {}
  implicit lazy val Uycomdgi_IndFactDRFormat: scalaxb.XMLFormat[uy.com.dgi.IndFactDR] = new DefaultUycomdgi_IndFactDRFormat {}
  implicit lazy val Uycomdgi_DRG_ItemFormat: scalaxb.XMLFormat[uy.com.dgi.DRG_Item] = new DefaultUycomdgi_DRG_ItemFormat {}
  implicit lazy val Uycomdgi_DscRcgGlobalFormat: scalaxb.XMLFormat[uy.com.dgi.DscRcgGlobal] = new DefaultUycomdgi_DscRcgGlobalFormat {}
  implicit lazy val Uycomdgi_EmisorFormat: scalaxb.XMLFormat[uy.com.dgi.Emisor] = new DefaultUycomdgi_EmisorFormat {}
  implicit lazy val Uycomdgi_TipoCFEFormat: scalaxb.XMLFormat[uy.com.dgi.TipoCFE] = new DefaultUycomdgi_TipoCFEFormat {}
  implicit lazy val Uycomdgi_MntBrutoFormat: scalaxb.XMLFormat[uy.com.dgi.MntBruto] = new DefaultUycomdgi_MntBrutoFormat {}
  implicit lazy val Uycomdgi_FmaPagoFormat: scalaxb.XMLFormat[uy.com.dgi.FmaPago] = new DefaultUycomdgi_FmaPagoFormat {}
  implicit lazy val Uycomdgi_IdDoc_FactFormat: scalaxb.XMLFormat[uy.com.dgi.IdDoc_Fact] = new DefaultUycomdgi_IdDoc_FactFormat {}
  implicit lazy val Uycomdgi_TipoCFETypeFormat: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType] = new DefaultUycomdgi_TipoCFETypeFormat {}
  implicit lazy val Uycomdgi_MntBrutoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.MntBrutoType] = new DefaultUycomdgi_MntBrutoTypeFormat {}
  implicit lazy val Uycomdgi_FmaPagoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.FmaPagoType] = new DefaultUycomdgi_FmaPagoTypeFormat {}
  implicit lazy val Uycomdgi_IdDoc_Fact_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.IdDoc_Fact_Exp] = new DefaultUycomdgi_IdDoc_Fact_ExpFormat {}
  implicit lazy val Uycomdgi_TipoCFEType2Format: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType2] = new DefaultUycomdgi_TipoCFEType2Format {}
  implicit lazy val Uycomdgi_IdDoc_RemFormat: scalaxb.XMLFormat[uy.com.dgi.IdDoc_Rem] = new DefaultUycomdgi_IdDoc_RemFormat {}
  implicit lazy val Uycomdgi_TipoCFEType3Format: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType3] = new DefaultUycomdgi_TipoCFEType3Format {}
  implicit lazy val Uycomdgi_IdDoc_Rem_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.IdDoc_Rem_Exp] = new DefaultUycomdgi_IdDoc_Rem_ExpFormat {}
  implicit lazy val Uycomdgi_TipoCFEType4Format: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType4] = new DefaultUycomdgi_TipoCFEType4Format {}
  implicit lazy val Uycomdgi_IdDoc_ResgFormat: scalaxb.XMLFormat[uy.com.dgi.IdDoc_Resg] = new DefaultUycomdgi_IdDoc_ResgFormat {}
  implicit lazy val Uycomdgi_TipoCFEType5Format: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType5] = new DefaultUycomdgi_TipoCFEType5Format {}
  implicit lazy val Uycomdgi_MntBrutoType2Format: scalaxb.XMLFormat[uy.com.dgi.MntBrutoType2] = new DefaultUycomdgi_MntBrutoType2Format {}
  implicit lazy val Uycomdgi_FmaPagoType2Format: scalaxb.XMLFormat[uy.com.dgi.FmaPagoType2] = new DefaultUycomdgi_FmaPagoType2Format {}
  implicit lazy val Uycomdgi_IdDoc_TckFormat: scalaxb.XMLFormat[uy.com.dgi.IdDoc_Tck] = new DefaultUycomdgi_IdDoc_TckFormat {}
  implicit lazy val Uycomdgi_TipoCFEType6Format: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType6] = new DefaultUycomdgi_TipoCFEType6Format {}
  implicit lazy val Uycomdgi_IdDoc_CompFiscFormat: scalaxb.XMLFormat[uy.com.dgi.IdDoc_CompFisc] = new DefaultUycomdgi_IdDoc_CompFiscFormat {}
  implicit lazy val Uycomdgi_TipoCFEType7Format: scalaxb.XMLFormat[uy.com.dgi.TipoCFEType7] = new DefaultUycomdgi_TipoCFEType7Format {}
  implicit lazy val Uycomdgi_MntBrutoType3Format: scalaxb.XMLFormat[uy.com.dgi.MntBrutoType3] = new DefaultUycomdgi_MntBrutoType3Format {}
  implicit lazy val Uycomdgi_FmaPagoType3Format: scalaxb.XMLFormat[uy.com.dgi.FmaPagoType3] = new DefaultUycomdgi_FmaPagoType3Format {}
  implicit lazy val Uycomdgi_IdDoc_BoletaFormat: scalaxb.XMLFormat[uy.com.dgi.IdDoc_Boleta] = new DefaultUycomdgi_IdDoc_BoletaFormat {}
  implicit lazy val Uycomdgi_CodItemFormat: scalaxb.XMLFormat[uy.com.dgi.CodItem] = new DefaultUycomdgi_CodItemFormat {}
  implicit lazy val Uycomdgi_IndFactFormat: scalaxb.XMLFormat[uy.com.dgi.IndFact] = new DefaultUycomdgi_IndFactFormat {}
  implicit lazy val Uycomdgi_DescTipoFormat: scalaxb.XMLFormat[uy.com.dgi.DescTipo] = new DefaultUycomdgi_DescTipoFormat {}
  implicit lazy val Uycomdgi_SubDescuentoFormat: scalaxb.XMLFormat[uy.com.dgi.SubDescuento] = new DefaultUycomdgi_SubDescuentoFormat {}
  implicit lazy val Uycomdgi_RecargoTipoFormat: scalaxb.XMLFormat[uy.com.dgi.RecargoTipo] = new DefaultUycomdgi_RecargoTipoFormat {}
  implicit lazy val Uycomdgi_SubRecargoFormat: scalaxb.XMLFormat[uy.com.dgi.SubRecargo] = new DefaultUycomdgi_SubRecargoFormat {}
  implicit lazy val Uycomdgi_Item_Det_Fact_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.Item_Det_Fact_Exp] = new DefaultUycomdgi_Item_Det_Fact_ExpFormat {}
  implicit lazy val Uycomdgi_CodItem2Format: scalaxb.XMLFormat[uy.com.dgi.CodItem2] = new DefaultUycomdgi_CodItem2Format {}
  implicit lazy val Uycomdgi_IndFactTypeFormat: scalaxb.XMLFormat[uy.com.dgi.IndFactType] = new DefaultUycomdgi_IndFactTypeFormat {}
  implicit lazy val Uycomdgi_IndAgenteRespFormat: scalaxb.XMLFormat[uy.com.dgi.IndAgenteResp] = new DefaultUycomdgi_IndAgenteRespFormat {}
  implicit lazy val Uycomdgi_DescTipoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.DescTipoType] = new DefaultUycomdgi_DescTipoTypeFormat {}
  implicit lazy val Uycomdgi_SubDescuento2Format: scalaxb.XMLFormat[uy.com.dgi.SubDescuento2] = new DefaultUycomdgi_SubDescuento2Format {}
  implicit lazy val Uycomdgi_RecargoTipoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.RecargoTipoType] = new DefaultUycomdgi_RecargoTipoTypeFormat {}
  implicit lazy val Uycomdgi_SubRecargo2Format: scalaxb.XMLFormat[uy.com.dgi.SubRecargo2] = new DefaultUycomdgi_SubRecargo2Format {}
  implicit lazy val Uycomdgi_Item_Det_FactFormat: scalaxb.XMLFormat[uy.com.dgi.Item_Det_Fact] = new DefaultUycomdgi_Item_Det_FactFormat {}
  implicit lazy val Uycomdgi_CodItem3Format: scalaxb.XMLFormat[uy.com.dgi.CodItem3] = new DefaultUycomdgi_CodItem3Format {}
  implicit lazy val Uycomdgi_IndFactType2Format: scalaxb.XMLFormat[uy.com.dgi.IndFactType2] = new DefaultUycomdgi_IndFactType2Format {}
  implicit lazy val Uycomdgi_Item_Rem_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.Item_Rem_Exp] = new DefaultUycomdgi_Item_Rem_ExpFormat {}
  implicit lazy val Uycomdgi_CodItem4Format: scalaxb.XMLFormat[uy.com.dgi.CodItem4] = new DefaultUycomdgi_CodItem4Format {}
  implicit lazy val Uycomdgi_IndFactType3Format: scalaxb.XMLFormat[uy.com.dgi.IndFactType3] = new DefaultUycomdgi_IndFactType3Format {}
  implicit lazy val Uycomdgi_Item_RemFormat: scalaxb.XMLFormat[uy.com.dgi.Item_Rem] = new DefaultUycomdgi_Item_RemFormat {}
  implicit lazy val Uycomdgi_IndFactType4Format: scalaxb.XMLFormat[uy.com.dgi.IndFactType4] = new DefaultUycomdgi_IndFactType4Format {}
  implicit lazy val Uycomdgi_Item_ResgFormat: scalaxb.XMLFormat[uy.com.dgi.Item_Resg] = new DefaultUycomdgi_Item_ResgFormat {}
  implicit lazy val Uycomdgi_CodItem5Format: scalaxb.XMLFormat[uy.com.dgi.CodItem5] = new DefaultUycomdgi_CodItem5Format {}
  implicit lazy val Uycomdgi_IndFactType5Format: scalaxb.XMLFormat[uy.com.dgi.IndFactType5] = new DefaultUycomdgi_IndFactType5Format {}
  implicit lazy val Uycomdgi_IndAgenteRespTypeFormat: scalaxb.XMLFormat[uy.com.dgi.IndAgenteRespType] = new DefaultUycomdgi_IndAgenteRespTypeFormat {}
  implicit lazy val Uycomdgi_DescTipoType2Format: scalaxb.XMLFormat[uy.com.dgi.DescTipoType2] = new DefaultUycomdgi_DescTipoType2Format {}
  implicit lazy val Uycomdgi_SubDescuento3Format: scalaxb.XMLFormat[uy.com.dgi.SubDescuento3] = new DefaultUycomdgi_SubDescuento3Format {}
  implicit lazy val Uycomdgi_RecargoTipoType2Format: scalaxb.XMLFormat[uy.com.dgi.RecargoTipoType2] = new DefaultUycomdgi_RecargoTipoType2Format {}
  implicit lazy val Uycomdgi_SubRecargo3Format: scalaxb.XMLFormat[uy.com.dgi.SubRecargo3] = new DefaultUycomdgi_SubRecargo3Format {}
  implicit lazy val Uycomdgi_Item_Det_BoletaFormat: scalaxb.XMLFormat[uy.com.dgi.Item_Det_Boleta] = new DefaultUycomdgi_Item_Det_BoletaFormat {}
  implicit lazy val Uycomdgi_MedioPagoFormat: scalaxb.XMLFormat[uy.com.dgi.MedioPago] = new DefaultUycomdgi_MedioPagoFormat {}
  implicit lazy val Uycomdgi_MediosPagoFormat: scalaxb.XMLFormat[uy.com.dgi.MediosPago] = new DefaultUycomdgi_MediosPagoFormat {}
  implicit lazy val Uycomdgi_Receptor_FactFormat: scalaxb.XMLFormat[uy.com.dgi.Receptor_Fact] = new DefaultUycomdgi_Receptor_FactFormat {}
  implicit lazy val Uycomdgi_Receptor_Fact_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.Receptor_Fact_Exp] = new DefaultUycomdgi_Receptor_Fact_ExpFormat {}
  implicit lazy val Uycomdgi_Receptor_RemFormat: scalaxb.XMLFormat[uy.com.dgi.Receptor_Rem] = new DefaultUycomdgi_Receptor_RemFormat {}
  implicit lazy val Uycomdgi_Receptor_Rem_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.Receptor_Rem_Exp] = new DefaultUycomdgi_Receptor_Rem_ExpFormat {}
  implicit lazy val Uycomdgi_Receptor_ResgFormat: scalaxb.XMLFormat[uy.com.dgi.Receptor_Resg] = new DefaultUycomdgi_Receptor_ResgFormat {}
  implicit lazy val Uycomdgi_Receptor_TckFormat: scalaxb.XMLFormat[uy.com.dgi.Receptor_Tck] = new DefaultUycomdgi_Receptor_TckFormat {}
  implicit lazy val Uycomdgi_Receptor_BoletaFormat: scalaxb.XMLFormat[uy.com.dgi.Receptor_Boleta] = new DefaultUycomdgi_Receptor_BoletaFormat {}
  implicit lazy val Uycomdgi_IndGlobalFormat: scalaxb.XMLFormat[uy.com.dgi.IndGlobal] = new DefaultUycomdgi_IndGlobalFormat {}
  implicit lazy val Uycomdgi_ReferenciaFormat: scalaxb.XMLFormat[uy.com.dgi.Referencia] = new DefaultUycomdgi_ReferenciaFormat {}
  implicit lazy val Uycomdgi_ReferenciaTypeFormat: scalaxb.XMLFormat[uy.com.dgi.ReferenciaType] = new DefaultUycomdgi_ReferenciaTypeFormat {}
  implicit lazy val Uycomdgi_RetPercFormat: scalaxb.XMLFormat[uy.com.dgi.RetPerc] = new DefaultUycomdgi_RetPercFormat {}
  implicit lazy val Uycomdgi_RetPerc_ResgFormat: scalaxb.XMLFormat[uy.com.dgi.RetPerc_Resg] = new DefaultUycomdgi_RetPerc_ResgFormat {}
  implicit lazy val Uycomdgi_STI_ItemFormat: scalaxb.XMLFormat[uy.com.dgi.STI_Item] = new DefaultUycomdgi_STI_ItemFormat {}
  implicit lazy val Uycomdgi_SubTotInfoFormat: scalaxb.XMLFormat[uy.com.dgi.SubTotInfo] = new DefaultUycomdgi_SubTotInfoFormat {}
  implicit lazy val Uycomdgi_RetencPercepFormat: scalaxb.XMLFormat[uy.com.dgi.RetencPercep] = new DefaultUycomdgi_RetencPercepFormat {}
  implicit lazy val Uycomdgi_TotalesTypeFormat: scalaxb.XMLFormat[uy.com.dgi.TotalesType] = new DefaultUycomdgi_TotalesTypeFormat {}
  implicit lazy val Uycomdgi_Totales_Fact_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.Totales_Fact_Exp] = new DefaultUycomdgi_Totales_Fact_ExpFormat {}
  implicit lazy val Uycomdgi_Totales_Rem_ExpFormat: scalaxb.XMLFormat[uy.com.dgi.Totales_Rem_Exp] = new DefaultUycomdgi_Totales_Rem_ExpFormat {}
  implicit lazy val Uycomdgi_RetencPercep2Format: scalaxb.XMLFormat[uy.com.dgi.RetencPercep2] = new DefaultUycomdgi_RetencPercep2Format {}
  implicit lazy val Uycomdgi_Totales_ResgFormat: scalaxb.XMLFormat[uy.com.dgi.Totales_Resg] = new DefaultUycomdgi_Totales_ResgFormat {}
  implicit lazy val Uycomdgi_RetencPercep3Format: scalaxb.XMLFormat[uy.com.dgi.RetencPercep3] = new DefaultUycomdgi_RetencPercep3Format {}
  implicit lazy val Uycomdgi_Totales_BoletaFormat: scalaxb.XMLFormat[uy.com.dgi.Totales_Boleta] = new DefaultUycomdgi_Totales_BoletaFormat {}
  implicit lazy val Uycomdgi_DatosComplFiscTypeFormat: scalaxb.XMLFormat[uy.com.dgi.DatosComplFiscType] = new DefaultUycomdgi_DatosComplFiscTypeFormat {}
  implicit lazy val Uycomdgi_Compl_Fiscal_DataTypeFormat: scalaxb.XMLFormat[uy.com.dgi.Compl_Fiscal_DataType] = new DefaultUycomdgi_Compl_Fiscal_DataTypeFormat {}
  implicit lazy val Uycomdgi_Compl_FiscalTypeFormat: scalaxb.XMLFormat[uy.com.dgi.Compl_FiscalType] = new DefaultUycomdgi_Compl_FiscalTypeFormat {}
  implicit lazy val Uycomdgi_CFETypeFormat: scalaxb.XMLFormat[uy.com.dgi.CFEType] = new DefaultUycomdgi_CFETypeFormat {}
  implicit lazy val Uycomdgi_TipoTrasladoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.TipoTrasladoType] = new DefaultUycomdgi_TipoTrasladoTypeFormat {}
  implicit lazy val Uycomdgi_IndMontoBrutoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.IndMontoBrutoType] = new DefaultUycomdgi_IndMontoBrutoTypeFormat {}
  implicit lazy val Uycomdgi_FormaDePagoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.FormaDePagoType] = new DefaultUycomdgi_FormaDePagoTypeFormat {}
  implicit lazy val Uycomdgi_IndicadorAgRespFormat: scalaxb.XMLFormat[uy.com.dgi.IndicadorAgResp] = new DefaultUycomdgi_IndicadorAgRespFormat {}
  implicit lazy val Uycomdgi_SubDescRecTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SubDescRecType] = new DefaultUycomdgi_SubDescRecTypeFormat {}
  implicit lazy val Uycomdgi_DocTypeFormat: scalaxb.XMLFormat[uy.com.dgi.DocType] = new DefaultUycomdgi_DocTypeFormat {}
  implicit lazy val Uycomdgi_TipMonTypeFormat: scalaxb.XMLFormat[uy.com.dgi.TipMonType] = new DefaultUycomdgi_TipMonTypeFormat {}
  implicit lazy val Uycomdgi_TasaIVATypeFormat: scalaxb.XMLFormat[uy.com.dgi.TasaIVAType] = new DefaultUycomdgi_TasaIVATypeFormat {}
  implicit lazy val Uycomdgi_CodPaisTypeFormat: scalaxb.XMLFormat[uy.com.dgi.CodPaisType] = new DefaultUycomdgi_CodPaisTypeFormat {}
  implicit lazy val Uycomdgi_TipoDRTypeFormat: scalaxb.XMLFormat[uy.com.dgi.TipoDRType] = new DefaultUycomdgi_TipoDRTypeFormat {}
  implicit lazy val Uycomdgi_EstadoACKRepTypeFormat: scalaxb.XMLFormat[uy.com.dgi.EstadoACKRepType] = new DefaultUycomdgi_EstadoACKRepTypeFormat {}
  implicit lazy val Uycomdgi_EstadoACKSobreTypeFormat: scalaxb.XMLFormat[uy.com.dgi.EstadoACKSobreType] = new DefaultUycomdgi_EstadoACKSobreTypeFormat {}
  implicit lazy val Uycomdgi_EstadoACKCFETypeFormat: scalaxb.XMLFormat[uy.com.dgi.EstadoACKCFEType] = new DefaultUycomdgi_EstadoACKCFETypeFormat {}
  implicit lazy val Uycomdgi_MotivoFormat: scalaxb.XMLFormat[uy.com.dgi.Motivo] = new DefaultUycomdgi_MotivoFormat {}
  implicit lazy val Uycomdgi_GlosaFormat: scalaxb.XMLFormat[uy.com.dgi.Glosa] = new DefaultUycomdgi_GlosaFormat {}
  implicit lazy val Uycomdgi_RechazoRepTypeFormat: scalaxb.XMLFormat[uy.com.dgi.RechazoRepType] = new DefaultUycomdgi_RechazoRepTypeFormat {}
  implicit lazy val Uycomdgi_MotivoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.MotivoType] = new DefaultUycomdgi_MotivoTypeFormat {}
  implicit lazy val Uycomdgi_GlosaTypeFormat: scalaxb.XMLFormat[uy.com.dgi.GlosaType] = new DefaultUycomdgi_GlosaTypeFormat {}
  implicit lazy val Uycomdgi_RechazoSobreTypeFormat: scalaxb.XMLFormat[uy.com.dgi.RechazoSobreType] = new DefaultUycomdgi_RechazoSobreTypeFormat {}
  implicit lazy val Uycomdgi_MotivoType2Format: scalaxb.XMLFormat[uy.com.dgi.MotivoType2] = new DefaultUycomdgi_MotivoType2Format {}
  implicit lazy val Uycomdgi_GlosaType2Format: scalaxb.XMLFormat[uy.com.dgi.GlosaType2] = new DefaultUycomdgi_GlosaType2Format {}
  implicit lazy val Uycomdgi_RechazoCFE_DGITypeFormat: scalaxb.XMLFormat[uy.com.dgi.RechazoCFE_DGIType] = new DefaultUycomdgi_RechazoCFE_DGITypeFormat {}
  implicit lazy val Uycomdgi_MotivoType3Format: scalaxb.XMLFormat[uy.com.dgi.MotivoType3] = new DefaultUycomdgi_MotivoType3Format {}
  implicit lazy val Uycomdgi_GlosaType3Format: scalaxb.XMLFormat[uy.com.dgi.GlosaType3] = new DefaultUycomdgi_GlosaType3Format {}
  implicit lazy val Uycomdgi_ObsCFCTypeFormat: scalaxb.XMLFormat[uy.com.dgi.ObsCFCType] = new DefaultUycomdgi_ObsCFCTypeFormat {}
  implicit lazy val Uycomdgi_MotivoType4Format: scalaxb.XMLFormat[uy.com.dgi.MotivoType4] = new DefaultUycomdgi_MotivoType4Format {}
  implicit lazy val Uycomdgi_RechazoCFE_PartesTypeFormat: scalaxb.XMLFormat[uy.com.dgi.RechazoCFE_PartesType] = new DefaultUycomdgi_RechazoCFE_PartesTypeFormat {}
  implicit lazy val Uycomdgi_InfoRespOriTypeFormat: scalaxb.XMLFormat[uy.com.dgi.InfoRespOriType] = new DefaultUycomdgi_InfoRespOriTypeFormat {}
  implicit lazy val Uycomdgi_ModVentaTypeFormat: scalaxb.XMLFormat[uy.com.dgi.ModVentaType] = new DefaultUycomdgi_ModVentaTypeFormat {}
  implicit lazy val Uycomdgi_ViaTranspTypeFormat: scalaxb.XMLFormat[uy.com.dgi.ViaTranspType] = new DefaultUycomdgi_ViaTranspTypeFormat {}
  implicit lazy val Uycomdgi_DocTypemasNIEFormat: scalaxb.XMLFormat[uy.com.dgi.DocTypemasNIE] = new DefaultUycomdgi_DocTypemasNIEFormat {}
  implicit lazy val Uycomdgi_IndPropiedadTypeFormat: scalaxb.XMLFormat[uy.com.dgi.IndPropiedadType] = new DefaultUycomdgi_IndPropiedadTypeFormat {}
  implicit lazy val Uycomdgi_IndIVAalDiaTypeFormat: scalaxb.XMLFormat[uy.com.dgi.IndIVAalDiaType] = new DefaultUycomdgi_IndIVAalDiaTypeFormat {}
  implicit lazy val Uycomdgi_SecProfTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SecProfType] = new DefaultUycomdgi_SecProfTypeFormat {}
  implicit lazy val Uycomdgi_IndPagCta3rosTypeFormat: scalaxb.XMLFormat[uy.com.dgi.IndPagCta3rosType] = new DefaultUycomdgi_IndPagCta3rosTypeFormat {}
  implicit lazy val Uycomdgi_IndCobPropiaTypeFormat: scalaxb.XMLFormat[uy.com.dgi.IndCobPropiaType] = new DefaultUycomdgi_IndCobPropiaTypeFormat {}
  implicit lazy val Uycomdgi_EncryptedTypeFormat: scalaxb.XMLFormat[uy.com.dgi.EncryptedType] = new DefaultUycomdgi_EncryptedTypeFormat {}
  implicit lazy val Uycomdgi_EncryptionMethodTypeFormat: scalaxb.XMLFormat[uy.com.dgi.EncryptionMethodType] = new DefaultUycomdgi_EncryptionMethodTypeFormat {}
  implicit lazy val Uycomdgi_CipherDataTypeFormat: scalaxb.XMLFormat[uy.com.dgi.CipherDataType] = new DefaultUycomdgi_CipherDataTypeFormat {}
  implicit lazy val Uycomdgi_CipherReferenceTypeFormat: scalaxb.XMLFormat[uy.com.dgi.CipherReferenceType] = new DefaultUycomdgi_CipherReferenceTypeFormat {}
  implicit lazy val Uycomdgi_TransformsTypeTypeFormat: scalaxb.XMLFormat[uy.com.dgi.TransformsTypeType] = new DefaultUycomdgi_TransformsTypeTypeFormat {}
  implicit lazy val Uycomdgi_EncryptedDataTypeFormat: scalaxb.XMLFormat[uy.com.dgi.EncryptedDataType] = new DefaultUycomdgi_EncryptedDataTypeFormat {}
  implicit lazy val Uycomdgi_EncryptedKeyTypeFormat: scalaxb.XMLFormat[uy.com.dgi.EncryptedKeyType] = new DefaultUycomdgi_EncryptedKeyTypeFormat {}
  implicit lazy val Uycomdgi_AgreementMethodTypeFormat: scalaxb.XMLFormat[uy.com.dgi.AgreementMethodType] = new DefaultUycomdgi_AgreementMethodTypeFormat {}
  implicit lazy val Uycomdgi_ReferenceListFormat: scalaxb.XMLFormat[uy.com.dgi.ReferenceList] = new DefaultUycomdgi_ReferenceListFormat {}
  implicit lazy val Uycomdgi_ReferenceTypeTypeFormat: scalaxb.XMLFormat[uy.com.dgi.ReferenceTypeType] = new DefaultUycomdgi_ReferenceTypeTypeFormat {}
  implicit lazy val Uycomdgi_EncryptionPropertiesTypeFormat: scalaxb.XMLFormat[uy.com.dgi.EncryptionPropertiesType] = new DefaultUycomdgi_EncryptionPropertiesTypeFormat {}
  implicit lazy val Uycomdgi_EncryptionPropertyTypeFormat: scalaxb.XMLFormat[uy.com.dgi.EncryptionPropertyType] = new DefaultUycomdgi_EncryptionPropertyTypeFormat {}
  implicit lazy val Uycomdgi_SignatureTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SignatureType] = new DefaultUycomdgi_SignatureTypeFormat {}
  implicit lazy val Uycomdgi_SignatureValueTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SignatureValueType] = new DefaultUycomdgi_SignatureValueTypeFormat {}
  implicit lazy val Uycomdgi_SignedInfoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SignedInfoType] = new DefaultUycomdgi_SignedInfoTypeFormat {}
  implicit lazy val Uycomdgi_CanonicalizationMethodTypeFormat: scalaxb.XMLFormat[uy.com.dgi.CanonicalizationMethodType] = new DefaultUycomdgi_CanonicalizationMethodTypeFormat {}
  implicit lazy val Uycomdgi_SignatureMethodTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SignatureMethodType] = new DefaultUycomdgi_SignatureMethodTypeFormat {}
  implicit lazy val Uycomdgi_ReferenceTypeFormat: scalaxb.XMLFormat[uy.com.dgi.ReferenceType] = new DefaultUycomdgi_ReferenceTypeFormat {}
  implicit lazy val Uycomdgi_TransformsTypeFormat: scalaxb.XMLFormat[uy.com.dgi.TransformsType] = new DefaultUycomdgi_TransformsTypeFormat {}
  implicit lazy val Uycomdgi_TransformTypeFormat: scalaxb.XMLFormat[uy.com.dgi.TransformType] = new DefaultUycomdgi_TransformTypeFormat {}
  implicit lazy val Uycomdgi_DigestMethodTypeFormat: scalaxb.XMLFormat[uy.com.dgi.DigestMethodType] = new DefaultUycomdgi_DigestMethodTypeFormat {}
  implicit lazy val Uycomdgi_KeyInfoTypeFormat: scalaxb.XMLFormat[uy.com.dgi.KeyInfoType] = new DefaultUycomdgi_KeyInfoTypeFormat {}
  implicit lazy val Uycomdgi_KeyValueTypeFormat: scalaxb.XMLFormat[uy.com.dgi.KeyValueType] = new DefaultUycomdgi_KeyValueTypeFormat {}
  implicit lazy val Uycomdgi_RetrievalMethodTypeFormat: scalaxb.XMLFormat[uy.com.dgi.RetrievalMethodType] = new DefaultUycomdgi_RetrievalMethodTypeFormat {}
  implicit lazy val Uycomdgi_X509DataTypeFormat: scalaxb.XMLFormat[uy.com.dgi.X509DataType] = new DefaultUycomdgi_X509DataTypeFormat {}
  implicit lazy val Uycomdgi_X509IssuerSerialTypeFormat: scalaxb.XMLFormat[uy.com.dgi.X509IssuerSerialType] = new DefaultUycomdgi_X509IssuerSerialTypeFormat {}
  implicit lazy val Uycomdgi_PGPDataTypeFormat: scalaxb.XMLFormat[uy.com.dgi.PGPDataType] = new DefaultUycomdgi_PGPDataTypeFormat {}
  implicit lazy val Uycomdgi_PGPDataTypeSequence2Format: scalaxb.XMLFormat[uy.com.dgi.PGPDataTypeSequence2] = new DefaultUycomdgi_PGPDataTypeSequence2Format {}
  implicit lazy val Uycomdgi_PGPDataTypeSequence1Format: scalaxb.XMLFormat[uy.com.dgi.PGPDataTypeSequence1] = new DefaultUycomdgi_PGPDataTypeSequence1Format {}
  implicit lazy val Uycomdgi_SPKIDataTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SPKIDataType] = new DefaultUycomdgi_SPKIDataTypeFormat {}
  implicit lazy val Uycomdgi_SPKIDataTypeSequence1Format: scalaxb.XMLFormat[uy.com.dgi.SPKIDataTypeSequence1] = new DefaultUycomdgi_SPKIDataTypeSequence1Format {}
  implicit lazy val Uycomdgi_ObjectTypeFormat: scalaxb.XMLFormat[uy.com.dgi.ObjectType] = new DefaultUycomdgi_ObjectTypeFormat {}
  implicit lazy val Uycomdgi_ManifestTypeFormat: scalaxb.XMLFormat[uy.com.dgi.ManifestType] = new DefaultUycomdgi_ManifestTypeFormat {}
  implicit lazy val Uycomdgi_SignaturePropertiesTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SignaturePropertiesType] = new DefaultUycomdgi_SignaturePropertiesTypeFormat {}
  implicit lazy val Uycomdgi_SignaturePropertyTypeFormat: scalaxb.XMLFormat[uy.com.dgi.SignaturePropertyType] = new DefaultUycomdgi_SignaturePropertyTypeFormat {}
  implicit lazy val Uycomdgi_DSAKeyValueTypeFormat: scalaxb.XMLFormat[uy.com.dgi.DSAKeyValueType] = new DefaultUycomdgi_DSAKeyValueTypeFormat {}
  implicit lazy val Uycomdgi_DSAKeyValueTypeSequence2Format: scalaxb.XMLFormat[uy.com.dgi.DSAKeyValueTypeSequence2] = new DefaultUycomdgi_DSAKeyValueTypeSequence2Format {}
  implicit lazy val Uycomdgi_DSAKeyValueTypeSequence1Format: scalaxb.XMLFormat[uy.com.dgi.DSAKeyValueTypeSequence1] = new DefaultUycomdgi_DSAKeyValueTypeSequence1Format {}
  implicit lazy val Uycomdgi_RSAKeyValueTypeFormat: scalaxb.XMLFormat[uy.com.dgi.RSAKeyValueType] = new DefaultUycomdgi_RSAKeyValueTypeFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("CFE"), Some("http://cfe.dgi.gub.uy") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.CFEDefType](elem)))
      case (Some("EncryptionProperty"), Some("http://www.w3.org/2001/04/xmlenc#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.EncryptionPropertyType](elem)))
      case (Some("ReferenceList"), Some("http://www.w3.org/2001/04/xmlenc#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.ReferenceList](elem)))
      case (Some("EncryptedKey"), Some("http://www.w3.org/2001/04/xmlenc#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.EncryptedKeyType](elem)))
      case (Some("CipherReference"), Some("http://www.w3.org/2001/04/xmlenc#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.CipherReferenceType](elem)))
      case (Some("CipherData"), Some("http://www.w3.org/2001/04/xmlenc#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.CipherDataType](elem)))
      case (Some("EncryptedData"), Some("http://www.w3.org/2001/04/xmlenc#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.EncryptedDataType](elem)))
      case (Some("AgreementMethod"), Some("http://www.w3.org/2001/04/xmlenc#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.AgreementMethodType](elem)))
      case (Some("EncryptionProperties"), Some("http://www.w3.org/2001/04/xmlenc#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.EncryptionPropertiesType](elem)))
      case (Some("RSAKeyValue"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.RSAKeyValueType](elem)))
      case (Some("SignatureProperty"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.SignaturePropertyType](elem)))
      case (Some("Manifest"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.ManifestType](elem)))
      case (Some("SPKIData"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.SPKIDataType](elem)))
      case (Some("X509Data"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.X509DataType](elem)))
      case (Some("KeyValue"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.KeyValueType](elem)))
      case (Some("KeyName"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("DigestValue"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[scalaxb.Base64Binary](elem)))
      case (Some("Transform"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.TransformType](elem)))
      case (Some("Reference"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.ReferenceType](elem)))
      case (Some("CanonicalizationMethod"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.CanonicalizationMethodType](elem)))
      case (Some("SignatureValue"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.SignatureValueType](elem)))
      case (Some("Signature"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.SignatureType](elem)))
      case (Some("SignedInfo"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.SignedInfoType](elem)))
      case (Some("SignatureMethod"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.SignatureMethodType](elem)))
      case (Some("Transforms"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.TransformsType](elem)))
      case (Some("DigestMethod"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.DigestMethodType](elem)))
      case (Some("KeyInfo"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.KeyInfoType](elem)))
      case (Some("MgmtData"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("RetrievalMethod"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.RetrievalMethodType](elem)))
      case (Some("PGPData"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.PGPDataType](elem)))
      case (Some("Object"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.ObjectType](elem)))
      case (Some("SignatureProperties"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.SignaturePropertiesType](elem)))
      case (Some("DSAKeyValue"), Some("http://www.w3.org/2000/09/xmldsig#") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[uy.com.dgi.DSAKeyValueType](elem)))

      case _ => None
    }


  }

  def buildUycomdgi_CAEEspecialFormat = new DefaultUycomdgi_CAEEspecialFormat {}
  trait DefaultUycomdgi_CAEEspecialFormat extends scalaxb.XMLFormat[uy.com.dgi.CAEEspecial] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.CAEEspecial = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value14
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value9
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3Value4
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("4")) => uy.com.dgi.Number4Value3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.CAEEspecial] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.CAEEspecial, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_CAEDataTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.CAEDataType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("CAEDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CAEDataType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAE_ID")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DNro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "HNro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FecVenc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAEEspecial")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CausalCAEEsp")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      uy.com.dgi.CAEDataType(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.CAEEspecial](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.CAEDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.CAE_ID, Some("http://cfe.dgi.gub.uy"), Some("CAE_ID"), __scope, false),
        scalaxb.toXML[BigInt](__obj.DNro, Some("http://cfe.dgi.gub.uy"), Some("DNro"), __scope, false),
        scalaxb.toXML[BigInt](__obj.HNro, Some("http://cfe.dgi.gub.uy"), Some("HNro"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.FecVenc, Some("http://cfe.dgi.gub.uy"), Some("FecVenc"), __scope, false),
        __obj.CAEEspecial map { scalaxb.toXML[uy.com.dgi.CAEEspecial](_, Some("http://cfe.dgi.gub.uy"), Some("CAEEspecial"), __scope, false) } getOrElse {Nil},
        __obj.CausalCAEEsp map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CausalCAEEsp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_EncabezadoFormat extends scalaxb.ElemNameParser[uy.com.dgi.Encabezado] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Encabezado] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IdDoc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Emisor")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Receptor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Totales")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.Encabezado(scalaxb.fromXML[uy.com.dgi.IdDoc_Tck](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Emisor](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.Receptor_Tck](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.TotalesType](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Encabezado, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.IdDoc_Tck](__obj.IdDoc, Some("http://cfe.dgi.gub.uy"), Some("IdDoc"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Emisor](__obj.Emisor, Some("http://cfe.dgi.gub.uy"), Some("Emisor"), __scope, false),
        __obj.Receptor map { scalaxb.toXML[uy.com.dgi.Receptor_Tck](_, Some("http://cfe.dgi.gub.uy"), Some("Receptor"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.TotalesType](__obj.Totales, Some("http://cfe.dgi.gub.uy"), Some("Totales"), __scope, false))

  }

  trait DefaultUycomdgi_DetalleFormat extends scalaxb.ElemNameParser[uy.com.dgi.Detalle] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Detalle] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Item")) ^^
      { case p1 =>
      uy.com.dgi.Detalle(p1 map { scalaxb.fromXML[uy.com.dgi.Item_Det_Fact](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Detalle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Item flatMap { scalaxb.toXML[uy.com.dgi.Item_Det_Fact](_, Some("http://cfe.dgi.gub.uy"), Some("Item"), __scope, false) })

  }

  trait DefaultUycomdgi_ETckFormat extends scalaxb.ElemNameParser[uy.com.dgi.ETck] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ETck] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TmstFirma")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Encabezado")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubTotInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscRcgGlobal")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MediosPago")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Referencia")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAEData")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Compl_Fiscal")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      uy.com.dgi.ETck(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Encabezado](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Detalle](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.SubTotInfo](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.DscRcgGlobal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[uy.com.dgi.MediosPago](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.ReferenciaType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CAEDataType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[uy.com.dgi.Compl_FiscalType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.ETck, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.TmstFirma, Some("http://cfe.dgi.gub.uy"), Some("TmstFirma"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Encabezado](__obj.Encabezado, Some("http://cfe.dgi.gub.uy"), Some("Encabezado"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Detalle](__obj.Detalle, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false),
        __obj.SubTotInfo map { scalaxb.toXML[uy.com.dgi.SubTotInfo](_, Some("http://cfe.dgi.gub.uy"), Some("SubTotInfo"), __scope, false) } getOrElse {Nil},
        __obj.DscRcgGlobal map { scalaxb.toXML[uy.com.dgi.DscRcgGlobal](_, Some("http://cfe.dgi.gub.uy"), Some("DscRcgGlobal"), __scope, false) } getOrElse {Nil},
        __obj.MediosPago map { scalaxb.toXML[uy.com.dgi.MediosPago](_, Some("http://cfe.dgi.gub.uy"), Some("MediosPago"), __scope, false) } getOrElse {Nil},
        __obj.Referencia map { scalaxb.toXML[uy.com.dgi.ReferenciaType](_, Some("http://cfe.dgi.gub.uy"), Some("Referencia"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CAEDataType](__obj.CAEData, Some("http://cfe.dgi.gub.uy"), Some("CAEData"), __scope, false),
        __obj.Compl_Fiscal map { scalaxb.toXML[uy.com.dgi.Compl_FiscalType](_, Some("http://cfe.dgi.gub.uy"), Some("Compl_Fiscal"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_Encabezado2Format extends scalaxb.ElemNameParser[uy.com.dgi.Encabezado2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Encabezado2] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IdDoc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Emisor")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Receptor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Totales")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.Encabezado2(scalaxb.fromXML[uy.com.dgi.IdDoc_Fact](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Emisor](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.Receptor_Fact](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.TotalesType](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Encabezado2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.IdDoc_Fact](__obj.IdDoc, Some("http://cfe.dgi.gub.uy"), Some("IdDoc"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Emisor](__obj.Emisor, Some("http://cfe.dgi.gub.uy"), Some("Emisor"), __scope, false),
        __obj.Receptor map { scalaxb.toXML[uy.com.dgi.Receptor_Fact](_, Some("http://cfe.dgi.gub.uy"), Some("Receptor"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.TotalesType](__obj.Totales, Some("http://cfe.dgi.gub.uy"), Some("Totales"), __scope, false))

  }

  trait DefaultUycomdgi_Detalle2Format extends scalaxb.ElemNameParser[uy.com.dgi.Detalle2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Detalle2] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Item")) ^^
      { case p1 =>
      uy.com.dgi.Detalle2(p1 map { scalaxb.fromXML[uy.com.dgi.Item_Det_Fact](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Detalle2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Item flatMap { scalaxb.toXML[uy.com.dgi.Item_Det_Fact](_, Some("http://cfe.dgi.gub.uy"), Some("Item"), __scope, false) })

  }

  trait DefaultUycomdgi_EFactFormat extends scalaxb.ElemNameParser[uy.com.dgi.EFact] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EFact] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TmstFirma")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Encabezado")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubTotInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscRcgGlobal")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MediosPago")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Referencia")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAEData")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Compl_Fiscal")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      uy.com.dgi.EFact(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Encabezado2](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Detalle2](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.SubTotInfo](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.DscRcgGlobal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[uy.com.dgi.MediosPago](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.ReferenciaType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CAEDataType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[uy.com.dgi.Compl_FiscalType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.EFact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.TmstFirma, Some("http://cfe.dgi.gub.uy"), Some("TmstFirma"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Encabezado2](__obj.Encabezado, Some("http://cfe.dgi.gub.uy"), Some("Encabezado"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Detalle2](__obj.Detalle, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false),
        __obj.SubTotInfo map { scalaxb.toXML[uy.com.dgi.SubTotInfo](_, Some("http://cfe.dgi.gub.uy"), Some("SubTotInfo"), __scope, false) } getOrElse {Nil},
        __obj.DscRcgGlobal map { scalaxb.toXML[uy.com.dgi.DscRcgGlobal](_, Some("http://cfe.dgi.gub.uy"), Some("DscRcgGlobal"), __scope, false) } getOrElse {Nil},
        __obj.MediosPago map { scalaxb.toXML[uy.com.dgi.MediosPago](_, Some("http://cfe.dgi.gub.uy"), Some("MediosPago"), __scope, false) } getOrElse {Nil},
        __obj.Referencia map { scalaxb.toXML[uy.com.dgi.ReferenciaType](_, Some("http://cfe.dgi.gub.uy"), Some("Referencia"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CAEDataType](__obj.CAEData, Some("http://cfe.dgi.gub.uy"), Some("CAEData"), __scope, false),
        __obj.Compl_Fiscal map { scalaxb.toXML[uy.com.dgi.Compl_FiscalType](_, Some("http://cfe.dgi.gub.uy"), Some("Compl_Fiscal"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_Encabezado3Format extends scalaxb.ElemNameParser[uy.com.dgi.Encabezado3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Encabezado3] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IdDoc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Emisor")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Receptor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Totales")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.Encabezado3(scalaxb.fromXML[uy.com.dgi.IdDoc_Fact_Exp](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Emisor](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.Receptor_Fact_Exp](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.Totales_Fact_Exp](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Encabezado3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.IdDoc_Fact_Exp](__obj.IdDoc, Some("http://cfe.dgi.gub.uy"), Some("IdDoc"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Emisor](__obj.Emisor, Some("http://cfe.dgi.gub.uy"), Some("Emisor"), __scope, false),
        __obj.Receptor map { scalaxb.toXML[uy.com.dgi.Receptor_Fact_Exp](_, Some("http://cfe.dgi.gub.uy"), Some("Receptor"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.Totales_Fact_Exp](__obj.Totales, Some("http://cfe.dgi.gub.uy"), Some("Totales"), __scope, false))

  }

  trait DefaultUycomdgi_Detalle3Format extends scalaxb.ElemNameParser[uy.com.dgi.Detalle3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Detalle3] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Item")) ^^
      { case p1 =>
      uy.com.dgi.Detalle3(p1 map { scalaxb.fromXML[uy.com.dgi.Item_Det_Fact_Exp](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Detalle3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Item flatMap { scalaxb.toXML[uy.com.dgi.Item_Det_Fact_Exp](_, Some("http://cfe.dgi.gub.uy"), Some("Item"), __scope, false) })

  }

  trait DefaultUycomdgi_EFact_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.EFact_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EFact_Exp] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TmstFirma")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Encabezado")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubTotInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscRcgGlobal")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MediosPago")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Referencia")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAEData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      uy.com.dgi.EFact_Exp(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Encabezado3](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Detalle3](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.SubTotInfo](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.DscRcgGlobal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[uy.com.dgi.MediosPago](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.ReferenciaType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CAEDataType](p8, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.EFact_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.TmstFirma, Some("http://cfe.dgi.gub.uy"), Some("TmstFirma"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Encabezado3](__obj.Encabezado, Some("http://cfe.dgi.gub.uy"), Some("Encabezado"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Detalle3](__obj.Detalle, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false),
        __obj.SubTotInfo map { scalaxb.toXML[uy.com.dgi.SubTotInfo](_, Some("http://cfe.dgi.gub.uy"), Some("SubTotInfo"), __scope, false) } getOrElse {Nil},
        __obj.DscRcgGlobal map { scalaxb.toXML[uy.com.dgi.DscRcgGlobal](_, Some("http://cfe.dgi.gub.uy"), Some("DscRcgGlobal"), __scope, false) } getOrElse {Nil},
        __obj.MediosPago map { scalaxb.toXML[uy.com.dgi.MediosPago](_, Some("http://cfe.dgi.gub.uy"), Some("MediosPago"), __scope, false) } getOrElse {Nil},
        __obj.Referencia map { scalaxb.toXML[uy.com.dgi.ReferenciaType](_, Some("http://cfe.dgi.gub.uy"), Some("Referencia"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CAEDataType](__obj.CAEData, Some("http://cfe.dgi.gub.uy"), Some("CAEData"), __scope, false))

  }

  trait DefaultUycomdgi_TotalesFormat extends scalaxb.ElemNameParser[uy.com.dgi.Totales] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Totales] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CantLinDet")) ^^
      { case p1 =>
      uy.com.dgi.Totales(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Totales, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[BigInt](__obj.CantLinDet, Some("http://cfe.dgi.gub.uy"), Some("CantLinDet"), __scope, false))

  }

  trait DefaultUycomdgi_Encabezado4Format extends scalaxb.ElemNameParser[uy.com.dgi.Encabezado4] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Encabezado4] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IdDoc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Emisor")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Receptor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Totales")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.Encabezado4(scalaxb.fromXML[uy.com.dgi.IdDoc_Rem](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Emisor](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.Receptor_Rem](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.Totales](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Encabezado4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.IdDoc_Rem](__obj.IdDoc, Some("http://cfe.dgi.gub.uy"), Some("IdDoc"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Emisor](__obj.Emisor, Some("http://cfe.dgi.gub.uy"), Some("Emisor"), __scope, false),
        __obj.Receptor map { scalaxb.toXML[uy.com.dgi.Receptor_Rem](_, Some("http://cfe.dgi.gub.uy"), Some("Receptor"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.Totales](__obj.Totales, Some("http://cfe.dgi.gub.uy"), Some("Totales"), __scope, false))

  }

  trait DefaultUycomdgi_Detalle4Format extends scalaxb.ElemNameParser[uy.com.dgi.Detalle4] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Detalle4] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Item")) ^^
      { case p1 =>
      uy.com.dgi.Detalle4(p1 map { scalaxb.fromXML[uy.com.dgi.Item_Rem](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Detalle4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Item flatMap { scalaxb.toXML[uy.com.dgi.Item_Rem](_, Some("http://cfe.dgi.gub.uy"), Some("Item"), __scope, false) })

  }

  trait DefaultUycomdgi_ERemFormat extends scalaxb.ElemNameParser[uy.com.dgi.ERem] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ERem] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TmstFirma")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Encabezado")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubTotInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Referencia")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAEData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      uy.com.dgi.ERem(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Encabezado4](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Detalle4](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.SubTotInfo](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.ReferenciaType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CAEDataType](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.ERem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.TmstFirma, Some("http://cfe.dgi.gub.uy"), Some("TmstFirma"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Encabezado4](__obj.Encabezado, Some("http://cfe.dgi.gub.uy"), Some("Encabezado"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Detalle4](__obj.Detalle, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false),
        __obj.SubTotInfo map { scalaxb.toXML[uy.com.dgi.SubTotInfo](_, Some("http://cfe.dgi.gub.uy"), Some("SubTotInfo"), __scope, false) } getOrElse {Nil},
        __obj.Referencia map { scalaxb.toXML[uy.com.dgi.ReferenciaType](_, Some("http://cfe.dgi.gub.uy"), Some("Referencia"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CAEDataType](__obj.CAEData, Some("http://cfe.dgi.gub.uy"), Some("CAEData"), __scope, false))

  }

  trait DefaultUycomdgi_Encabezado5Format extends scalaxb.ElemNameParser[uy.com.dgi.Encabezado5] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Encabezado5] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IdDoc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Emisor")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Receptor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Totales")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.Encabezado5(scalaxb.fromXML[uy.com.dgi.IdDoc_Rem_Exp](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Emisor](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.Receptor_Rem_Exp](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.Totales_Rem_Exp](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Encabezado5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.IdDoc_Rem_Exp](__obj.IdDoc, Some("http://cfe.dgi.gub.uy"), Some("IdDoc"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Emisor](__obj.Emisor, Some("http://cfe.dgi.gub.uy"), Some("Emisor"), __scope, false),
        __obj.Receptor map { scalaxb.toXML[uy.com.dgi.Receptor_Rem_Exp](_, Some("http://cfe.dgi.gub.uy"), Some("Receptor"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.Totales_Rem_Exp](__obj.Totales, Some("http://cfe.dgi.gub.uy"), Some("Totales"), __scope, false))

  }

  trait DefaultUycomdgi_Detalle5Format extends scalaxb.ElemNameParser[uy.com.dgi.Detalle5] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Detalle5] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Item")) ^^
      { case p1 =>
      uy.com.dgi.Detalle5(p1 map { scalaxb.fromXML[uy.com.dgi.Item_Rem_Exp](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Detalle5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Item flatMap { scalaxb.toXML[uy.com.dgi.Item_Rem_Exp](_, Some("http://cfe.dgi.gub.uy"), Some("Item"), __scope, false) })

  }

  trait DefaultUycomdgi_ERem_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.ERem_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ERem_Exp] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TmstFirma")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Encabezado")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubTotInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Referencia")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAEData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      uy.com.dgi.ERem_Exp(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Encabezado5](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Detalle5](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.SubTotInfo](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.ReferenciaType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CAEDataType](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.ERem_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.TmstFirma, Some("http://cfe.dgi.gub.uy"), Some("TmstFirma"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Encabezado5](__obj.Encabezado, Some("http://cfe.dgi.gub.uy"), Some("Encabezado"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Detalle5](__obj.Detalle, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false),
        __obj.SubTotInfo map { scalaxb.toXML[uy.com.dgi.SubTotInfo](_, Some("http://cfe.dgi.gub.uy"), Some("SubTotInfo"), __scope, false) } getOrElse {Nil},
        __obj.Referencia map { scalaxb.toXML[uy.com.dgi.ReferenciaType](_, Some("http://cfe.dgi.gub.uy"), Some("Referencia"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CAEDataType](__obj.CAEData, Some("http://cfe.dgi.gub.uy"), Some("CAEData"), __scope, false))

  }

  trait DefaultUycomdgi_Encabezado6Format extends scalaxb.ElemNameParser[uy.com.dgi.Encabezado6] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Encabezado6] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IdDoc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Emisor")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Receptor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Totales")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.Encabezado6(scalaxb.fromXML[uy.com.dgi.IdDoc_Resg](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Emisor](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.Receptor_Resg](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.Totales_Resg](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Encabezado6, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.IdDoc_Resg](__obj.IdDoc, Some("http://cfe.dgi.gub.uy"), Some("IdDoc"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Emisor](__obj.Emisor, Some("http://cfe.dgi.gub.uy"), Some("Emisor"), __scope, false),
        __obj.Receptor map { scalaxb.toXML[uy.com.dgi.Receptor_Resg](_, Some("http://cfe.dgi.gub.uy"), Some("Receptor"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.Totales_Resg](__obj.Totales, Some("http://cfe.dgi.gub.uy"), Some("Totales"), __scope, false))

  }

  trait DefaultUycomdgi_Detalle6Format extends scalaxb.ElemNameParser[uy.com.dgi.Detalle6] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Detalle6] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Item")) ^^
      { case p1 =>
      uy.com.dgi.Detalle6(p1 map { scalaxb.fromXML[uy.com.dgi.Item_Resg](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Detalle6, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Item flatMap { scalaxb.toXML[uy.com.dgi.Item_Resg](_, Some("http://cfe.dgi.gub.uy"), Some("Item"), __scope, false) })

  }

  trait DefaultUycomdgi_EResgFormat extends scalaxb.ElemNameParser[uy.com.dgi.EResg] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EResg] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TmstFirma")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Encabezado")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubTotInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Referencia")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAEData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      uy.com.dgi.EResg(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Encabezado6](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Detalle6](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.SubTotInfo](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.ReferenciaType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CAEDataType](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.EResg, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.TmstFirma, Some("http://cfe.dgi.gub.uy"), Some("TmstFirma"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Encabezado6](__obj.Encabezado, Some("http://cfe.dgi.gub.uy"), Some("Encabezado"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Detalle6](__obj.Detalle, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false),
        __obj.SubTotInfo map { scalaxb.toXML[uy.com.dgi.SubTotInfo](_, Some("http://cfe.dgi.gub.uy"), Some("SubTotInfo"), __scope, false) } getOrElse {Nil},
        __obj.Referencia map { scalaxb.toXML[uy.com.dgi.ReferenciaType](_, Some("http://cfe.dgi.gub.uy"), Some("Referencia"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CAEDataType](__obj.CAEData, Some("http://cfe.dgi.gub.uy"), Some("CAEData"), __scope, false))

  }

  trait DefaultUycomdgi_Encabezado7Format extends scalaxb.ElemNameParser[uy.com.dgi.Encabezado7] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Encabezado7] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IdDoc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Emisor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Receptor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Totales")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.Encabezado7(scalaxb.fromXML[uy.com.dgi.IdDoc_Boleta](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Emisor](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Receptor_Boleta](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Totales_Boleta](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Encabezado7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.IdDoc_Boleta](__obj.IdDoc, Some("http://cfe.dgi.gub.uy"), Some("IdDoc"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Emisor](__obj.Emisor, Some("http://cfe.dgi.gub.uy"), Some("Emisor"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Receptor_Boleta](__obj.Receptor, Some("http://cfe.dgi.gub.uy"), Some("Receptor"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Totales_Boleta](__obj.Totales, Some("http://cfe.dgi.gub.uy"), Some("Totales"), __scope, false))

  }

  trait DefaultUycomdgi_Detalle7Format extends scalaxb.ElemNameParser[uy.com.dgi.Detalle7] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Detalle7] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Item")) ^^
      { case p1 =>
      uy.com.dgi.Detalle7(p1 map { scalaxb.fromXML[uy.com.dgi.Item_Det_Boleta](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Detalle7, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Item flatMap { scalaxb.toXML[uy.com.dgi.Item_Det_Boleta](_, Some("http://cfe.dgi.gub.uy"), Some("Item"), __scope, false) })

  }

  trait DefaultUycomdgi_EBoletaFormat extends scalaxb.ElemNameParser[uy.com.dgi.EBoleta] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EBoleta] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TmstFirma")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Encabezado")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubTotInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscRcgGlobal")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MediosPago")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Referencia")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CAEData")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      uy.com.dgi.EBoleta(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Encabezado7](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Detalle7](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.SubTotInfo](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.DscRcgGlobal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[uy.com.dgi.MediosPago](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.ReferenciaType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CAEDataType](p8, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.EBoleta, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.TmstFirma, Some("http://cfe.dgi.gub.uy"), Some("TmstFirma"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Encabezado7](__obj.Encabezado, Some("http://cfe.dgi.gub.uy"), Some("Encabezado"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Detalle7](__obj.Detalle, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false),
        __obj.SubTotInfo map { scalaxb.toXML[uy.com.dgi.SubTotInfo](_, Some("http://cfe.dgi.gub.uy"), Some("SubTotInfo"), __scope, false) } getOrElse {Nil},
        __obj.DscRcgGlobal map { scalaxb.toXML[uy.com.dgi.DscRcgGlobal](_, Some("http://cfe.dgi.gub.uy"), Some("DscRcgGlobal"), __scope, false) } getOrElse {Nil},
        __obj.MediosPago map { scalaxb.toXML[uy.com.dgi.MediosPago](_, Some("http://cfe.dgi.gub.uy"), Some("MediosPago"), __scope, false) } getOrElse {Nil},
        __obj.Referencia map { scalaxb.toXML[uy.com.dgi.ReferenciaType](_, Some("http://cfe.dgi.gub.uy"), Some("Referencia"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CAEDataType](__obj.CAEData, Some("http://cfe.dgi.gub.uy"), Some("CAEData"), __scope, false))

  }

  trait DefaultUycomdgi_CFEDefTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.CFEDefType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("CFEDefType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CFEDefType] =
      phrase((((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "eTck")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.ETck](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "eFact")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.EFact](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "eFact_Exp")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.EFact_Exp](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "eRem")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.ERem](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "eRem_Exp")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.ERem_Exp](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "eResg")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.EResg](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "eBoleta")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.EBoleta](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Signature")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.CFEDefType(p1,
        scalaxb.fromXML[uy.com.dgi.SignatureType](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("1.0"), scalaxb.ElemName(node) :: stack))) map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.CFEDefType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.CFEDefType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat((Some(__obj.cfedeftypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[uy.com.dgi.CFEDefTypeOption]](x, x.namespace, x.key, __scope, false)}).get,
        scalaxb.toXML[uy.com.dgi.SignatureType](__obj.Signature, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Signature"), __scope, false))

  }

  def buildUycomdgi_TpoMovDRFormat = new DefaultUycomdgi_TpoMovDRFormat {}
  trait DefaultUycomdgi_TpoMovDRFormat extends scalaxb.XMLFormat[uy.com.dgi.TpoMovDR] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TpoMovDR = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("D")) => uy.com.dgi.D
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R")) => uy.com.dgi.RValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TpoMovDR] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TpoMovDR, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndFactDRFormat = new DefaultUycomdgi_IndFactDRFormat {}
  trait DefaultUycomdgi_IndFactDRFormat extends scalaxb.XMLFormat[uy.com.dgi.IndFactDR] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndFactDR = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value16
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value10
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3Value5
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("4")) => uy.com.dgi.Number4Value4
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("6")) => uy.com.dgi.Number6Value2
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("7")) => uy.com.dgi.Number7Value2
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("10")) => uy.com.dgi.Number10
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("11")) => uy.com.dgi.Number11
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("12")) => uy.com.dgi.Number12
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("13")) => uy.com.dgi.Number13
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("14")) => uy.com.dgi.Number14
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("15")) => uy.com.dgi.Number15
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("16")) => uy.com.dgi.Number16

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndFactDR] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndFactDR, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_DRG_ItemFormat extends scalaxb.ElemNameParser[uy.com.dgi.DRG_Item] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.DRG_Item] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinDR")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoMovDR")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoDR")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodDR")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "GlosaDR")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ValorDR")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndFactDR")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      uy.com.dgi.DRG_Item(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.TpoMovDR](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.TipoDRType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.IndFactDR](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.DRG_Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinDR, Some("http://cfe.dgi.gub.uy"), Some("NroLinDR"), __scope, false),
        scalaxb.toXML[uy.com.dgi.TpoMovDR](__obj.TpoMovDR, Some("http://cfe.dgi.gub.uy"), Some("TpoMovDR"), __scope, false),
        scalaxb.toXML[uy.com.dgi.TipoDRType](__obj.TpoDR, Some("http://cfe.dgi.gub.uy"), Some("TpoDR"), __scope, false),
        __obj.CodDR map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CodDR"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.GlosaDR, Some("http://cfe.dgi.gub.uy"), Some("GlosaDR"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.ValorDR, Some("http://cfe.dgi.gub.uy"), Some("ValorDR"), __scope, false),
        scalaxb.toXML[uy.com.dgi.IndFactDR](__obj.IndFactDR, Some("http://cfe.dgi.gub.uy"), Some("IndFactDR"), __scope, false))

  }

  trait DefaultUycomdgi_DscRcgGlobalFormat extends scalaxb.ElemNameParser[uy.com.dgi.DscRcgGlobal] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("DscRcgGlobal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.DscRcgGlobal] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DRG_Item")) ^^
      { case p1 =>
      uy.com.dgi.DscRcgGlobal(p1 map { scalaxb.fromXML[uy.com.dgi.DRG_Item](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.DscRcgGlobal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.DRG_Item flatMap { scalaxb.toXML[uy.com.dgi.DRG_Item](_, Some("http://cfe.dgi.gub.uy"), Some("DRG_Item"), __scope, false) })

  }

  trait DefaultUycomdgi_EmisorFormat extends scalaxb.ElemNameParser[uy.com.dgi.Emisor] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Emisor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Emisor] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RUCEmisor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSoc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NomComercial")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "GiroEmis")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Telefono")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CorreoEmisor")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "EmiSucursal")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CdgDGISucur")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DomFiscal")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Ciudad")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Departamento")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalEmisor")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      uy.com.dgi.Emisor(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Emisor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.RUCEmisor, Some("http://cfe.dgi.gub.uy"), Some("RUCEmisor"), __scope, false),
        scalaxb.toXML[String](__obj.RznSoc, Some("http://cfe.dgi.gub.uy"), Some("RznSoc"), __scope, false),
        __obj.NomComercial map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("NomComercial"), __scope, false) } getOrElse {Nil},
        __obj.GiroEmis map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("GiroEmis"), __scope, false) } getOrElse {Nil},
        __obj.Telefono flatMap { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("Telefono"), __scope, false) },
        __obj.CorreoEmisor map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CorreoEmisor"), __scope, false) } getOrElse {Nil},
        __obj.EmiSucursal map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("EmiSucursal"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.CdgDGISucur, Some("http://cfe.dgi.gub.uy"), Some("CdgDGISucur"), __scope, false),
        scalaxb.toXML[String](__obj.DomFiscal, Some("http://cfe.dgi.gub.uy"), Some("DomFiscal"), __scope, false),
        scalaxb.toXML[String](__obj.Ciudad, Some("http://cfe.dgi.gub.uy"), Some("Ciudad"), __scope, false),
        scalaxb.toXML[String](__obj.Departamento, Some("http://cfe.dgi.gub.uy"), Some("Departamento"), __scope, false),
        __obj.InfoAdicionalEmisor map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalEmisor"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_TipoCFEFormat = new DefaultUycomdgi_TipoCFEFormat {}
  trait DefaultUycomdgi_TipoCFEFormat extends scalaxb.XMLFormat[uy.com.dgi.TipoCFE] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoCFE = scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("111")) => uy.com.dgi.Number111Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("112")) => uy.com.dgi.Number112Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("113")) => uy.com.dgi.Number113Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("141")) => uy.com.dgi.Number141Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("142")) => uy.com.dgi.Number142Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("143")) => uy.com.dgi.Number143Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("211")) => uy.com.dgi.Number211Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("212")) => uy.com.dgi.Number212Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("213")) => uy.com.dgi.Number213Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("241")) => uy.com.dgi.Number241Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("242")) => uy.com.dgi.Number242Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("243")) => uy.com.dgi.Number243Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoCFE] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoCFE, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_MntBrutoFormat = new DefaultUycomdgi_MntBrutoFormat {}
  trait DefaultUycomdgi_MntBrutoFormat extends scalaxb.XMLFormat[uy.com.dgi.MntBruto] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.MntBruto = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value15
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value11
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3Value6

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.MntBruto] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.MntBruto, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_FmaPagoFormat = new DefaultUycomdgi_FmaPagoFormat {}
  trait DefaultUycomdgi_FmaPagoFormat extends scalaxb.XMLFormat[uy.com.dgi.FmaPago] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.FmaPago = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value17
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value12

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.FmaPago] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.FmaPago, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_IdDoc_FactFormat extends scalaxb.ElemNameParser[uy.com.dgi.IdDoc_Fact] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("IdDoc_Fact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.IdDoc_Fact] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoCFE")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Nro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchEmis")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PeriodoDesde")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PeriodoHasta")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntBruto")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FmaPago")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchVenc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalDoc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IVAalDia")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SecProf")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndPagCta3ros")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndCobPropia")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      uy.com.dgi.IdDoc_Fact(scalaxb.fromXML[uy.com.dgi.TipoCFE](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.MntBruto](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.FmaPago](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[uy.com.dgi.IndIVAalDiaType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[uy.com.dgi.SecProfType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[uy.com.dgi.IndPagCta3rosType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[uy.com.dgi.IndCobPropiaType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.IdDoc_Fact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipoCFE](__obj.TipoCFE, Some("http://cfe.dgi.gub.uy"), Some("TipoCFE"), __scope, false),
        scalaxb.toXML[String](__obj.Serie, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Nro, Some("http://cfe.dgi.gub.uy"), Some("Nro"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.FchEmis, Some("http://cfe.dgi.gub.uy"), Some("FchEmis"), __scope, false),
        __obj.PeriodoDesde map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("PeriodoDesde"), __scope, false) } getOrElse {Nil},
        __obj.PeriodoHasta map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("PeriodoHasta"), __scope, false) } getOrElse {Nil},
        __obj.MntBruto map { scalaxb.toXML[uy.com.dgi.MntBruto](_, Some("http://cfe.dgi.gub.uy"), Some("MntBruto"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.FmaPago](__obj.FmaPago, Some("http://cfe.dgi.gub.uy"), Some("FmaPago"), __scope, false),
        __obj.FchVenc map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("FchVenc"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicionalDoc map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalDoc"), __scope, false) } getOrElse {Nil},
        __obj.IVAalDia map { scalaxb.toXML[uy.com.dgi.IndIVAalDiaType](_, Some("http://cfe.dgi.gub.uy"), Some("IVAalDia"), __scope, false) } getOrElse {Nil},
        __obj.SecProf map { scalaxb.toXML[uy.com.dgi.SecProfType](_, Some("http://cfe.dgi.gub.uy"), Some("SecProf"), __scope, false) } getOrElse {Nil},
        __obj.IndPagCta3ros map { scalaxb.toXML[uy.com.dgi.IndPagCta3rosType](_, Some("http://cfe.dgi.gub.uy"), Some("IndPagCta3ros"), __scope, false) } getOrElse {Nil},
        __obj.IndCobPropia map { scalaxb.toXML[uy.com.dgi.IndCobPropiaType](_, Some("http://cfe.dgi.gub.uy"), Some("IndCobPropia"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_TipoCFETypeFormat = new DefaultUycomdgi_TipoCFETypeFormat {}
  trait DefaultUycomdgi_TipoCFETypeFormat extends scalaxb.XMLFormat[uy.com.dgi.TipoCFEType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoCFEType = scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("121")) => uy.com.dgi.Number121Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("122")) => uy.com.dgi.Number122Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("123")) => uy.com.dgi.Number123Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("221")) => uy.com.dgi.Number221Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("222")) => uy.com.dgi.Number222Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("223")) => uy.com.dgi.Number223Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoCFEType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoCFEType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_MntBrutoTypeFormat = new DefaultUycomdgi_MntBrutoTypeFormat {}
  trait DefaultUycomdgi_MntBrutoTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.MntBrutoType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.MntBrutoType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value18
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value13
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3Value7

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.MntBrutoType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.MntBrutoType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_FmaPagoTypeFormat = new DefaultUycomdgi_FmaPagoTypeFormat {}
  trait DefaultUycomdgi_FmaPagoTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.FmaPagoType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.FmaPagoType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value19
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value14

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.FmaPagoType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.FmaPagoType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_IdDoc_Fact_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.IdDoc_Fact_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("IdDoc_Fact_Exp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.IdDoc_Fact_Exp] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoCFE")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Nro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchEmis")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PeriodoDesde")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PeriodoHasta")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntBruto")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FmaPago")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchVenc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ClauVenta")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ModVenta")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ViaTransp")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalDoc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IVAalDia")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SecProf")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndPagCta3ros")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      uy.com.dgi.IdDoc_Fact_Exp(scalaxb.fromXML[uy.com.dgi.TipoCFEType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.MntBrutoType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.FmaPagoType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[uy.com.dgi.ModVentaType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.ViaTranspType](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[uy.com.dgi.IndIVAalDiaType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[uy.com.dgi.SecProfType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[uy.com.dgi.IndPagCta3rosType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.IdDoc_Fact_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipoCFEType](__obj.TipoCFE, Some("http://cfe.dgi.gub.uy"), Some("TipoCFE"), __scope, false),
        scalaxb.toXML[String](__obj.Serie, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Nro, Some("http://cfe.dgi.gub.uy"), Some("Nro"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.FchEmis, Some("http://cfe.dgi.gub.uy"), Some("FchEmis"), __scope, false),
        __obj.PeriodoDesde map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("PeriodoDesde"), __scope, false) } getOrElse {Nil},
        __obj.PeriodoHasta map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("PeriodoHasta"), __scope, false) } getOrElse {Nil},
        __obj.MntBruto map { scalaxb.toXML[uy.com.dgi.MntBrutoType](_, Some("http://cfe.dgi.gub.uy"), Some("MntBruto"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.FmaPagoType](__obj.FmaPago, Some("http://cfe.dgi.gub.uy"), Some("FmaPago"), __scope, false),
        __obj.FchVenc map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("FchVenc"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ClauVenta, Some("http://cfe.dgi.gub.uy"), Some("ClauVenta"), __scope, false),
        __obj.ModVenta map { scalaxb.toXML[uy.com.dgi.ModVentaType](_, Some("http://cfe.dgi.gub.uy"), Some("ModVenta"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.ViaTranspType](__obj.ViaTransp, Some("http://cfe.dgi.gub.uy"), Some("ViaTransp"), __scope, false),
        __obj.InfoAdicionalDoc map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalDoc"), __scope, false) } getOrElse {Nil},
        __obj.IVAalDia map { scalaxb.toXML[uy.com.dgi.IndIVAalDiaType](_, Some("http://cfe.dgi.gub.uy"), Some("IVAalDia"), __scope, false) } getOrElse {Nil},
        __obj.SecProf map { scalaxb.toXML[uy.com.dgi.SecProfType](_, Some("http://cfe.dgi.gub.uy"), Some("SecProf"), __scope, false) } getOrElse {Nil},
        __obj.IndPagCta3ros map { scalaxb.toXML[uy.com.dgi.IndPagCta3rosType](_, Some("http://cfe.dgi.gub.uy"), Some("IndPagCta3ros"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_TipoCFEType2Format = new DefaultUycomdgi_TipoCFEType2Format {}
  trait DefaultUycomdgi_TipoCFEType2Format extends scalaxb.XMLFormat[uy.com.dgi.TipoCFEType2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoCFEType2 = scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("181")) => uy.com.dgi.Number181Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("281")) => uy.com.dgi.Number281Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoCFEType2] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoCFEType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_IdDoc_RemFormat extends scalaxb.ElemNameParser[uy.com.dgi.IdDoc_Rem] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("IdDoc_Rem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.IdDoc_Rem] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoCFE")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Nro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchEmis")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoTraslado")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndPropiedad")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocProp")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisProp")) ~ 
      opt(((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocProp")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocPropExt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocProp")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalDoc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SecProf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      uy.com.dgi.IdDoc_Rem(scalaxb.fromXML[uy.com.dgi.TipoCFEType2](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.TipoTrasladoType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[uy.com.dgi.IndPropiedadType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.DocType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[uy.com.dgi.CodPaisType](_, scalaxb.ElemName(node) :: stack) },
        p9,
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[uy.com.dgi.SecProfType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.IdDoc_Rem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipoCFEType2](__obj.TipoCFE, Some("http://cfe.dgi.gub.uy"), Some("TipoCFE"), __scope, false),
        scalaxb.toXML[String](__obj.Serie, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Nro, Some("http://cfe.dgi.gub.uy"), Some("Nro"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.FchEmis, Some("http://cfe.dgi.gub.uy"), Some("FchEmis"), __scope, false),
        scalaxb.toXML[uy.com.dgi.TipoTrasladoType](__obj.TipoTraslado, Some("http://cfe.dgi.gub.uy"), Some("TipoTraslado"), __scope, false),
        __obj.IndPropiedad map { scalaxb.toXML[uy.com.dgi.IndPropiedadType](_, Some("http://cfe.dgi.gub.uy"), Some("IndPropiedad"), __scope, false) } getOrElse {Nil},
        __obj.TipoDocProp map { scalaxb.toXML[uy.com.dgi.DocType](_, Some("http://cfe.dgi.gub.uy"), Some("TipoDocProp"), __scope, false) } getOrElse {Nil},
        __obj.CodPaisProp map { scalaxb.toXML[uy.com.dgi.CodPaisType](_, Some("http://cfe.dgi.gub.uy"), Some("CodPaisProp"), __scope, false) } getOrElse {Nil},
        __obj.iddoc_remoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.RznSocProp map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("RznSocProp"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicionalDoc map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalDoc"), __scope, false) } getOrElse {Nil},
        __obj.SecProf map { scalaxb.toXML[uy.com.dgi.SecProfType](_, Some("http://cfe.dgi.gub.uy"), Some("SecProf"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_TipoCFEType3Format = new DefaultUycomdgi_TipoCFEType3Format {}
  trait DefaultUycomdgi_TipoCFEType3Format extends scalaxb.XMLFormat[uy.com.dgi.TipoCFEType3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoCFEType3 = scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("124")) => uy.com.dgi.Number124Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("224")) => uy.com.dgi.Number224Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoCFEType3] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoCFEType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_IdDoc_Rem_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.IdDoc_Rem_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("IdDoc_Rem_Exp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.IdDoc_Rem_Exp] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoCFE")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Nro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchEmis")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoTraslado")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndPropiedad")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocProp")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisProp")) ~ 
      opt(((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocProp")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocPropExt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocProp")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ClauVenta")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ModVenta")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ViaTransp")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalDoc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SecProf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      uy.com.dgi.IdDoc_Rem_Exp(scalaxb.fromXML[uy.com.dgi.TipoCFEType3](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.TipoTrasladoType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[uy.com.dgi.IndPropiedadType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.DocType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[uy.com.dgi.CodPaisType](_, scalaxb.ElemName(node) :: stack) },
        p9,
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.ModVentaType](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.ViaTranspType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[uy.com.dgi.SecProfType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.IdDoc_Rem_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipoCFEType3](__obj.TipoCFE, Some("http://cfe.dgi.gub.uy"), Some("TipoCFE"), __scope, false),
        scalaxb.toXML[String](__obj.Serie, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Nro, Some("http://cfe.dgi.gub.uy"), Some("Nro"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.FchEmis, Some("http://cfe.dgi.gub.uy"), Some("FchEmis"), __scope, false),
        scalaxb.toXML[uy.com.dgi.TipoTrasladoType](__obj.TipoTraslado, Some("http://cfe.dgi.gub.uy"), Some("TipoTraslado"), __scope, false),
        __obj.IndPropiedad map { scalaxb.toXML[uy.com.dgi.IndPropiedadType](_, Some("http://cfe.dgi.gub.uy"), Some("IndPropiedad"), __scope, false) } getOrElse {Nil},
        __obj.TipoDocProp map { scalaxb.toXML[uy.com.dgi.DocType](_, Some("http://cfe.dgi.gub.uy"), Some("TipoDocProp"), __scope, false) } getOrElse {Nil},
        __obj.CodPaisProp map { scalaxb.toXML[uy.com.dgi.CodPaisType](_, Some("http://cfe.dgi.gub.uy"), Some("CodPaisProp"), __scope, false) } getOrElse {Nil},
        __obj.iddoc_rem_expoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.RznSocProp map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("RznSocProp"), __scope, false) } getOrElse {Nil},
        __obj.ClauVenta map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("ClauVenta"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.ModVentaType](__obj.ModVenta, Some("http://cfe.dgi.gub.uy"), Some("ModVenta"), __scope, false),
        scalaxb.toXML[uy.com.dgi.ViaTranspType](__obj.ViaTransp, Some("http://cfe.dgi.gub.uy"), Some("ViaTransp"), __scope, false),
        __obj.InfoAdicionalDoc map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalDoc"), __scope, false) } getOrElse {Nil},
        __obj.SecProf map { scalaxb.toXML[uy.com.dgi.SecProfType](_, Some("http://cfe.dgi.gub.uy"), Some("SecProf"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_TipoCFEType4Format = new DefaultUycomdgi_TipoCFEType4Format {}
  trait DefaultUycomdgi_TipoCFEType4Format extends scalaxb.XMLFormat[uy.com.dgi.TipoCFEType4] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoCFEType4 = scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("182")) => uy.com.dgi.Number182Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("282")) => uy.com.dgi.Number282Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoCFEType4] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoCFEType4, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_IdDoc_ResgFormat extends scalaxb.ElemNameParser[uy.com.dgi.IdDoc_Resg] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("IdDoc_Resg")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.IdDoc_Resg] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoCFE")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Nro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchEmis")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalDoc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SecProf")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      uy.com.dgi.IdDoc_Resg(scalaxb.fromXML[uy.com.dgi.TipoCFEType4](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[uy.com.dgi.SecProfType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.IdDoc_Resg, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipoCFEType4](__obj.TipoCFE, Some("http://cfe.dgi.gub.uy"), Some("TipoCFE"), __scope, false),
        scalaxb.toXML[String](__obj.Serie, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Nro, Some("http://cfe.dgi.gub.uy"), Some("Nro"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.FchEmis, Some("http://cfe.dgi.gub.uy"), Some("FchEmis"), __scope, false),
        __obj.InfoAdicionalDoc map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalDoc"), __scope, false) } getOrElse {Nil},
        __obj.SecProf map { scalaxb.toXML[uy.com.dgi.SecProfType](_, Some("http://cfe.dgi.gub.uy"), Some("SecProf"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_TipoCFEType5Format = new DefaultUycomdgi_TipoCFEType5Format {}
  trait DefaultUycomdgi_TipoCFEType5Format extends scalaxb.XMLFormat[uy.com.dgi.TipoCFEType5] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoCFEType5 = scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("101")) => uy.com.dgi.Number101Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("102")) => uy.com.dgi.Number102Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("103")) => uy.com.dgi.Number103Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("131")) => uy.com.dgi.Number131Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("132")) => uy.com.dgi.Number132Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("133")) => uy.com.dgi.Number133Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("201")) => uy.com.dgi.Number201Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("202")) => uy.com.dgi.Number202Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("203")) => uy.com.dgi.Number203Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("231")) => uy.com.dgi.Number231Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("232")) => uy.com.dgi.Number232Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("233")) => uy.com.dgi.Number233Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoCFEType5] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoCFEType5, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_MntBrutoType2Format = new DefaultUycomdgi_MntBrutoType2Format {}
  trait DefaultUycomdgi_MntBrutoType2Format extends scalaxb.XMLFormat[uy.com.dgi.MntBrutoType2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.MntBrutoType2 = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value20
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value15
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3Value8

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.MntBrutoType2] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.MntBrutoType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_FmaPagoType2Format = new DefaultUycomdgi_FmaPagoType2Format {}
  trait DefaultUycomdgi_FmaPagoType2Format extends scalaxb.XMLFormat[uy.com.dgi.FmaPagoType2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.FmaPagoType2 = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value21
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value16

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.FmaPagoType2] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.FmaPagoType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_IdDoc_TckFormat extends scalaxb.ElemNameParser[uy.com.dgi.IdDoc_Tck] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("IdDoc_Tck")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.IdDoc_Tck] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoCFE")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Nro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchEmis")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PeriodoDesde")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PeriodoHasta")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntBruto")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FmaPago")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchVenc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalDoc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IVAalDia")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SecProf")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndPagCta3ros")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndCobPropia")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      uy.com.dgi.IdDoc_Tck(scalaxb.fromXML[uy.com.dgi.TipoCFEType5](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.MntBrutoType2](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.FmaPagoType2](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[uy.com.dgi.IndIVAalDiaType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[uy.com.dgi.SecProfType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[uy.com.dgi.IndPagCta3rosType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[uy.com.dgi.IndCobPropiaType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.IdDoc_Tck, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipoCFEType5](__obj.TipoCFE, Some("http://cfe.dgi.gub.uy"), Some("TipoCFE"), __scope, false),
        scalaxb.toXML[String](__obj.Serie, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Nro, Some("http://cfe.dgi.gub.uy"), Some("Nro"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.FchEmis, Some("http://cfe.dgi.gub.uy"), Some("FchEmis"), __scope, false),
        __obj.PeriodoDesde map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("PeriodoDesde"), __scope, false) } getOrElse {Nil},
        __obj.PeriodoHasta map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("PeriodoHasta"), __scope, false) } getOrElse {Nil},
        __obj.MntBruto map { scalaxb.toXML[uy.com.dgi.MntBrutoType2](_, Some("http://cfe.dgi.gub.uy"), Some("MntBruto"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.FmaPagoType2](__obj.FmaPago, Some("http://cfe.dgi.gub.uy"), Some("FmaPago"), __scope, false),
        __obj.FchVenc map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("FchVenc"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicionalDoc map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalDoc"), __scope, false) } getOrElse {Nil},
        __obj.IVAalDia map { scalaxb.toXML[uy.com.dgi.IndIVAalDiaType](_, Some("http://cfe.dgi.gub.uy"), Some("IVAalDia"), __scope, false) } getOrElse {Nil},
        __obj.SecProf map { scalaxb.toXML[uy.com.dgi.SecProfType](_, Some("http://cfe.dgi.gub.uy"), Some("SecProf"), __scope, false) } getOrElse {Nil},
        __obj.IndPagCta3ros map { scalaxb.toXML[uy.com.dgi.IndPagCta3rosType](_, Some("http://cfe.dgi.gub.uy"), Some("IndPagCta3ros"), __scope, false) } getOrElse {Nil},
        __obj.IndCobPropia map { scalaxb.toXML[uy.com.dgi.IndCobPropiaType](_, Some("http://cfe.dgi.gub.uy"), Some("IndCobPropia"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_TipoCFEType6Format = new DefaultUycomdgi_TipoCFEType6Format {}
  trait DefaultUycomdgi_TipoCFEType6Format extends scalaxb.XMLFormat[uy.com.dgi.TipoCFEType6] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoCFEType6 = scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("131")) => uy.com.dgi.Number131Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("132")) => uy.com.dgi.Number132Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("133")) => uy.com.dgi.Number133Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("141")) => uy.com.dgi.Number141Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("142")) => uy.com.dgi.Number142Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("143")) => uy.com.dgi.Number143Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("231")) => uy.com.dgi.Number231Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("232")) => uy.com.dgi.Number232Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("233")) => uy.com.dgi.Number233Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("241")) => uy.com.dgi.Number241Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("242")) => uy.com.dgi.Number242Value2
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("243")) => uy.com.dgi.Number243Value2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoCFEType6] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoCFEType6, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_IdDoc_CompFiscFormat extends scalaxb.ElemNameParser[uy.com.dgi.IdDoc_CompFisc] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("IdDoc_CompFisc")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.IdDoc_CompFisc] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoCFE")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Nro")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.IdDoc_CompFisc(scalaxb.fromXML[uy.com.dgi.TipoCFEType6](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.IdDoc_CompFisc, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipoCFEType6](__obj.TipoCFE, Some("http://cfe.dgi.gub.uy"), Some("TipoCFE"), __scope, false),
        scalaxb.toXML[String](__obj.Serie, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Nro, Some("http://cfe.dgi.gub.uy"), Some("Nro"), __scope, false))

  }

  def buildUycomdgi_TipoCFEType7Format = new DefaultUycomdgi_TipoCFEType7Format {}
  trait DefaultUycomdgi_TipoCFEType7Format extends scalaxb.XMLFormat[uy.com.dgi.TipoCFEType7] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoCFEType7 = scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("151")) => uy.com.dgi.Number151Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("152")) => uy.com.dgi.Number152Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("153")) => uy.com.dgi.Number153Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("251")) => uy.com.dgi.Number251Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("252")) => uy.com.dgi.Number252Value
      case x: uy.com.dgi.CFEType if x == scalaxb.fromXML[uy.com.dgi.CFEType](scala.xml.Text("253")) => uy.com.dgi.Number253Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoCFEType7] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoCFEType7, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_MntBrutoType3Format = new DefaultUycomdgi_MntBrutoType3Format {}
  trait DefaultUycomdgi_MntBrutoType3Format extends scalaxb.XMLFormat[uy.com.dgi.MntBrutoType3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.MntBrutoType3 = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value22
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value17
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3Value9

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.MntBrutoType3] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.MntBrutoType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_FmaPagoType3Format = new DefaultUycomdgi_FmaPagoType3Format {}
  trait DefaultUycomdgi_FmaPagoType3Format extends scalaxb.XMLFormat[uy.com.dgi.FmaPagoType3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.FmaPagoType3 = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value23
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value18

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.FmaPagoType3] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.FmaPagoType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_IdDoc_BoletaFormat extends scalaxb.ElemNameParser[uy.com.dgi.IdDoc_Boleta] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("IdDoc_Boleta")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.IdDoc_Boleta] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoCFE")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Nro")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchEmis")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PeriodoDesde")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PeriodoHasta")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntBruto")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FmaPago")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FchVenc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalDoc")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      uy.com.dgi.IdDoc_Boleta(scalaxb.fromXML[uy.com.dgi.TipoCFEType7](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[uy.com.dgi.MntBrutoType3](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.FmaPagoType3](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.IdDoc_Boleta, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipoCFEType7](__obj.TipoCFE, Some("http://cfe.dgi.gub.uy"), Some("TipoCFE"), __scope, false),
        scalaxb.toXML[String](__obj.Serie, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Nro, Some("http://cfe.dgi.gub.uy"), Some("Nro"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.FchEmis, Some("http://cfe.dgi.gub.uy"), Some("FchEmis"), __scope, false),
        __obj.PeriodoDesde map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("PeriodoDesde"), __scope, false) } getOrElse {Nil},
        __obj.PeriodoHasta map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("PeriodoHasta"), __scope, false) } getOrElse {Nil},
        __obj.MntBruto map { scalaxb.toXML[uy.com.dgi.MntBrutoType3](_, Some("http://cfe.dgi.gub.uy"), Some("MntBruto"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.FmaPagoType3](__obj.FmaPago, Some("http://cfe.dgi.gub.uy"), Some("FmaPago"), __scope, false),
        __obj.FchVenc map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("FchVenc"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicionalDoc map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalDoc"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_CodItemFormat extends scalaxb.ElemNameParser[uy.com.dgi.CodItem] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CodItem] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCod")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cod")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.CodItem(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.CodItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TpoCod, Some("http://cfe.dgi.gub.uy"), Some("TpoCod"), __scope, false),
        scalaxb.toXML[String](__obj.Cod, Some("http://cfe.dgi.gub.uy"), Some("Cod"), __scope, false))

  }

  def buildUycomdgi_IndFactFormat = new DefaultUycomdgi_IndFactFormat {}
  trait DefaultUycomdgi_IndFactFormat extends scalaxb.XMLFormat[uy.com.dgi.IndFact] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndFact = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("5")) => uy.com.dgi.Number5Value2
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("6")) => uy.com.dgi.Number6Value3
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("7")) => uy.com.dgi.Number7Value3
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("10")) => uy.com.dgi.Number10Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndFact] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndFact, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_DescTipoFormat = new DefaultUycomdgi_DescTipoFormat {}
  trait DefaultUycomdgi_DescTipoFormat extends scalaxb.XMLFormat[uy.com.dgi.DescTipo] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.DescTipo = scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("1")) => uy.com.dgi.Number1Value24
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("2")) => uy.com.dgi.Number2Value19

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.DescTipo] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.DescTipo, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_SubDescuentoFormat extends scalaxb.ElemNameParser[uy.com.dgi.SubDescuento] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SubDescuento] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescTipo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescVal")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.SubDescuento(scalaxb.fromXML[uy.com.dgi.DescTipo](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.SubDescuento, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.DescTipo](__obj.DescTipo, Some("http://cfe.dgi.gub.uy"), Some("DescTipo"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.DescVal, Some("http://cfe.dgi.gub.uy"), Some("DescVal"), __scope, false))

  }

  def buildUycomdgi_RecargoTipoFormat = new DefaultUycomdgi_RecargoTipoFormat {}
  trait DefaultUycomdgi_RecargoTipoFormat extends scalaxb.XMLFormat[uy.com.dgi.RecargoTipo] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.RecargoTipo = scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("1")) => uy.com.dgi.Number1Value25
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("2")) => uy.com.dgi.Number2Value20

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.RecargoTipo] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.RecargoTipo, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_SubRecargoFormat extends scalaxb.ElemNameParser[uy.com.dgi.SubRecargo] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SubRecargo] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoTipo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoVal")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.SubRecargo(scalaxb.fromXML[uy.com.dgi.RecargoTipo](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.SubRecargo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.RecargoTipo](__obj.RecargoTipo, Some("http://cfe.dgi.gub.uy"), Some("RecargoTipo"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.RecargoVal, Some("http://cfe.dgi.gub.uy"), Some("RecargoVal"), __scope, false))

  }

  trait DefaultUycomdgi_Item_Det_Fact_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.Item_Det_Fact_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Item_Det_Fact_Exp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Item_Det_Fact_Exp] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinDet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodItem")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndFact")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NomItem")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscItem")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cantidad")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "UniMed")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PrecioUnitario")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescuentoPct")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescuentoMonto")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubDescuento")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoPct")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoMnt")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubRecargo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MontoItem")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      uy.com.dgi.Item_Det_Fact_Exp(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[uy.com.dgi.CodItem](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.IndFact](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[uy.com.dgi.SubDescuento](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[uy.com.dgi.SubRecargo](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p15, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Item_Det_Fact_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinDet, Some("http://cfe.dgi.gub.uy"), Some("NroLinDet"), __scope, false),
        __obj.CodItem flatMap { scalaxb.toXML[uy.com.dgi.CodItem](_, Some("http://cfe.dgi.gub.uy"), Some("CodItem"), __scope, false) },
        scalaxb.toXML[uy.com.dgi.IndFact](__obj.IndFact, Some("http://cfe.dgi.gub.uy"), Some("IndFact"), __scope, false),
        scalaxb.toXML[String](__obj.NomItem, Some("http://cfe.dgi.gub.uy"), Some("NomItem"), __scope, false),
        __obj.DscItem map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DscItem"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.Cantidad, Some("http://cfe.dgi.gub.uy"), Some("Cantidad"), __scope, false),
        scalaxb.toXML[String](__obj.UniMed, Some("http://cfe.dgi.gub.uy"), Some("UniMed"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.PrecioUnitario, Some("http://cfe.dgi.gub.uy"), Some("PrecioUnitario"), __scope, false),
        __obj.DescuentoPct map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("DescuentoPct"), __scope, false) } getOrElse {Nil},
        __obj.DescuentoMonto map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("DescuentoMonto"), __scope, false) } getOrElse {Nil},
        __obj.SubDescuento flatMap { scalaxb.toXML[uy.com.dgi.SubDescuento](_, Some("http://cfe.dgi.gub.uy"), Some("SubDescuento"), __scope, false) },
        __obj.RecargoPct map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("RecargoPct"), __scope, false) } getOrElse {Nil},
        __obj.RecargoMnt map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("RecargoMnt"), __scope, false) } getOrElse {Nil},
        __obj.SubRecargo flatMap { scalaxb.toXML[uy.com.dgi.SubRecargo](_, Some("http://cfe.dgi.gub.uy"), Some("SubRecargo"), __scope, false) },
        scalaxb.toXML[BigDecimal](__obj.MontoItem, Some("http://cfe.dgi.gub.uy"), Some("MontoItem"), __scope, false))

  }

  trait DefaultUycomdgi_CodItem2Format extends scalaxb.ElemNameParser[uy.com.dgi.CodItem2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CodItem2] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCod")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cod")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.CodItem2(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.CodItem2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TpoCod, Some("http://cfe.dgi.gub.uy"), Some("TpoCod"), __scope, false),
        scalaxb.toXML[String](__obj.Cod, Some("http://cfe.dgi.gub.uy"), Some("Cod"), __scope, false))

  }

  def buildUycomdgi_IndFactTypeFormat = new DefaultUycomdgi_IndFactTypeFormat {}
  trait DefaultUycomdgi_IndFactTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.IndFactType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndFactType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value26
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value21
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3Value10
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("4")) => uy.com.dgi.Number4Value5
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("5")) => uy.com.dgi.Number5Value3
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("6")) => uy.com.dgi.Number6Value4
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("7")) => uy.com.dgi.Number7Value4
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("10")) => uy.com.dgi.Number10Value2
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("11")) => uy.com.dgi.Number11Value
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("12")) => uy.com.dgi.Number12Value
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("16")) => uy.com.dgi.Number16Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndFactType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndFactType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndAgenteRespFormat = new DefaultUycomdgi_IndAgenteRespFormat {}
  trait DefaultUycomdgi_IndAgenteRespFormat extends scalaxb.XMLFormat[uy.com.dgi.IndAgenteResp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndAgenteResp = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R")) => uy.com.dgi.RValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("A")) => uy.com.dgi.A

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndAgenteResp] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndAgenteResp, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_DescTipoTypeFormat = new DefaultUycomdgi_DescTipoTypeFormat {}
  trait DefaultUycomdgi_DescTipoTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.DescTipoType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.DescTipoType = scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("1")) => uy.com.dgi.Number1Value27
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("2")) => uy.com.dgi.Number2Value22

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.DescTipoType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.DescTipoType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_SubDescuento2Format extends scalaxb.ElemNameParser[uy.com.dgi.SubDescuento2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SubDescuento2] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescTipo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescVal")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.SubDescuento2(scalaxb.fromXML[uy.com.dgi.DescTipoType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.SubDescuento2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.DescTipoType](__obj.DescTipo, Some("http://cfe.dgi.gub.uy"), Some("DescTipo"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.DescVal, Some("http://cfe.dgi.gub.uy"), Some("DescVal"), __scope, false))

  }

  def buildUycomdgi_RecargoTipoTypeFormat = new DefaultUycomdgi_RecargoTipoTypeFormat {}
  trait DefaultUycomdgi_RecargoTipoTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.RecargoTipoType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.RecargoTipoType = scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("1")) => uy.com.dgi.Number1Value28
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("2")) => uy.com.dgi.Number2Value23

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.RecargoTipoType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.RecargoTipoType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_SubRecargo2Format extends scalaxb.ElemNameParser[uy.com.dgi.SubRecargo2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SubRecargo2] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoTipo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoVal")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.SubRecargo2(scalaxb.fromXML[uy.com.dgi.RecargoTipoType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.SubRecargo2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.RecargoTipoType](__obj.RecargoTipo, Some("http://cfe.dgi.gub.uy"), Some("RecargoTipo"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.RecargoVal, Some("http://cfe.dgi.gub.uy"), Some("RecargoVal"), __scope, false))

  }

  trait DefaultUycomdgi_Item_Det_FactFormat extends scalaxb.ElemNameParser[uy.com.dgi.Item_Det_Fact] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Item_Det_Fact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Item_Det_Fact] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinDet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodItem")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndFact")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndAgenteResp")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NomItem")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscItem")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cantidad")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "UniMed")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PrecioUnitario")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescuentoPct")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescuentoMonto")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubDescuento")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoPct")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoMnt")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubRecargo")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RetencPercep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MontoItem")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      uy.com.dgi.Item_Det_Fact(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[uy.com.dgi.CodItem2](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.IndFactType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.IndAgenteResp](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[uy.com.dgi.SubDescuento2](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[uy.com.dgi.SubRecargo2](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[uy.com.dgi.RetPerc](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p17, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Item_Det_Fact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinDet, Some("http://cfe.dgi.gub.uy"), Some("NroLinDet"), __scope, false),
        __obj.CodItem flatMap { scalaxb.toXML[uy.com.dgi.CodItem2](_, Some("http://cfe.dgi.gub.uy"), Some("CodItem"), __scope, false) },
        scalaxb.toXML[uy.com.dgi.IndFactType](__obj.IndFact, Some("http://cfe.dgi.gub.uy"), Some("IndFact"), __scope, false),
        __obj.IndAgenteResp map { scalaxb.toXML[uy.com.dgi.IndAgenteResp](_, Some("http://cfe.dgi.gub.uy"), Some("IndAgenteResp"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.NomItem, Some("http://cfe.dgi.gub.uy"), Some("NomItem"), __scope, false),
        __obj.DscItem map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DscItem"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.Cantidad, Some("http://cfe.dgi.gub.uy"), Some("Cantidad"), __scope, false),
        scalaxb.toXML[String](__obj.UniMed, Some("http://cfe.dgi.gub.uy"), Some("UniMed"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.PrecioUnitario, Some("http://cfe.dgi.gub.uy"), Some("PrecioUnitario"), __scope, false),
        __obj.DescuentoPct map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("DescuentoPct"), __scope, false) } getOrElse {Nil},
        __obj.DescuentoMonto map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("DescuentoMonto"), __scope, false) } getOrElse {Nil},
        __obj.SubDescuento flatMap { scalaxb.toXML[uy.com.dgi.SubDescuento2](_, Some("http://cfe.dgi.gub.uy"), Some("SubDescuento"), __scope, false) },
        __obj.RecargoPct map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("RecargoPct"), __scope, false) } getOrElse {Nil},
        __obj.RecargoMnt map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("RecargoMnt"), __scope, false) } getOrElse {Nil},
        __obj.SubRecargo flatMap { scalaxb.toXML[uy.com.dgi.SubRecargo2](_, Some("http://cfe.dgi.gub.uy"), Some("SubRecargo"), __scope, false) },
        __obj.RetencPercep flatMap { scalaxb.toXML[uy.com.dgi.RetPerc](_, Some("http://cfe.dgi.gub.uy"), Some("RetencPercep"), __scope, false) },
        scalaxb.toXML[BigDecimal](__obj.MontoItem, Some("http://cfe.dgi.gub.uy"), Some("MontoItem"), __scope, false))

  }

  trait DefaultUycomdgi_CodItem3Format extends scalaxb.ElemNameParser[uy.com.dgi.CodItem3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CodItem3] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCod")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cod")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.CodItem3(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.CodItem3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TpoCod, Some("http://cfe.dgi.gub.uy"), Some("TpoCod"), __scope, false),
        scalaxb.toXML[String](__obj.Cod, Some("http://cfe.dgi.gub.uy"), Some("Cod"), __scope, false))

  }

  def buildUycomdgi_IndFactType2Format = new DefaultUycomdgi_IndFactType2Format {}
  trait DefaultUycomdgi_IndFactType2Format extends scalaxb.XMLFormat[uy.com.dgi.IndFactType2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndFactType2 = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("5")) => uy.com.dgi.Number5Value4
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("8")) => uy.com.dgi.Number8Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndFactType2] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndFactType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_Item_Rem_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.Item_Rem_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Item_Rem_Exp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Item_Rem_Exp] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinDet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodItem")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndFact")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NomItem")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscItem")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cantidad")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "UniMed")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PrecioUnitario")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MontoItem")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      uy.com.dgi.Item_Rem_Exp(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[uy.com.dgi.CodItem3](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.IndFactType2](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p9, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Item_Rem_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinDet, Some("http://cfe.dgi.gub.uy"), Some("NroLinDet"), __scope, false),
        __obj.CodItem flatMap { scalaxb.toXML[uy.com.dgi.CodItem3](_, Some("http://cfe.dgi.gub.uy"), Some("CodItem"), __scope, false) },
        __obj.IndFact map { scalaxb.toXML[uy.com.dgi.IndFactType2](_, Some("http://cfe.dgi.gub.uy"), Some("IndFact"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.NomItem, Some("http://cfe.dgi.gub.uy"), Some("NomItem"), __scope, false),
        __obj.DscItem map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DscItem"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.Cantidad, Some("http://cfe.dgi.gub.uy"), Some("Cantidad"), __scope, false),
        scalaxb.toXML[String](__obj.UniMed, Some("http://cfe.dgi.gub.uy"), Some("UniMed"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.PrecioUnitario, Some("http://cfe.dgi.gub.uy"), Some("PrecioUnitario"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.MontoItem, Some("http://cfe.dgi.gub.uy"), Some("MontoItem"), __scope, false))

  }

  trait DefaultUycomdgi_CodItem4Format extends scalaxb.ElemNameParser[uy.com.dgi.CodItem4] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CodItem4] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCod")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cod")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.CodItem4(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.CodItem4, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TpoCod, Some("http://cfe.dgi.gub.uy"), Some("TpoCod"), __scope, false),
        scalaxb.toXML[String](__obj.Cod, Some("http://cfe.dgi.gub.uy"), Some("Cod"), __scope, false))

  }

  def buildUycomdgi_IndFactType3Format = new DefaultUycomdgi_IndFactType3Format {}
  trait DefaultUycomdgi_IndFactType3Format extends scalaxb.XMLFormat[uy.com.dgi.IndFactType3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndFactType3 = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("8")) => uy.com.dgi.Number8Value2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndFactType3] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndFactType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_Item_RemFormat extends scalaxb.ElemNameParser[uy.com.dgi.Item_Rem] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Item_Rem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Item_Rem] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinDet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodItem")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndFact")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NomItem")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscItem")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cantidad")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "UniMed")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      uy.com.dgi.Item_Rem(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[uy.com.dgi.CodItem4](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.IndFactType3](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Item_Rem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinDet, Some("http://cfe.dgi.gub.uy"), Some("NroLinDet"), __scope, false),
        __obj.CodItem flatMap { scalaxb.toXML[uy.com.dgi.CodItem4](_, Some("http://cfe.dgi.gub.uy"), Some("CodItem"), __scope, false) },
        __obj.IndFact map { scalaxb.toXML[uy.com.dgi.IndFactType3](_, Some("http://cfe.dgi.gub.uy"), Some("IndFact"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.NomItem, Some("http://cfe.dgi.gub.uy"), Some("NomItem"), __scope, false),
        __obj.DscItem map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DscItem"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.Cantidad, Some("http://cfe.dgi.gub.uy"), Some("Cantidad"), __scope, false),
        scalaxb.toXML[String](__obj.UniMed, Some("http://cfe.dgi.gub.uy"), Some("UniMed"), __scope, false))

  }

  def buildUycomdgi_IndFactType4Format = new DefaultUycomdgi_IndFactType4Format {}
  trait DefaultUycomdgi_IndFactType4Format extends scalaxb.XMLFormat[uy.com.dgi.IndFactType4] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndFactType4 = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("9")) => uy.com.dgi.Number9Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndFactType4] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndFactType4, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_Item_ResgFormat extends scalaxb.ElemNameParser[uy.com.dgi.Item_Resg] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Item_Resg")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Item_Resg] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinDet")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndFact")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RetencPercep")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.Item_Resg(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.IndFactType4](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[uy.com.dgi.RetPerc_Resg](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Item_Resg, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinDet, Some("http://cfe.dgi.gub.uy"), Some("NroLinDet"), __scope, false),
        __obj.IndFact map { scalaxb.toXML[uy.com.dgi.IndFactType4](_, Some("http://cfe.dgi.gub.uy"), Some("IndFact"), __scope, false) } getOrElse {Nil},
        __obj.RetencPercep flatMap { scalaxb.toXML[uy.com.dgi.RetPerc_Resg](_, Some("http://cfe.dgi.gub.uy"), Some("RetencPercep"), __scope, false) })

  }

  trait DefaultUycomdgi_CodItem5Format extends scalaxb.ElemNameParser[uy.com.dgi.CodItem5] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CodItem5] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCod")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cod")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.CodItem5(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.CodItem5, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TpoCod, Some("http://cfe.dgi.gub.uy"), Some("TpoCod"), __scope, false),
        scalaxb.toXML[String](__obj.Cod, Some("http://cfe.dgi.gub.uy"), Some("Cod"), __scope, false))

  }

  def buildUycomdgi_IndFactType5Format = new DefaultUycomdgi_IndFactType5Format {}
  trait DefaultUycomdgi_IndFactType5Format extends scalaxb.XMLFormat[uy.com.dgi.IndFactType5] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndFactType5 = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("5")) => uy.com.dgi.Number5Value5
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("6")) => uy.com.dgi.Number6Value5
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("7")) => uy.com.dgi.Number7Value5
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("12")) => uy.com.dgi.Number12Value2
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("13")) => uy.com.dgi.Number13Value
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("14")) => uy.com.dgi.Number14Value
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("15")) => uy.com.dgi.Number15Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndFactType5] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndFactType5, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndAgenteRespTypeFormat = new DefaultUycomdgi_IndAgenteRespTypeFormat {}
  trait DefaultUycomdgi_IndAgenteRespTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.IndAgenteRespType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndAgenteRespType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R")) => uy.com.dgi.RValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("A")) => uy.com.dgi.AValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndAgenteRespType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndAgenteRespType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_DescTipoType2Format = new DefaultUycomdgi_DescTipoType2Format {}
  trait DefaultUycomdgi_DescTipoType2Format extends scalaxb.XMLFormat[uy.com.dgi.DescTipoType2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.DescTipoType2 = scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("1")) => uy.com.dgi.Number1Value29
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("2")) => uy.com.dgi.Number2Value24

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.DescTipoType2] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.DescTipoType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_SubDescuento3Format extends scalaxb.ElemNameParser[uy.com.dgi.SubDescuento3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SubDescuento3] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescTipo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescVal")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.SubDescuento3(scalaxb.fromXML[uy.com.dgi.DescTipoType2](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.SubDescuento3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.DescTipoType2](__obj.DescTipo, Some("http://cfe.dgi.gub.uy"), Some("DescTipo"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.DescVal, Some("http://cfe.dgi.gub.uy"), Some("DescVal"), __scope, false))

  }

  def buildUycomdgi_RecargoTipoType2Format = new DefaultUycomdgi_RecargoTipoType2Format {}
  trait DefaultUycomdgi_RecargoTipoType2Format extends scalaxb.XMLFormat[uy.com.dgi.RecargoTipoType2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.RecargoTipoType2 = scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text(value)) match {
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("1")) => uy.com.dgi.Number1Value30
      case x: uy.com.dgi.TipoDRType if x == scalaxb.fromXML[uy.com.dgi.TipoDRType](scala.xml.Text("2")) => uy.com.dgi.Number2Value25

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.RecargoTipoType2] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.RecargoTipoType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_SubRecargo3Format extends scalaxb.ElemNameParser[uy.com.dgi.SubRecargo3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SubRecargo3] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoTipo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoVal")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.SubRecargo3(scalaxb.fromXML[uy.com.dgi.RecargoTipoType2](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.SubRecargo3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.RecargoTipoType2](__obj.RecargoTipo, Some("http://cfe.dgi.gub.uy"), Some("RecargoTipo"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.RecargoVal, Some("http://cfe.dgi.gub.uy"), Some("RecargoVal"), __scope, false))

  }

  trait DefaultUycomdgi_Item_Det_BoletaFormat extends scalaxb.ElemNameParser[uy.com.dgi.Item_Det_Boleta] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Item_Det_Boleta")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Item_Det_Boleta] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinDet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodItem")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndFact")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndAgenteResp")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NomItem")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DscItem")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Cantidad")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "UniMed")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PrecioUnitario")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescuentoPct")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DescuentoMonto")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubDescuento")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoPct")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RecargoMnt")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "SubRecargo")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RetencPercep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MontoItem")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      uy.com.dgi.Item_Det_Boleta(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[uy.com.dgi.CodItem5](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.IndFactType5](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.IndAgenteRespType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[uy.com.dgi.SubDescuento3](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[uy.com.dgi.SubRecargo3](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[uy.com.dgi.RetPerc](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p17, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Item_Det_Boleta, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinDet, Some("http://cfe.dgi.gub.uy"), Some("NroLinDet"), __scope, false),
        __obj.CodItem flatMap { scalaxb.toXML[uy.com.dgi.CodItem5](_, Some("http://cfe.dgi.gub.uy"), Some("CodItem"), __scope, false) },
        scalaxb.toXML[uy.com.dgi.IndFactType5](__obj.IndFact, Some("http://cfe.dgi.gub.uy"), Some("IndFact"), __scope, false),
        __obj.IndAgenteResp map { scalaxb.toXML[uy.com.dgi.IndAgenteRespType](_, Some("http://cfe.dgi.gub.uy"), Some("IndAgenteResp"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.NomItem, Some("http://cfe.dgi.gub.uy"), Some("NomItem"), __scope, false),
        __obj.DscItem map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DscItem"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.Cantidad, Some("http://cfe.dgi.gub.uy"), Some("Cantidad"), __scope, false),
        scalaxb.toXML[String](__obj.UniMed, Some("http://cfe.dgi.gub.uy"), Some("UniMed"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.PrecioUnitario, Some("http://cfe.dgi.gub.uy"), Some("PrecioUnitario"), __scope, false),
        __obj.DescuentoPct map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("DescuentoPct"), __scope, false) } getOrElse {Nil},
        __obj.DescuentoMonto map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("DescuentoMonto"), __scope, false) } getOrElse {Nil},
        __obj.SubDescuento flatMap { scalaxb.toXML[uy.com.dgi.SubDescuento3](_, Some("http://cfe.dgi.gub.uy"), Some("SubDescuento"), __scope, false) },
        __obj.RecargoPct map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("RecargoPct"), __scope, false) } getOrElse {Nil},
        __obj.RecargoMnt map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("RecargoMnt"), __scope, false) } getOrElse {Nil},
        __obj.SubRecargo flatMap { scalaxb.toXML[uy.com.dgi.SubRecargo3](_, Some("http://cfe.dgi.gub.uy"), Some("SubRecargo"), __scope, false) },
        __obj.RetencPercep flatMap { scalaxb.toXML[uy.com.dgi.RetPerc](_, Some("http://cfe.dgi.gub.uy"), Some("RetencPercep"), __scope, false) },
        scalaxb.toXML[BigDecimal](__obj.MontoItem, Some("http://cfe.dgi.gub.uy"), Some("MontoItem"), __scope, false))

  }

  trait DefaultUycomdgi_MedioPagoFormat extends scalaxb.ElemNameParser[uy.com.dgi.MedioPago] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.MedioPago] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinMP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodMP")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "GlosaMP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "OrdenMP")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ValorPago")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      uy.com.dgi.MedioPago(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.MedioPago, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinMP, Some("http://cfe.dgi.gub.uy"), Some("NroLinMP"), __scope, false),
        __obj.CodMP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CodMP"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.GlosaMP, Some("http://cfe.dgi.gub.uy"), Some("GlosaMP"), __scope, false),
        __obj.OrdenMP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("OrdenMP"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.ValorPago, Some("http://cfe.dgi.gub.uy"), Some("ValorPago"), __scope, false))

  }

  trait DefaultUycomdgi_MediosPagoFormat extends scalaxb.ElemNameParser[uy.com.dgi.MediosPago] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("MediosPago")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.MediosPago] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MedioPago")) ^^
      { case p1 =>
      uy.com.dgi.MediosPago(p1 map { scalaxb.fromXML[uy.com.dgi.MedioPago](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.MediosPago, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.MedioPago flatMap { scalaxb.toXML[uy.com.dgi.MedioPago](_, Some("http://cfe.dgi.gub.uy"), Some("MedioPago"), __scope, false) })

  }

  trait DefaultUycomdgi_Receptor_FactFormat extends scalaxb.ElemNameParser[uy.com.dgi.Receptor_Fact] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Receptor_Fact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Receptor_Fact] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DirRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CiudadRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DeptoRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PaisRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicional")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "LugarDestEnt")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CompraID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      uy.com.dgi.Receptor_Fact(scalaxb.fromXML[uy.com.dgi.DocType](scala.xml.Text("2"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.CodPaisType](scala.xml.Text("UY"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Receptor_Fact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.DocType](__obj.TipoDocRecep, Some("http://cfe.dgi.gub.uy"), Some("TipoDocRecep"), __scope, false),
        scalaxb.toXML[uy.com.dgi.CodPaisType](__obj.CodPaisRecep, Some("http://cfe.dgi.gub.uy"), Some("CodPaisRecep"), __scope, false),
        scalaxb.toXML[String](__obj.DocRecep, Some("http://cfe.dgi.gub.uy"), Some("DocRecep"), __scope, false),
        scalaxb.toXML[String](__obj.RznSocRecep, Some("http://cfe.dgi.gub.uy"), Some("RznSocRecep"), __scope, false),
        scalaxb.toXML[String](__obj.DirRecep, Some("http://cfe.dgi.gub.uy"), Some("DirRecep"), __scope, false),
        scalaxb.toXML[String](__obj.CiudadRecep, Some("http://cfe.dgi.gub.uy"), Some("CiudadRecep"), __scope, false),
        __obj.DeptoRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DeptoRecep"), __scope, false) } getOrElse {Nil},
        __obj.PaisRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("PaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.CP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CP"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicional map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicional"), __scope, false) } getOrElse {Nil},
        __obj.LugarDestEnt map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("LugarDestEnt"), __scope, false) } getOrElse {Nil},
        __obj.CompraID map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CompraID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_Receptor_Fact_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.Receptor_Fact_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Receptor_Fact_Exp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Receptor_Fact_Exp] =
      phrase(opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisRecep")) ~ 
      opt(((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecep")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecepExt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DirRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CiudadRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DeptoRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PaisRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicional")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "LugarDestEnt")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CompraID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      uy.com.dgi.Receptor_Fact_Exp(p1.headOption map { scalaxb.fromXML[uy.com.dgi.DocType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.CodPaisType](_, scalaxb.ElemName(node) :: stack) },
        p3,
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Receptor_Fact_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TipoDocRecep map { scalaxb.toXML[uy.com.dgi.DocType](_, Some("http://cfe.dgi.gub.uy"), Some("TipoDocRecep"), __scope, false) } getOrElse {Nil},
        __obj.CodPaisRecep map { scalaxb.toXML[uy.com.dgi.CodPaisType](_, Some("http://cfe.dgi.gub.uy"), Some("CodPaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.receptor_fact_expoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.RznSocRecep, Some("http://cfe.dgi.gub.uy"), Some("RznSocRecep"), __scope, false),
        scalaxb.toXML[String](__obj.DirRecep, Some("http://cfe.dgi.gub.uy"), Some("DirRecep"), __scope, false),
        scalaxb.toXML[String](__obj.CiudadRecep, Some("http://cfe.dgi.gub.uy"), Some("CiudadRecep"), __scope, false),
        scalaxb.toXML[String](__obj.DeptoRecep, Some("http://cfe.dgi.gub.uy"), Some("DeptoRecep"), __scope, false),
        scalaxb.toXML[String](__obj.PaisRecep, Some("http://cfe.dgi.gub.uy"), Some("PaisRecep"), __scope, false),
        __obj.CP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CP"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicional map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicional"), __scope, false) } getOrElse {Nil},
        __obj.LugarDestEnt map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("LugarDestEnt"), __scope, false) } getOrElse {Nil},
        __obj.CompraID map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CompraID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_Receptor_RemFormat extends scalaxb.ElemNameParser[uy.com.dgi.Receptor_Rem] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Receptor_Rem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Receptor_Rem] =
      phrase(opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisRecep")) ~ 
      opt(((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecep")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecepExt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DirRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CiudadRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DeptoRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PaisRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicional")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "LugarDestEnt")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CompraID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      uy.com.dgi.Receptor_Rem(p1.headOption map { scalaxb.fromXML[uy.com.dgi.DocType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.CodPaisType](_, scalaxb.ElemName(node) :: stack) },
        p3,
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Receptor_Rem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TipoDocRecep map { scalaxb.toXML[uy.com.dgi.DocType](_, Some("http://cfe.dgi.gub.uy"), Some("TipoDocRecep"), __scope, false) } getOrElse {Nil},
        __obj.CodPaisRecep map { scalaxb.toXML[uy.com.dgi.CodPaisType](_, Some("http://cfe.dgi.gub.uy"), Some("CodPaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.receptor_remoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.RznSocRecep, Some("http://cfe.dgi.gub.uy"), Some("RznSocRecep"), __scope, false),
        scalaxb.toXML[String](__obj.DirRecep, Some("http://cfe.dgi.gub.uy"), Some("DirRecep"), __scope, false),
        scalaxb.toXML[String](__obj.CiudadRecep, Some("http://cfe.dgi.gub.uy"), Some("CiudadRecep"), __scope, false),
        __obj.DeptoRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DeptoRecep"), __scope, false) } getOrElse {Nil},
        __obj.PaisRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("PaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.CP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CP"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicional map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicional"), __scope, false) } getOrElse {Nil},
        __obj.LugarDestEnt map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("LugarDestEnt"), __scope, false) } getOrElse {Nil},
        __obj.CompraID map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CompraID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_Receptor_Rem_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.Receptor_Rem_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Receptor_Rem_Exp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Receptor_Rem_Exp] =
      phrase(opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisRecep")) ~ 
      opt(((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecep")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecepExt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DirRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CiudadRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DeptoRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PaisRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicional")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "LugarDestEnt")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CompraID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      uy.com.dgi.Receptor_Rem_Exp(p1.headOption map { scalaxb.fromXML[uy.com.dgi.DocType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.CodPaisType](_, scalaxb.ElemName(node) :: stack) },
        p3,
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Receptor_Rem_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TipoDocRecep map { scalaxb.toXML[uy.com.dgi.DocType](_, Some("http://cfe.dgi.gub.uy"), Some("TipoDocRecep"), __scope, false) } getOrElse {Nil},
        __obj.CodPaisRecep map { scalaxb.toXML[uy.com.dgi.CodPaisType](_, Some("http://cfe.dgi.gub.uy"), Some("CodPaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.receptor_rem_expoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.RznSocRecep, Some("http://cfe.dgi.gub.uy"), Some("RznSocRecep"), __scope, false),
        scalaxb.toXML[String](__obj.DirRecep, Some("http://cfe.dgi.gub.uy"), Some("DirRecep"), __scope, false),
        scalaxb.toXML[String](__obj.CiudadRecep, Some("http://cfe.dgi.gub.uy"), Some("CiudadRecep"), __scope, false),
        scalaxb.toXML[String](__obj.DeptoRecep, Some("http://cfe.dgi.gub.uy"), Some("DeptoRecep"), __scope, false),
        scalaxb.toXML[String](__obj.PaisRecep, Some("http://cfe.dgi.gub.uy"), Some("PaisRecep"), __scope, false),
        __obj.CP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CP"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicional map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicional"), __scope, false) } getOrElse {Nil},
        __obj.LugarDestEnt map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("LugarDestEnt"), __scope, false) } getOrElse {Nil},
        __obj.CompraID map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CompraID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_Receptor_ResgFormat extends scalaxb.ElemNameParser[uy.com.dgi.Receptor_Resg] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Receptor_Resg")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Receptor_Resg] =
      phrase(opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisRecep")) ~ 
      opt(((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecep")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecepExt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DirRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CiudadRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DeptoRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PaisRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicional")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      uy.com.dgi.Receptor_Resg(p1.headOption map { scalaxb.fromXML[uy.com.dgi.DocType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.CodPaisType](_, scalaxb.ElemName(node) :: stack) },
        p3,
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Receptor_Resg, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TipoDocRecep map { scalaxb.toXML[uy.com.dgi.DocType](_, Some("http://cfe.dgi.gub.uy"), Some("TipoDocRecep"), __scope, false) } getOrElse {Nil},
        __obj.CodPaisRecep map { scalaxb.toXML[uy.com.dgi.CodPaisType](_, Some("http://cfe.dgi.gub.uy"), Some("CodPaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.receptor_resgoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.RznSocRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("RznSocRecep"), __scope, false) } getOrElse {Nil},
        __obj.DirRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DirRecep"), __scope, false) } getOrElse {Nil},
        __obj.CiudadRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CiudadRecep"), __scope, false) } getOrElse {Nil},
        __obj.DeptoRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DeptoRecep"), __scope, false) } getOrElse {Nil},
        __obj.PaisRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("PaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.CP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CP"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicional map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicional"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_Receptor_TckFormat extends scalaxb.ElemNameParser[uy.com.dgi.Receptor_Tck] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Receptor_Tck")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Receptor_Tck] =
      phrase(opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisRecep")) ~ 
      opt(((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecep")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecepExt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DirRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CiudadRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DeptoRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PaisRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicional")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "LugarDestEnt")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CompraID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      uy.com.dgi.Receptor_Tck(p1.headOption map { scalaxb.fromXML[uy.com.dgi.DocType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.CodPaisType](_, scalaxb.ElemName(node) :: stack) },
        p3,
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Receptor_Tck, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TipoDocRecep map { scalaxb.toXML[uy.com.dgi.DocType](_, Some("http://cfe.dgi.gub.uy"), Some("TipoDocRecep"), __scope, false) } getOrElse {Nil},
        __obj.CodPaisRecep map { scalaxb.toXML[uy.com.dgi.CodPaisType](_, Some("http://cfe.dgi.gub.uy"), Some("CodPaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.receptor_tckoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.RznSocRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("RznSocRecep"), __scope, false) } getOrElse {Nil},
        __obj.DirRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DirRecep"), __scope, false) } getOrElse {Nil},
        __obj.CiudadRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CiudadRecep"), __scope, false) } getOrElse {Nil},
        __obj.DeptoRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DeptoRecep"), __scope, false) } getOrElse {Nil},
        __obj.PaisRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("PaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.CP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CP"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicional map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicional"), __scope, false) } getOrElse {Nil},
        __obj.LugarDestEnt map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("LugarDestEnt"), __scope, false) } getOrElse {Nil},
        __obj.CompraID map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CompraID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_Receptor_BoletaFormat extends scalaxb.ElemNameParser[uy.com.dgi.Receptor_Boleta] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Receptor_Boleta")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Receptor_Boleta] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodPaisRecep")) ~ 
      opt(((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecep")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocRecepExt")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RznSocRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DirRecep")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CiudadRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DeptoRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "PaisRecep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CP")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicional")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "LugarDestEnt")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CompraID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      uy.com.dgi.Receptor_Boleta(scalaxb.fromXML[uy.com.dgi.DocType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.CodPaisType](p2, scalaxb.ElemName(node) :: stack),
        p3,
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Receptor_Boleta, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.DocType](__obj.TipoDocRecep, Some("http://cfe.dgi.gub.uy"), Some("TipoDocRecep"), __scope, false),
        scalaxb.toXML[uy.com.dgi.CodPaisType](__obj.CodPaisRecep, Some("http://cfe.dgi.gub.uy"), Some("CodPaisRecep"), __scope, false),
        __obj.receptor_boletaoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.RznSocRecep, Some("http://cfe.dgi.gub.uy"), Some("RznSocRecep"), __scope, false),
        scalaxb.toXML[String](__obj.DirRecep, Some("http://cfe.dgi.gub.uy"), Some("DirRecep"), __scope, false),
        scalaxb.toXML[String](__obj.CiudadRecep, Some("http://cfe.dgi.gub.uy"), Some("CiudadRecep"), __scope, false),
        __obj.DeptoRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("DeptoRecep"), __scope, false) } getOrElse {Nil},
        __obj.PaisRecep map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("PaisRecep"), __scope, false) } getOrElse {Nil},
        __obj.CP map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("CP"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicional map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicional"), __scope, false) } getOrElse {Nil},
        __obj.LugarDestEnt map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("LugarDestEnt"), __scope, false) } getOrElse {Nil},
        __obj.CompraID map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("CompraID"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_IndGlobalFormat = new DefaultUycomdgi_IndGlobalFormat {}
  trait DefaultUycomdgi_IndGlobalFormat extends scalaxb.XMLFormat[uy.com.dgi.IndGlobal] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndGlobal = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value31

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndGlobal] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndGlobal, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_ReferenciaFormat extends scalaxb.ElemNameParser[uy.com.dgi.Referencia] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Referencia] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroLinRef")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IndGlobal")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoDocRef")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Serie")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroCFERef")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RazonRef")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "FechaCFEref")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      uy.com.dgi.Referencia(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.IndGlobal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.CFEType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Referencia, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroLinRef, Some("http://cfe.dgi.gub.uy"), Some("NroLinRef"), __scope, false),
        __obj.IndGlobal map { scalaxb.toXML[uy.com.dgi.IndGlobal](_, Some("http://cfe.dgi.gub.uy"), Some("IndGlobal"), __scope, false) } getOrElse {Nil},
        __obj.TpoDocRef map { scalaxb.toXML[uy.com.dgi.CFEType](_, Some("http://cfe.dgi.gub.uy"), Some("TpoDocRef"), __scope, false) } getOrElse {Nil},
        __obj.Serie map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("Serie"), __scope, false) } getOrElse {Nil},
        __obj.NroCFERef map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("NroCFERef"), __scope, false) } getOrElse {Nil},
        __obj.RazonRef map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("RazonRef"), __scope, false) } getOrElse {Nil},
        __obj.FechaCFEref map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://cfe.dgi.gub.uy"), Some("FechaCFEref"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_ReferenciaTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.ReferenciaType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Referencia")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ReferenciaType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Referencia")) ^^
      { case p1 =>
      uy.com.dgi.ReferenciaType(p1 map { scalaxb.fromXML[uy.com.dgi.Referencia](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.ReferenciaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Referencia flatMap { scalaxb.toXML[uy.com.dgi.Referencia](_, Some("http://cfe.dgi.gub.uy"), Some("Referencia"), __scope, false) })

  }

  trait DefaultUycomdgi_RetPercFormat extends scalaxb.ElemNameParser[uy.com.dgi.RetPerc] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("RetPerc")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RetPerc] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodRet")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Tasa")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntSujetoaRet")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalRet")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ValRetPerc")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      uy.com.dgi.RetPerc(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.RetPerc, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CodRet, Some("http://cfe.dgi.gub.uy"), Some("CodRet"), __scope, false),
        __obj.Tasa map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("Tasa"), __scope, false) } getOrElse {Nil},
        __obj.MntSujetoaRet map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntSujetoaRet"), __scope, false) } getOrElse {Nil},
        __obj.InfoAdicionalRet map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalRet"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.ValRetPerc, Some("http://cfe.dgi.gub.uy"), Some("ValRetPerc"), __scope, false))

  }

  trait DefaultUycomdgi_RetPerc_ResgFormat extends scalaxb.ElemNameParser[uy.com.dgi.RetPerc_Resg] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("RetPerc_Resg")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RetPerc_Resg] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodRet")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Tasa")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntSujetoaRet")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "InfoAdicionalRet")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ValRetPerc")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      uy.com.dgi.RetPerc_Resg(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.RetPerc_Resg, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CodRet, Some("http://cfe.dgi.gub.uy"), Some("CodRet"), __scope, false),
        __obj.Tasa map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("Tasa"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntSujetoaRet, Some("http://cfe.dgi.gub.uy"), Some("MntSujetoaRet"), __scope, false),
        __obj.InfoAdicionalRet map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("InfoAdicionalRet"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.ValRetPerc, Some("http://cfe.dgi.gub.uy"), Some("ValRetPerc"), __scope, false))

  }

  trait DefaultUycomdgi_STI_ItemFormat extends scalaxb.ElemNameParser[uy.com.dgi.STI_Item] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.STI_Item] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NroSTI")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "GlosaSTI")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "OrdenSTI")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ValSubtotSTI")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.STI_Item(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.STI_Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.NroSTI, Some("http://cfe.dgi.gub.uy"), Some("NroSTI"), __scope, false),
        scalaxb.toXML[String](__obj.GlosaSTI, Some("http://cfe.dgi.gub.uy"), Some("GlosaSTI"), __scope, false),
        __obj.OrdenSTI map { scalaxb.toXML[BigInt](_, Some("http://cfe.dgi.gub.uy"), Some("OrdenSTI"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.ValSubtotSTI, Some("http://cfe.dgi.gub.uy"), Some("ValSubtotSTI"), __scope, false))

  }

  trait DefaultUycomdgi_SubTotInfoFormat extends scalaxb.ElemNameParser[uy.com.dgi.SubTotInfo] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("SubTotInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SubTotInfo] =
      phrase(safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "STI_Item")) ^^
      { case p1 =>
      uy.com.dgi.SubTotInfo(p1 map { scalaxb.fromXML[uy.com.dgi.STI_Item](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.SubTotInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.STI_Item flatMap { scalaxb.toXML[uy.com.dgi.STI_Item](_, Some("http://cfe.dgi.gub.uy"), Some("STI_Item"), __scope, false) })

  }

  trait DefaultUycomdgi_RetencPercepFormat extends scalaxb.ElemNameParser[uy.com.dgi.RetencPercep] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RetencPercep] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodRet")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ValRetPerc")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.RetencPercep(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.RetencPercep, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CodRet, Some("http://cfe.dgi.gub.uy"), Some("CodRet"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.ValRetPerc, Some("http://cfe.dgi.gub.uy"), Some("ValRetPerc"), __scope, false))

  }

  trait DefaultUycomdgi_TotalesTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.TotalesType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Totales")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.TotalesType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoMoneda")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCambio")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntNoGrv")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntExpoyAsim")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntImpuestoPerc")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntIVaenSusp")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntNetoIvaTasaMin")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntNetoIVATasaBasica")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntNetoIVAOtra")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IVATasaMin")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IVATasaBasica")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntIVATasaMin")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntIVATasaBasica")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntIVAOtra")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotal")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotRetenido")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotCredFisc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CantLinDet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RetencPercep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MontoNF")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntPagar")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      uy.com.dgi.TotalesType(scalaxb.fromXML[uy.com.dgi.TipMonType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[uy.com.dgi.TasaIVAType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[uy.com.dgi.TasaIVAType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p15, scalaxb.ElemName(node) :: stack),
        p16.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p18, scalaxb.ElemName(node) :: stack),
        p19 map { scalaxb.fromXML[uy.com.dgi.RetencPercep](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p21, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.TotalesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipMonType](__obj.TpoMoneda, Some("http://cfe.dgi.gub.uy"), Some("TpoMoneda"), __scope, false),
        __obj.TpoCambio map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("TpoCambio"), __scope, false) } getOrElse {Nil},
        __obj.MntNoGrv map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntNoGrv"), __scope, false) } getOrElse {Nil},
        __obj.MntExpoyAsim map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntExpoyAsim"), __scope, false) } getOrElse {Nil},
        __obj.MntImpuestoPerc map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntImpuestoPerc"), __scope, false) } getOrElse {Nil},
        __obj.MntIVaenSusp map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntIVaenSusp"), __scope, false) } getOrElse {Nil},
        __obj.MntNetoIvaTasaMin map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntNetoIvaTasaMin"), __scope, false) } getOrElse {Nil},
        __obj.MntNetoIVATasaBasica map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntNetoIVATasaBasica"), __scope, false) } getOrElse {Nil},
        __obj.MntNetoIVAOtra map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntNetoIVAOtra"), __scope, false) } getOrElse {Nil},
        __obj.IVATasaMin map { scalaxb.toXML[uy.com.dgi.TasaIVAType](_, Some("http://cfe.dgi.gub.uy"), Some("IVATasaMin"), __scope, false) } getOrElse {Nil},
        __obj.IVATasaBasica map { scalaxb.toXML[uy.com.dgi.TasaIVAType](_, Some("http://cfe.dgi.gub.uy"), Some("IVATasaBasica"), __scope, false) } getOrElse {Nil},
        __obj.MntIVATasaMin map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntIVATasaMin"), __scope, false) } getOrElse {Nil},
        __obj.MntIVATasaBasica map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntIVATasaBasica"), __scope, false) } getOrElse {Nil},
        __obj.MntIVAOtra map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntIVAOtra"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntTotal, Some("http://cfe.dgi.gub.uy"), Some("MntTotal"), __scope, false),
        __obj.MntTotRetenido map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntTotRetenido"), __scope, false) } getOrElse {Nil},
        __obj.MntTotCredFisc map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntTotCredFisc"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.CantLinDet, Some("http://cfe.dgi.gub.uy"), Some("CantLinDet"), __scope, false),
        __obj.RetencPercep flatMap { scalaxb.toXML[uy.com.dgi.RetencPercep](_, Some("http://cfe.dgi.gub.uy"), Some("RetencPercep"), __scope, false) },
        __obj.MontoNF map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MontoNF"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntPagar, Some("http://cfe.dgi.gub.uy"), Some("MntPagar"), __scope, false))

  }

  trait DefaultUycomdgi_Totales_Fact_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.Totales_Fact_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Totales_Fact_Exp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Totales_Fact_Exp] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoMoneda")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCambio")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntExpoyAsim")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotal")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CantLinDet")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MontoNF")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntPagar")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      uy.com.dgi.Totales_Fact_Exp(scalaxb.fromXML[uy.com.dgi.TipMonType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Totales_Fact_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipMonType](__obj.TpoMoneda, Some("http://cfe.dgi.gub.uy"), Some("TpoMoneda"), __scope, false),
        __obj.TpoCambio map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("TpoCambio"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntExpoyAsim, Some("http://cfe.dgi.gub.uy"), Some("MntExpoyAsim"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.MntTotal, Some("http://cfe.dgi.gub.uy"), Some("MntTotal"), __scope, false),
        scalaxb.toXML[BigInt](__obj.CantLinDet, Some("http://cfe.dgi.gub.uy"), Some("CantLinDet"), __scope, false),
        __obj.MontoNF map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MontoNF"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntPagar, Some("http://cfe.dgi.gub.uy"), Some("MntPagar"), __scope, false))

  }

  trait DefaultUycomdgi_Totales_Rem_ExpFormat extends scalaxb.ElemNameParser[uy.com.dgi.Totales_Rem_Exp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Totales_Rem_Exp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Totales_Rem_Exp] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoMoneda")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCambio")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntExpoyAsim")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotal")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CantLinDet")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntPagar")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      uy.com.dgi.Totales_Rem_Exp(scalaxb.fromXML[uy.com.dgi.TipMonType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Totales_Rem_Exp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipMonType](__obj.TpoMoneda, Some("http://cfe.dgi.gub.uy"), Some("TpoMoneda"), __scope, false),
        __obj.TpoCambio map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("TpoCambio"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntExpoyAsim, Some("http://cfe.dgi.gub.uy"), Some("MntExpoyAsim"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.MntTotal, Some("http://cfe.dgi.gub.uy"), Some("MntTotal"), __scope, false),
        scalaxb.toXML[BigInt](__obj.CantLinDet, Some("http://cfe.dgi.gub.uy"), Some("CantLinDet"), __scope, false),
        __obj.MntPagar map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntPagar"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_RetencPercep2Format extends scalaxb.ElemNameParser[uy.com.dgi.RetencPercep2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RetencPercep2] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodRet")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ValRetPerc")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.RetencPercep2(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.RetencPercep2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CodRet, Some("http://cfe.dgi.gub.uy"), Some("CodRet"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.ValRetPerc, Some("http://cfe.dgi.gub.uy"), Some("ValRetPerc"), __scope, false))

  }

  trait DefaultUycomdgi_Totales_ResgFormat extends scalaxb.ElemNameParser[uy.com.dgi.Totales_Resg] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Totales_Resg")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Totales_Resg] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoMoneda")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCambio")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotRetenido")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotCredFisc")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CantLinDet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RetencPercep")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      uy.com.dgi.Totales_Resg(scalaxb.fromXML[uy.com.dgi.TipMonType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p5, scalaxb.ElemName(node) :: stack),
        p6 map { scalaxb.fromXML[uy.com.dgi.RetencPercep2](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.Totales_Resg, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipMonType](__obj.TpoMoneda, Some("http://cfe.dgi.gub.uy"), Some("TpoMoneda"), __scope, false),
        __obj.TpoCambio map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("TpoCambio"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntTotRetenido, Some("http://cfe.dgi.gub.uy"), Some("MntTotRetenido"), __scope, false),
        __obj.MntTotCredFisc map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntTotCredFisc"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.CantLinDet, Some("http://cfe.dgi.gub.uy"), Some("CantLinDet"), __scope, false),
        __obj.RetencPercep flatMap { scalaxb.toXML[uy.com.dgi.RetencPercep2](_, Some("http://cfe.dgi.gub.uy"), Some("RetencPercep"), __scope, false) })

  }

  trait DefaultUycomdgi_RetencPercep3Format extends scalaxb.ElemNameParser[uy.com.dgi.RetencPercep3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RetencPercep3] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CodRet")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "ValRetPerc")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.RetencPercep3(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.RetencPercep3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CodRet, Some("http://cfe.dgi.gub.uy"), Some("CodRet"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.ValRetPerc, Some("http://cfe.dgi.gub.uy"), Some("ValRetPerc"), __scope, false))

  }

  trait DefaultUycomdgi_Totales_BoletaFormat extends scalaxb.ElemNameParser[uy.com.dgi.Totales_Boleta] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Totales_Boleta")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Totales_Boleta] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoMoneda")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TpoCambio")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntNoGrv")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntIVaenSusp")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotal")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntTotRetenido")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "CantLinDet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RetencPercep")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MontoNF")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "MntPagar")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      uy.com.dgi.Totales_Boleta(scalaxb.fromXML[uy.com.dgi.TipMonType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p7, scalaxb.ElemName(node) :: stack),
        p8 map { scalaxb.fromXML[uy.com.dgi.RetencPercep3](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p10, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Totales_Boleta, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.TipMonType](__obj.TpoMoneda, Some("http://cfe.dgi.gub.uy"), Some("TpoMoneda"), __scope, false),
        __obj.TpoCambio map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("TpoCambio"), __scope, false) } getOrElse {Nil},
        __obj.MntNoGrv map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntNoGrv"), __scope, false) } getOrElse {Nil},
        __obj.MntIVaenSusp map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntIVaenSusp"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntTotal, Some("http://cfe.dgi.gub.uy"), Some("MntTotal"), __scope, false),
        __obj.MntTotRetenido map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MntTotRetenido"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.CantLinDet, Some("http://cfe.dgi.gub.uy"), Some("CantLinDet"), __scope, false),
        __obj.RetencPercep flatMap { scalaxb.toXML[uy.com.dgi.RetencPercep3](_, Some("http://cfe.dgi.gub.uy"), Some("RetencPercep"), __scope, false) },
        __obj.MontoNF map { scalaxb.toXML[BigDecimal](_, Some("http://cfe.dgi.gub.uy"), Some("MontoNF"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.MntPagar, Some("http://cfe.dgi.gub.uy"), Some("MntPagar"), __scope, false))

  }

  trait DefaultUycomdgi_DatosComplFiscTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.DatosComplFiscType] with scalaxb.CanWriteChildNodes[uy.com.dgi.DatosComplFiscType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.DatosComplFiscType] = seq match {
      case node: scala.xml.Node => Right(uy.com.dgi.DatosComplFiscType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: uy.com.dgi.DatosComplFiscType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUycomdgi_Compl_Fiscal_DataTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.Compl_Fiscal_DataType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Compl_Fiscal_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Compl_Fiscal_DataType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "RUCEmisor")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "TipoDocMdte")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Pais")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "DocMdte")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "NombreMdte")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      uy.com.dgi.Compl_Fiscal_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.DocTypemasNIE](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.CodPaisType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.Compl_Fiscal_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.RUCEmisor, Some("http://cfe.dgi.gub.uy"), Some("RUCEmisor"), __scope, false),
        scalaxb.toXML[uy.com.dgi.DocTypemasNIE](__obj.TipoDocMdte, Some("http://cfe.dgi.gub.uy"), Some("TipoDocMdte"), __scope, false),
        scalaxb.toXML[uy.com.dgi.CodPaisType](__obj.Pais, Some("http://cfe.dgi.gub.uy"), Some("Pais"), __scope, false),
        scalaxb.toXML[String](__obj.DocMdte, Some("http://cfe.dgi.gub.uy"), Some("DocMdte"), __scope, false),
        scalaxb.toXML[String](__obj.NombreMdte, Some("http://cfe.dgi.gub.uy"), Some("NombreMdte"), __scope, false))

  }

  trait DefaultUycomdgi_Compl_FiscalTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.Compl_FiscalType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("Compl_FiscalType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.Compl_FiscalType] =
      phrase((((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Compl_Fiscal_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.Compl_Fiscal_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "EncryptedData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.EncryptedDataType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      uy.com.dgi.Compl_FiscalType(p1) })
    
    def writesChildNodes(__obj: uy.com.dgi.Compl_FiscalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.compl_fiscaltypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[uy.com.dgi.Compl_FiscalTypeOption]](x, x.namespace, x.key, __scope, false)}).get)

  }

  def buildUycomdgi_CFETypeFormat = new DefaultUycomdgi_CFETypeFormat {}
  trait DefaultUycomdgi_CFETypeFormat extends scalaxb.XMLFormat[uy.com.dgi.CFEType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.CFEType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("101")) => uy.com.dgi.Number101
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("102")) => uy.com.dgi.Number102
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("103")) => uy.com.dgi.Number103
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("111")) => uy.com.dgi.Number111
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("112")) => uy.com.dgi.Number112
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("113")) => uy.com.dgi.Number113
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("121")) => uy.com.dgi.Number121
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("122")) => uy.com.dgi.Number122
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("123")) => uy.com.dgi.Number123
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("124")) => uy.com.dgi.Number124
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("131")) => uy.com.dgi.Number131
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("132")) => uy.com.dgi.Number132
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("133")) => uy.com.dgi.Number133
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("141")) => uy.com.dgi.Number141
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("142")) => uy.com.dgi.Number142
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("143")) => uy.com.dgi.Number143
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("151")) => uy.com.dgi.Number151
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("152")) => uy.com.dgi.Number152
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("153")) => uy.com.dgi.Number153
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("181")) => uy.com.dgi.Number181
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("182")) => uy.com.dgi.Number182
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("201")) => uy.com.dgi.Number201
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("202")) => uy.com.dgi.Number202
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("203")) => uy.com.dgi.Number203
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("211")) => uy.com.dgi.Number211
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("212")) => uy.com.dgi.Number212
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("213")) => uy.com.dgi.Number213
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("221")) => uy.com.dgi.Number221
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("222")) => uy.com.dgi.Number222
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("223")) => uy.com.dgi.Number223
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("224")) => uy.com.dgi.Number224
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("231")) => uy.com.dgi.Number231
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("232")) => uy.com.dgi.Number232
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("233")) => uy.com.dgi.Number233
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("241")) => uy.com.dgi.Number241
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("242")) => uy.com.dgi.Number242
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("243")) => uy.com.dgi.Number243
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("251")) => uy.com.dgi.Number251
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("252")) => uy.com.dgi.Number252
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("253")) => uy.com.dgi.Number253
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("281")) => uy.com.dgi.Number281
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("282")) => uy.com.dgi.Number282

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.CFEType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.CFEType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_TipoTrasladoTypeFormat = new DefaultUycomdgi_TipoTrasladoTypeFormat {}
  trait DefaultUycomdgi_TipoTrasladoTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.TipoTrasladoType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoTrasladoType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value9
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value7

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoTrasladoType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoTrasladoType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndMontoBrutoTypeFormat = new DefaultUycomdgi_IndMontoBrutoTypeFormat {}
  trait DefaultUycomdgi_IndMontoBrutoTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.IndMontoBrutoType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndMontoBrutoType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("0")) => uy.com.dgi.Number0
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value10

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndMontoBrutoType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndMontoBrutoType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_FormaDePagoTypeFormat = new DefaultUycomdgi_FormaDePagoTypeFormat {}
  trait DefaultUycomdgi_FormaDePagoTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.FormaDePagoType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.FormaDePagoType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value8
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value6

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.FormaDePagoType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.FormaDePagoType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndicadorAgRespFormat = new DefaultUycomdgi_IndicadorAgRespFormat {}
  trait DefaultUycomdgi_IndicadorAgRespFormat extends scalaxb.XMLFormat[uy.com.dgi.IndicadorAgResp] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndicadorAgResp = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R")) => uy.com.dgi.R

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndicadorAgResp] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndicadorAgResp, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_SubDescRecTypeFormat = new DefaultUycomdgi_SubDescRecTypeFormat {}
  trait DefaultUycomdgi_SubDescRecTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.SubDescRecType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.SubDescRecType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value7
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value5

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.SubDescRecType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.SubDescRecType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_DocTypeFormat = new DefaultUycomdgi_DocTypeFormat {}
  trait DefaultUycomdgi_DocTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.DocType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.DocType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value6
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value4
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3Value2
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("4")) => uy.com.dgi.Number4Value2
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("5")) => uy.com.dgi.Number5Value
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("6")) => uy.com.dgi.Number6Value
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("7")) => uy.com.dgi.Number7Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.DocType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.DocType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_TipMonTypeFormat = new DefaultUycomdgi_TipMonTypeFormat {}
  trait DefaultUycomdgi_TipMonTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.TipMonType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipMonType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AED")) => uy.com.dgi.AED
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AFN")) => uy.com.dgi.AFN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ALL")) => uy.com.dgi.ALL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AMD")) => uy.com.dgi.AMD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ANG")) => uy.com.dgi.ANG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AOA")) => uy.com.dgi.AOA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ARS")) => uy.com.dgi.ARS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AUD")) => uy.com.dgi.AUD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AWG")) => uy.com.dgi.AWG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AZM")) => uy.com.dgi.AZM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BAM")) => uy.com.dgi.BAM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BBD")) => uy.com.dgi.BBD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BDT")) => uy.com.dgi.BDT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BGN")) => uy.com.dgi.BGN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BHD")) => uy.com.dgi.BHD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BIF")) => uy.com.dgi.BIF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BMD")) => uy.com.dgi.BMD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BND")) => uy.com.dgi.BND
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BOB")) => uy.com.dgi.BOB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BOV")) => uy.com.dgi.BOV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BRL")) => uy.com.dgi.BRL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BSD")) => uy.com.dgi.BSD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BTN")) => uy.com.dgi.BTN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BWP")) => uy.com.dgi.BWP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BYR")) => uy.com.dgi.BYR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BZD")) => uy.com.dgi.BZD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CAD")) => uy.com.dgi.CAD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CDF")) => uy.com.dgi.CDF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CHF")) => uy.com.dgi.CHF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CLF")) => uy.com.dgi.CLF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CLP")) => uy.com.dgi.CLP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CNY")) => uy.com.dgi.CNY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("COP")) => uy.com.dgi.COP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("COU")) => uy.com.dgi.COU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CRC")) => uy.com.dgi.CRC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CSD")) => uy.com.dgi.CSD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CUP")) => uy.com.dgi.CUP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CUC")) => uy.com.dgi.CUC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CVE")) => uy.com.dgi.CVE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CYP")) => uy.com.dgi.CYP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CZK")) => uy.com.dgi.CZK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DJF")) => uy.com.dgi.DJF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DKK")) => uy.com.dgi.DKK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DOP")) => uy.com.dgi.DOP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DZD")) => uy.com.dgi.DZD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EEK")) => uy.com.dgi.EEK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EGP")) => uy.com.dgi.EGP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ERN")) => uy.com.dgi.ERN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ETB")) => uy.com.dgi.ETB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EUR")) => uy.com.dgi.EUR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FJD")) => uy.com.dgi.FJD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FKP")) => uy.com.dgi.FKP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GBP")) => uy.com.dgi.GBP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GEL")) => uy.com.dgi.GEL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GHS")) => uy.com.dgi.GHS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GIP")) => uy.com.dgi.GIP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GMD")) => uy.com.dgi.GMD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GNF")) => uy.com.dgi.GNF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GTQ")) => uy.com.dgi.GTQ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GYD")) => uy.com.dgi.GYD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HKD")) => uy.com.dgi.HKD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HNL")) => uy.com.dgi.HNL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HRK")) => uy.com.dgi.HRK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HTG")) => uy.com.dgi.HTG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HUF")) => uy.com.dgi.HUF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IDR")) => uy.com.dgi.IDR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ILS")) => uy.com.dgi.ILS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("INR")) => uy.com.dgi.INR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IQD")) => uy.com.dgi.IQD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IRR")) => uy.com.dgi.IRR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ISK")) => uy.com.dgi.ISK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("JMD")) => uy.com.dgi.JMD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("JOD")) => uy.com.dgi.JOD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("JPY")) => uy.com.dgi.JPY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KES")) => uy.com.dgi.KES
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KGS")) => uy.com.dgi.KGS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KHR")) => uy.com.dgi.KHR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KMF")) => uy.com.dgi.KMF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KPW")) => uy.com.dgi.KPW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KRW")) => uy.com.dgi.KRW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KWD")) => uy.com.dgi.KWD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KYD")) => uy.com.dgi.KYD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KZT")) => uy.com.dgi.KZT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LAK")) => uy.com.dgi.LAK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LBP")) => uy.com.dgi.LBP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LKR")) => uy.com.dgi.LKR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LRD")) => uy.com.dgi.LRD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LSL")) => uy.com.dgi.LSL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LTL")) => uy.com.dgi.LTL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LVL")) => uy.com.dgi.LVL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LYD")) => uy.com.dgi.LYD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MAD")) => uy.com.dgi.MAD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MDL")) => uy.com.dgi.MDL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MGA")) => uy.com.dgi.MGA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MKD")) => uy.com.dgi.MKD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MMK")) => uy.com.dgi.MMK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MNT")) => uy.com.dgi.MNT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MOP")) => uy.com.dgi.MOP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MRO")) => uy.com.dgi.MRO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MTL")) => uy.com.dgi.MTL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MUR")) => uy.com.dgi.MUR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MVR")) => uy.com.dgi.MVR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MWK")) => uy.com.dgi.MWK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MXN")) => uy.com.dgi.MXN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MXV")) => uy.com.dgi.MXV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MYR")) => uy.com.dgi.MYR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MZN")) => uy.com.dgi.MZN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NAD")) => uy.com.dgi.NAD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NGN")) => uy.com.dgi.NGN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NIO")) => uy.com.dgi.NIO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NOK")) => uy.com.dgi.NOK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NPR")) => uy.com.dgi.NPR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NZD")) => uy.com.dgi.NZD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OMR")) => uy.com.dgi.OMR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PAB")) => uy.com.dgi.PAB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PEN")) => uy.com.dgi.PEN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PGK")) => uy.com.dgi.PGK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PHP")) => uy.com.dgi.PHP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PKR")) => uy.com.dgi.PKR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PLN")) => uy.com.dgi.PLN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PYG")) => uy.com.dgi.PYG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("QAR")) => uy.com.dgi.QAR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RON")) => uy.com.dgi.RON
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RUB")) => uy.com.dgi.RUB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RWF")) => uy.com.dgi.RWF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SAR")) => uy.com.dgi.SAR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SBD")) => uy.com.dgi.SBD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SCR")) => uy.com.dgi.SCR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SDG")) => uy.com.dgi.SDG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SEK")) => uy.com.dgi.SEK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SGD")) => uy.com.dgi.SGD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SHP")) => uy.com.dgi.SHP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SKK")) => uy.com.dgi.SKK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SLL")) => uy.com.dgi.SLL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SOS")) => uy.com.dgi.SOS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SRD")) => uy.com.dgi.SRD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("STD")) => uy.com.dgi.STD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SYP")) => uy.com.dgi.SYP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SZL")) => uy.com.dgi.SZL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("THB")) => uy.com.dgi.THB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TJS")) => uy.com.dgi.TJS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TMT")) => uy.com.dgi.TMT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TND")) => uy.com.dgi.TND
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TOP")) => uy.com.dgi.TOP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TRY")) => uy.com.dgi.TRY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TTD")) => uy.com.dgi.TTD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TWD")) => uy.com.dgi.TWD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TZS")) => uy.com.dgi.TZS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UAH")) => uy.com.dgi.UAH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UGX")) => uy.com.dgi.UGX
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("USD")) => uy.com.dgi.USD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("USN")) => uy.com.dgi.USN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("USS")) => uy.com.dgi.USS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UYU")) => uy.com.dgi.UYU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UZS")) => uy.com.dgi.UZS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VEF")) => uy.com.dgi.VEF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VND")) => uy.com.dgi.VND
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VUV")) => uy.com.dgi.VUV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("WST")) => uy.com.dgi.WST
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XAF")) => uy.com.dgi.XAF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XAG")) => uy.com.dgi.XAG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XAU")) => uy.com.dgi.XAU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XBA")) => uy.com.dgi.XBA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XBB")) => uy.com.dgi.XBB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XBC")) => uy.com.dgi.XBC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XBD")) => uy.com.dgi.XBD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XCD")) => uy.com.dgi.XCD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XDR")) => uy.com.dgi.XDR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XFO")) => uy.com.dgi.XFO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XFU")) => uy.com.dgi.XFU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XOF")) => uy.com.dgi.XOF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XPD")) => uy.com.dgi.XPD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XPF")) => uy.com.dgi.XPF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XPT")) => uy.com.dgi.XPT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XTS")) => uy.com.dgi.XTS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XXX")) => uy.com.dgi.XXX
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("YER")) => uy.com.dgi.YER
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ZAR")) => uy.com.dgi.ZAR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ZMK")) => uy.com.dgi.ZMK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ZWL")) => uy.com.dgi.ZWL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UYI")) => uy.com.dgi.UYI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UYR")) => uy.com.dgi.UYR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AZN")) => uy.com.dgi.AZN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BYN")) => uy.com.dgi.BYN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CHE")) => uy.com.dgi.CHE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CHW")) => uy.com.dgi.CHW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MRU")) => uy.com.dgi.MRU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RSD")) => uy.com.dgi.RSD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SSP")) => uy.com.dgi.SSP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("STN")) => uy.com.dgi.STN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VES")) => uy.com.dgi.VES
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XSU")) => uy.com.dgi.XSU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("XUA")) => uy.com.dgi.XUA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ZMW")) => uy.com.dgi.ZMW

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipMonType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipMonType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_TasaIVATypeFormat = new DefaultUycomdgi_TasaIVATypeFormat {}
  trait DefaultUycomdgi_TasaIVATypeFormat extends scalaxb.XMLFormat[uy.com.dgi.TasaIVAType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TasaIVAType = scalaxb.fromXML[BigDecimal](scala.xml.Text(value)) match {
      case x: BigDecimal if x == scalaxb.fromXML[BigDecimal](scala.xml.Text("10.000")) => uy.com.dgi.Number10u46000
      case x: BigDecimal if x == scalaxb.fromXML[BigDecimal](scala.xml.Text("22.000")) => uy.com.dgi.Number22u46000

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TasaIVAType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TasaIVAType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_CodPaisTypeFormat = new DefaultUycomdgi_CodPaisTypeFormat {}
  trait DefaultUycomdgi_CodPaisTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.CodPaisType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.CodPaisType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AD")) => uy.com.dgi.AD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AE")) => uy.com.dgi.AE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AF")) => uy.com.dgi.AF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AG")) => uy.com.dgi.AG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AI")) => uy.com.dgi.AI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AL")) => uy.com.dgi.AL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AM")) => uy.com.dgi.AM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AN")) => uy.com.dgi.AN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CW")) => uy.com.dgi.CW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SX")) => uy.com.dgi.SX
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AO")) => uy.com.dgi.AO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AQ")) => uy.com.dgi.AQ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AR")) => uy.com.dgi.AR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AS")) => uy.com.dgi.ASValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AT")) => uy.com.dgi.AT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AU")) => uy.com.dgi.AU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AW")) => uy.com.dgi.AW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AX")) => uy.com.dgi.AX
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AZ")) => uy.com.dgi.AZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BA")) => uy.com.dgi.BAValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BB")) => uy.com.dgi.BB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BD")) => uy.com.dgi.BD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BE")) => uy.com.dgi.BE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BF")) => uy.com.dgi.BF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BG")) => uy.com.dgi.BG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BH")) => uy.com.dgi.BH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BI")) => uy.com.dgi.BI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BJ")) => uy.com.dgi.BJ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BM")) => uy.com.dgi.BM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BN")) => uy.com.dgi.BN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BO")) => uy.com.dgi.BO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BR")) => uy.com.dgi.BR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BS")) => uy.com.dgi.BSValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BT")) => uy.com.dgi.BT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BU")) => uy.com.dgi.BU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BV")) => uy.com.dgi.BV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BW")) => uy.com.dgi.BW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BY")) => uy.com.dgi.BY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BZ")) => uy.com.dgi.BZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CA")) => uy.com.dgi.CA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CC")) => uy.com.dgi.CC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CD")) => uy.com.dgi.CD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CF")) => uy.com.dgi.CF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CG")) => uy.com.dgi.CG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CH")) => uy.com.dgi.CH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CI")) => uy.com.dgi.CI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CK")) => uy.com.dgi.CK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CL")) => uy.com.dgi.CL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CM")) => uy.com.dgi.CM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CN")) => uy.com.dgi.CN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CO")) => uy.com.dgi.CO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CR")) => uy.com.dgi.CR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CS")) => uy.com.dgi.CS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CU")) => uy.com.dgi.CU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CV")) => uy.com.dgi.CV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CX")) => uy.com.dgi.CX
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CY")) => uy.com.dgi.CY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CZ")) => uy.com.dgi.CZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DE")) => uy.com.dgi.DE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DJ")) => uy.com.dgi.DJ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DK")) => uy.com.dgi.DK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DM")) => uy.com.dgi.DM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DO")) => uy.com.dgi.DO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DZ")) => uy.com.dgi.DZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EA")) => uy.com.dgi.EA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EC")) => uy.com.dgi.EC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EE")) => uy.com.dgi.EE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EG")) => uy.com.dgi.EG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EH")) => uy.com.dgi.EH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ER")) => uy.com.dgi.ER
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ES")) => uy.com.dgi.ES
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ET")) => uy.com.dgi.ET
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FI")) => uy.com.dgi.FI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FJ")) => uy.com.dgi.FJ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FK")) => uy.com.dgi.FK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FM")) => uy.com.dgi.FM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FO")) => uy.com.dgi.FO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FR")) => uy.com.dgi.FR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GA")) => uy.com.dgi.GA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GB")) => uy.com.dgi.GB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GD")) => uy.com.dgi.GD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GE")) => uy.com.dgi.GE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GF")) => uy.com.dgi.GF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GG")) => uy.com.dgi.GG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GH")) => uy.com.dgi.GH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GI")) => uy.com.dgi.GI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GL")) => uy.com.dgi.GL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GM")) => uy.com.dgi.GM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GN")) => uy.com.dgi.GN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GP")) => uy.com.dgi.GP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GQ")) => uy.com.dgi.GQ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GR")) => uy.com.dgi.GR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GS")) => uy.com.dgi.GS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GT")) => uy.com.dgi.GT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GU")) => uy.com.dgi.GU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GW")) => uy.com.dgi.GW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GY")) => uy.com.dgi.GY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HK")) => uy.com.dgi.HK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HM")) => uy.com.dgi.HM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HN")) => uy.com.dgi.HN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HR")) => uy.com.dgi.HR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HT")) => uy.com.dgi.HT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("HU")) => uy.com.dgi.HU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ID")) => uy.com.dgi.ID
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IE")) => uy.com.dgi.IE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IL")) => uy.com.dgi.IL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IM")) => uy.com.dgi.IM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IN")) => uy.com.dgi.IN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IO")) => uy.com.dgi.IO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IQ")) => uy.com.dgi.IQ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IR")) => uy.com.dgi.IR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IS")) => uy.com.dgi.IS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IT")) => uy.com.dgi.IT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("JE")) => uy.com.dgi.JE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("JM")) => uy.com.dgi.JM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("JO")) => uy.com.dgi.JO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("JP")) => uy.com.dgi.JP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KA")) => uy.com.dgi.KA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KE")) => uy.com.dgi.KE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KG")) => uy.com.dgi.KG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KH")) => uy.com.dgi.KH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KI")) => uy.com.dgi.KI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KM")) => uy.com.dgi.KM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KN")) => uy.com.dgi.KN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KP")) => uy.com.dgi.KP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KR")) => uy.com.dgi.KR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KW")) => uy.com.dgi.KW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KY")) => uy.com.dgi.KY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KZ")) => uy.com.dgi.KZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LA")) => uy.com.dgi.LA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LB")) => uy.com.dgi.LB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LC")) => uy.com.dgi.LC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LI")) => uy.com.dgi.LI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LK")) => uy.com.dgi.LK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LR")) => uy.com.dgi.LR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LS")) => uy.com.dgi.LS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LT")) => uy.com.dgi.LT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LU")) => uy.com.dgi.LU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LV")) => uy.com.dgi.LV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LY")) => uy.com.dgi.LY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MA")) => uy.com.dgi.MA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MC")) => uy.com.dgi.MC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MD")) => uy.com.dgi.MD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ME")) => uy.com.dgi.ME
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MG")) => uy.com.dgi.MG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MH")) => uy.com.dgi.MH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MK")) => uy.com.dgi.MK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ML")) => uy.com.dgi.ML
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MM")) => uy.com.dgi.MM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MN")) => uy.com.dgi.MN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MO")) => uy.com.dgi.MO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MP")) => uy.com.dgi.MP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MQ")) => uy.com.dgi.MQ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MR")) => uy.com.dgi.MR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MS")) => uy.com.dgi.MS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MT")) => uy.com.dgi.MT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MU")) => uy.com.dgi.MU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MV")) => uy.com.dgi.MV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MW")) => uy.com.dgi.MW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MX")) => uy.com.dgi.MX
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MY")) => uy.com.dgi.MY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MZ")) => uy.com.dgi.MZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NA")) => uy.com.dgi.NA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NC")) => uy.com.dgi.NC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NE")) => uy.com.dgi.NE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NF")) => uy.com.dgi.NF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NG")) => uy.com.dgi.NG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NI")) => uy.com.dgi.NI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NL")) => uy.com.dgi.NL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NO")) => uy.com.dgi.NO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NP")) => uy.com.dgi.NP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NR")) => uy.com.dgi.NR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NU")) => uy.com.dgi.NU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("NZ")) => uy.com.dgi.NZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OM")) => uy.com.dgi.OM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PA")) => uy.com.dgi.PA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PE")) => uy.com.dgi.PE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PF")) => uy.com.dgi.PF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PG")) => uy.com.dgi.PG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PH")) => uy.com.dgi.PH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PK")) => uy.com.dgi.PK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PL")) => uy.com.dgi.PL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PM")) => uy.com.dgi.PM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PN")) => uy.com.dgi.PN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PR")) => uy.com.dgi.PR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PS")) => uy.com.dgi.PS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PT")) => uy.com.dgi.PT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PW")) => uy.com.dgi.PW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PY")) => uy.com.dgi.PY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("QA")) => uy.com.dgi.QA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RE")) => uy.com.dgi.RE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RO")) => uy.com.dgi.RO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RS")) => uy.com.dgi.RS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RU")) => uy.com.dgi.RU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RW")) => uy.com.dgi.RW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SA")) => uy.com.dgi.SA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SB")) => uy.com.dgi.SB
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SC")) => uy.com.dgi.SC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SD")) => uy.com.dgi.SD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SE")) => uy.com.dgi.SE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SG")) => uy.com.dgi.SG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SH")) => uy.com.dgi.SH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SI")) => uy.com.dgi.SI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SJ")) => uy.com.dgi.SJ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SK")) => uy.com.dgi.SK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SL")) => uy.com.dgi.SL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SM")) => uy.com.dgi.SM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SN")) => uy.com.dgi.SN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SO")) => uy.com.dgi.SO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SR")) => uy.com.dgi.SR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ST")) => uy.com.dgi.ST
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SU")) => uy.com.dgi.SU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SV")) => uy.com.dgi.SV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SY")) => uy.com.dgi.SY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SZ")) => uy.com.dgi.SZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TC")) => uy.com.dgi.TC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TD")) => uy.com.dgi.TD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TF")) => uy.com.dgi.TF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TG")) => uy.com.dgi.TG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TH")) => uy.com.dgi.TH
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TJ")) => uy.com.dgi.TJ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TK")) => uy.com.dgi.TK
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TL")) => uy.com.dgi.TL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TM")) => uy.com.dgi.TM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TN")) => uy.com.dgi.TN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TO")) => uy.com.dgi.TO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TP")) => uy.com.dgi.TP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TR")) => uy.com.dgi.TR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TT")) => uy.com.dgi.TT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TV")) => uy.com.dgi.TV
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TW")) => uy.com.dgi.TW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("TZ")) => uy.com.dgi.TZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UA")) => uy.com.dgi.UA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UE")) => uy.com.dgi.UE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UG")) => uy.com.dgi.UG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UM")) => uy.com.dgi.UM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("US")) => uy.com.dgi.US
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UY")) => uy.com.dgi.UY
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UZ")) => uy.com.dgi.UZ
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VA")) => uy.com.dgi.VA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VC")) => uy.com.dgi.VC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VE")) => uy.com.dgi.VE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VG")) => uy.com.dgi.VG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VI")) => uy.com.dgi.VI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VN")) => uy.com.dgi.VN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("VU")) => uy.com.dgi.VU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("WF")) => uy.com.dgi.WF
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("WS")) => uy.com.dgi.WS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("YD")) => uy.com.dgi.YD
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("YE")) => uy.com.dgi.YE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("YT")) => uy.com.dgi.YT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("YU")) => uy.com.dgi.YU
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ZA")) => uy.com.dgi.ZA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ZM")) => uy.com.dgi.ZM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ZR")) => uy.com.dgi.ZR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ZW")) => uy.com.dgi.ZW
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("99")) => uy.com.dgi.Number99Value

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.CodPaisType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.CodPaisType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_TipoDRTypeFormat = new DefaultUycomdgi_TipoDRTypeFormat {}
  trait DefaultUycomdgi_TipoDRTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.TipoDRType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.TipoDRType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value5
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.TipoDRType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.TipoDRType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_EstadoACKRepTypeFormat = new DefaultUycomdgi_EstadoACKRepTypeFormat {}
  trait DefaultUycomdgi_EstadoACKRepTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.EstadoACKRepType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.EstadoACKRepType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AR")) => uy.com.dgi.ARValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BA")) => uy.com.dgi.BAValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BR")) => uy.com.dgi.BRValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.EstadoACKRepType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.EstadoACKRepType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_EstadoACKSobreTypeFormat = new DefaultUycomdgi_EstadoACKSobreTypeFormat {}
  trait DefaultUycomdgi_EstadoACKSobreTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.EstadoACKSobreType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.EstadoACKSobreType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AS")) => uy.com.dgi.AS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BA")) => uy.com.dgi.BA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BS")) => uy.com.dgi.BS

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.EstadoACKSobreType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.EstadoACKSobreType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_EstadoACKCFETypeFormat = new DefaultUycomdgi_EstadoACKCFETypeFormat {}
  trait DefaultUycomdgi_EstadoACKCFETypeFormat extends scalaxb.XMLFormat[uy.com.dgi.EstadoACKCFEType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.EstadoACKCFEType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AE")) => uy.com.dgi.AEValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BE")) => uy.com.dgi.BEValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CE")) => uy.com.dgi.CE

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.EstadoACKCFEType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.EstadoACKCFEType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_MotivoFormat = new DefaultUycomdgi_MotivoFormat {}
  trait DefaultUycomdgi_MotivoFormat extends scalaxb.XMLFormat[uy.com.dgi.Motivo] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.Motivo = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R01")) => uy.com.dgi.R01
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R02")) => uy.com.dgi.R02
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R03")) => uy.com.dgi.R03
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R04")) => uy.com.dgi.R04
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R05")) => uy.com.dgi.R05
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R06")) => uy.com.dgi.R06

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.Motivo] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.Motivo, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_GlosaFormat = new DefaultUycomdgi_GlosaFormat {}
  trait DefaultUycomdgi_GlosaFormat extends scalaxb.XMLFormat[uy.com.dgi.Glosa] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.Glosa = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Formato del archivo no es el indicado")) => uy.com.dgi.Formatodelarchivonoeselindicado
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No coincide RUC en Reporte, Certificado o envío")) => uy.com.dgi.NocoincideRUCenReporteu44Certificadooenvío
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Firma o Certificado electrónicos no son válidos")) => uy.com.dgi.FirmaoCertificadoelectrónicosnosonválidos
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No cumple validaciones según Formato de Reporte")) => uy.com.dgi.NocumplevalidacionessegúnFormatodeReporte
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("La secuencia indicada en el reporte no es correcta")) => uy.com.dgi.Lasecuenciaindicadaenelreportenoescorrecta
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Fecha recepción no puede ser menor a fecha resumen")) => uy.com.dgi.Fecharecepciónnopuedesermenorafecharesumen

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.Glosa] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.Glosa, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_RechazoRepTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.RechazoRepType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("RechazoRepType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RechazoRepType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Motivo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Glosa")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.RechazoRepType(scalaxb.fromXML[uy.com.dgi.Motivo](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.Glosa](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.RechazoRepType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.Motivo](__obj.Motivo, Some("http://cfe.dgi.gub.uy"), Some("Motivo"), __scope, false),
        scalaxb.toXML[uy.com.dgi.Glosa](__obj.Glosa, Some("http://cfe.dgi.gub.uy"), Some("Glosa"), __scope, false),
        __obj.Detalle map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_MotivoTypeFormat = new DefaultUycomdgi_MotivoTypeFormat {}
  trait DefaultUycomdgi_MotivoTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.MotivoType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.MotivoType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S01")) => uy.com.dgi.S01
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S02")) => uy.com.dgi.S02
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S03")) => uy.com.dgi.S03
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S04")) => uy.com.dgi.S04
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S05")) => uy.com.dgi.S05
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S06")) => uy.com.dgi.S06
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S07")) => uy.com.dgi.S07
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S08")) => uy.com.dgi.S08

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.MotivoType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.MotivoType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_GlosaTypeFormat = new DefaultUycomdgi_GlosaTypeFormat {}
  trait DefaultUycomdgi_GlosaTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.GlosaType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.GlosaType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Formato del archivo no es el indicado")) => uy.com.dgi.FormatodelarchivonoeselindicadoValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No coincide RUC de Sobre, Certificado, envío o CFE")) => uy.com.dgi.NocoincideRUCdeSobreu44Certificadou44envíooCFE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Certificado electrónico no es válido")) => uy.com.dgi.Certificadoelectróniconoesválido
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No cumple validaciones según Formato de sobre")) => uy.com.dgi.NocumplevalidacionessegúnFormatodesobre
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No coinciden cantidad CFE de carátula y contenido")) => uy.com.dgi.NocoincidencantidadCFEdecarátulaycontenido
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No coinciden certificado de sobre y comprobantes")) => uy.com.dgi.Nocoincidencertificadodesobreycomprobantes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Sobre enviado supera el tamaño máximo admitido")) => uy.com.dgi.Sobreenviadosuperaeltamañomáximoadmitido
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Sobre enviado ya existe en los registros de DGI")) => uy.com.dgi.SobreenviadoyaexisteenlosregistrosdeDGI

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.GlosaType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.GlosaType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_RechazoSobreTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.RechazoSobreType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("RechazoSobreType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RechazoSobreType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Motivo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Glosa")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.RechazoSobreType(scalaxb.fromXML[uy.com.dgi.MotivoType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.GlosaType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.RechazoSobreType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.MotivoType](__obj.Motivo, Some("http://cfe.dgi.gub.uy"), Some("Motivo"), __scope, false),
        scalaxb.toXML[uy.com.dgi.GlosaType](__obj.Glosa, Some("http://cfe.dgi.gub.uy"), Some("Glosa"), __scope, false),
        __obj.Detalle map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_MotivoType2Format = new DefaultUycomdgi_MotivoType2Format {}
  trait DefaultUycomdgi_MotivoType2Format extends scalaxb.XMLFormat[uy.com.dgi.MotivoType2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.MotivoType2 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E01")) => uy.com.dgi.E01
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E02")) => uy.com.dgi.E02
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E03")) => uy.com.dgi.E03
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E04")) => uy.com.dgi.E04
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E05")) => uy.com.dgi.E05
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E07")) => uy.com.dgi.E07
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E08")) => uy.com.dgi.E08
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E09")) => uy.com.dgi.E09

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.MotivoType2] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.MotivoType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_GlosaType2Format = new DefaultUycomdgi_GlosaType2Format {}
  trait DefaultUycomdgi_GlosaType2Format extends scalaxb.XMLFormat[uy.com.dgi.GlosaType2] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.GlosaType2 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Tipo y Nº de CFE ya fue reportado como anulado")) => uy.com.dgi.TipoyNºdeCFEyafuereportadocomoanulado
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Tipo y Nº de CFE ya existe en los registros")) => uy.com.dgi.TipoyNºdeCFEyaexisteenlosregistros
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Tipo y Nº de CFE no se corresponden con el CAE")) => uy.com.dgi.TipoyNºdeCFEnosecorrespondenconelCAE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Firma electrónica no es válida")) => uy.com.dgi.Firmaelectrónicanoesválida
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No cumple validaciones de Formato comprobantes")) => uy.com.dgi.NocumplevalidacionesdeFormatocomprobantes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Fecha Firma de CFE no se corresponde con fecha CAE")) => uy.com.dgi.FechaFirmadeCFEnosecorrespondeconfechaCAE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No coincide RUC de CFE y Complemento Fiscal")) => uy.com.dgi.NocoincideRUCdeCFEyComplementoFiscal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("RUC emisor y/o tipo de CFE no se corresponden con el CAE")) => uy.com.dgi.LongName

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.GlosaType2] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.GlosaType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_RechazoCFE_DGITypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.RechazoCFE_DGIType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("RechazoCFE_DGIType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RechazoCFE_DGIType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Motivo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Glosa")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.RechazoCFE_DGIType(scalaxb.fromXML[uy.com.dgi.MotivoType2](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.GlosaType2](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.RechazoCFE_DGIType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.MotivoType2](__obj.Motivo, Some("http://cfe.dgi.gub.uy"), Some("Motivo"), __scope, false),
        scalaxb.toXML[uy.com.dgi.GlosaType2](__obj.Glosa, Some("http://cfe.dgi.gub.uy"), Some("Glosa"), __scope, false),
        __obj.Detalle map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_MotivoType3Format = new DefaultUycomdgi_MotivoType3Format {}
  trait DefaultUycomdgi_MotivoType3Format extends scalaxb.XMLFormat[uy.com.dgi.MotivoType3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.MotivoType3 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C03")) => uy.com.dgi.C03
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C04")) => uy.com.dgi.C04
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C05")) => uy.com.dgi.C05
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C08")) => uy.com.dgi.C08
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C09")) => uy.com.dgi.C09

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.MotivoType3] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.MotivoType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_GlosaType3Format = new DefaultUycomdgi_GlosaType3Format {}
  trait DefaultUycomdgi_GlosaType3Format extends scalaxb.XMLFormat[uy.com.dgi.GlosaType3] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.GlosaType3 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Tipo y Nº de CFC ya existe en los registros")) => uy.com.dgi.TipoyNºdeCFCyaexisteenlosregistros
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Constancia no autorizada según registros")) => uy.com.dgi.Constancianoautorizadasegúnregistros
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Firma electrónica no es válida")) => uy.com.dgi.FirmaelectrónicanoesválidaValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No cumple validaciones de Formato comprobantes")) => uy.com.dgi.NocumplevalidacionesdeFormatocomprobantesValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("No coincide RUC de CFE y Complemento Fiscal")) => uy.com.dgi.NocoincideRUCdeCFEyComplementoFiscalValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Nº de CFC no fue autorizado según registros")) => uy.com.dgi.NºdeCFCnofueautorizadosegúnregistros

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.GlosaType3] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.GlosaType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_ObsCFCTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.ObsCFCType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("ObsCFCType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ObsCFCType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Motivo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Glosa")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.ObsCFCType(scalaxb.fromXML[uy.com.dgi.MotivoType3](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.GlosaType3](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.ObsCFCType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.MotivoType3](__obj.Motivo, Some("http://cfe.dgi.gub.uy"), Some("Motivo"), __scope, false),
        scalaxb.toXML[uy.com.dgi.GlosaType3](__obj.Glosa, Some("http://cfe.dgi.gub.uy"), Some("Glosa"), __scope, false),
        __obj.Detalle map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false) } getOrElse {Nil})

  }

  def buildUycomdgi_MotivoType4Format = new DefaultUycomdgi_MotivoType4Format {}
  trait DefaultUycomdgi_MotivoType4Format extends scalaxb.XMLFormat[uy.com.dgi.MotivoType4] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.MotivoType4 = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E02")) => uy.com.dgi.E02Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E03")) => uy.com.dgi.E03Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E04")) => uy.com.dgi.E04Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E05")) => uy.com.dgi.E05Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E07")) => uy.com.dgi.E07Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E08")) => uy.com.dgi.E08Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E09")) => uy.com.dgi.E09Value
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E20")) => uy.com.dgi.E20
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E21")) => uy.com.dgi.E21
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E22")) => uy.com.dgi.E22
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E23")) => uy.com.dgi.E23
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E24")) => uy.com.dgi.E24
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E25")) => uy.com.dgi.E25
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E26")) => uy.com.dgi.E26
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E27")) => uy.com.dgi.E27
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E28")) => uy.com.dgi.E28
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E29")) => uy.com.dgi.E29
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E30")) => uy.com.dgi.E30
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E31")) => uy.com.dgi.E31
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E32")) => uy.com.dgi.E32
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E33")) => uy.com.dgi.E33
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E34")) => uy.com.dgi.E34
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E35")) => uy.com.dgi.E35
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E36")) => uy.com.dgi.E36
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E37")) => uy.com.dgi.E37
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E38")) => uy.com.dgi.E38
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E39")) => uy.com.dgi.E39
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E40")) => uy.com.dgi.E40
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E41")) => uy.com.dgi.E41
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E42")) => uy.com.dgi.E42
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E43")) => uy.com.dgi.E43
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E44")) => uy.com.dgi.E44
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E45")) => uy.com.dgi.E45
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E46")) => uy.com.dgi.E46
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E47")) => uy.com.dgi.E47
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E48")) => uy.com.dgi.E48
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E49")) => uy.com.dgi.E49
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E50")) => uy.com.dgi.E50
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E51")) => uy.com.dgi.E51
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E52")) => uy.com.dgi.E52
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E53")) => uy.com.dgi.E53
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E54")) => uy.com.dgi.E54
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E55")) => uy.com.dgi.E55
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E56")) => uy.com.dgi.E56
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E57")) => uy.com.dgi.E57
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E58")) => uy.com.dgi.E58
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E59")) => uy.com.dgi.E59
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E60")) => uy.com.dgi.E60

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.MotivoType4] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.MotivoType4, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_RechazoCFE_PartesTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.RechazoCFE_PartesType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("RechazoCFE_PartesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RechazoCFE_PartesType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Motivo")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Glosa")) ~ 
      opt(scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "Detalle")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.RechazoCFE_PartesType(scalaxb.fromXML[uy.com.dgi.MotivoType4](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.RechazoCFE_PartesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.MotivoType4](__obj.Motivo, Some("http://cfe.dgi.gub.uy"), Some("Motivo"), __scope, false),
        scalaxb.toXML[String](__obj.Glosa, Some("http://cfe.dgi.gub.uy"), Some("Glosa"), __scope, false),
        __obj.Detalle map { scalaxb.toXML[String](_, Some("http://cfe.dgi.gub.uy"), Some("Detalle"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_InfoRespOriTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.InfoRespOriType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    override def typeName: Option[String] = Some("InfoRespOriType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.InfoRespOriType] =
      phrase((scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IDRespSobre")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IDEmisorSobre")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IDReceptorSobre")) ~ 
      (scalaxb.ElemName(Some("http://cfe.dgi.gub.uy"), "IDTokenSobre")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.InfoRespOriType(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.Base64Binary](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.InfoRespOriType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.IDRespSobre, Some("http://cfe.dgi.gub.uy"), Some("IDRespSobre"), __scope, false),
        scalaxb.toXML[BigInt](__obj.IDEmisorSobre, Some("http://cfe.dgi.gub.uy"), Some("IDEmisorSobre"), __scope, false),
        scalaxb.toXML[BigInt](__obj.IDReceptorSobre, Some("http://cfe.dgi.gub.uy"), Some("IDReceptorSobre"), __scope, false),
        scalaxb.toXML[scalaxb.Base64Binary](__obj.IDTokenSobre, Some("http://cfe.dgi.gub.uy"), Some("IDTokenSobre"), __scope, false))

  }

  def buildUycomdgi_ModVentaTypeFormat = new DefaultUycomdgi_ModVentaTypeFormat {}
  trait DefaultUycomdgi_ModVentaTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.ModVentaType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.ModVentaType = scalaxb.fromXML[Int](scala.xml.Text(value)) match {
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("1")) => uy.com.dgi.Number1Value4
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("2")) => uy.com.dgi.Number2Value2
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("3")) => uy.com.dgi.Number3Value
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("4")) => uy.com.dgi.Number4Value
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("90")) => uy.com.dgi.Number90
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("99")) => uy.com.dgi.Number99

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.ModVentaType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.ModVentaType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_ViaTranspTypeFormat = new DefaultUycomdgi_ViaTranspTypeFormat {}
  trait DefaultUycomdgi_ViaTranspTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.ViaTranspType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.ViaTranspType = scalaxb.fromXML[Int](scala.xml.Text(value)) match {
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("1")) => uy.com.dgi.Number1Value11
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("2")) => uy.com.dgi.Number2Value8
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("3")) => uy.com.dgi.Number3Value3
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("8")) => uy.com.dgi.Number8
      case x: Int if x == scalaxb.fromXML[Int](scala.xml.Text("9")) => uy.com.dgi.Number9

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.ViaTranspType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.ViaTranspType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_DocTypemasNIEFormat = new DefaultUycomdgi_DocTypemasNIEFormat {}
  trait DefaultUycomdgi_DocTypemasNIEFormat extends scalaxb.XMLFormat[uy.com.dgi.DocTypemasNIE] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.DocTypemasNIE = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value3
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2Value
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("3")) => uy.com.dgi.Number3
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("4")) => uy.com.dgi.Number4
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("5")) => uy.com.dgi.Number5
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("6")) => uy.com.dgi.Number6
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("7")) => uy.com.dgi.Number7

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.DocTypemasNIE] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.DocTypemasNIE, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndPropiedadTypeFormat = new DefaultUycomdgi_IndPropiedadTypeFormat {}
  trait DefaultUycomdgi_IndPropiedadTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.IndPropiedadType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndPropiedadType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndPropiedadType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndPropiedadType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndIVAalDiaTypeFormat = new DefaultUycomdgi_IndIVAalDiaTypeFormat {}
  trait DefaultUycomdgi_IndIVAalDiaTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.IndIVAalDiaType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndIVAalDiaType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value12

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndIVAalDiaType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndIVAalDiaType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_SecProfTypeFormat = new DefaultUycomdgi_SecProfTypeFormat {}
  trait DefaultUycomdgi_SecProfTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.SecProfType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.SecProfType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("2")) => uy.com.dgi.Number2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.SecProfType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.SecProfType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndPagCta3rosTypeFormat = new DefaultUycomdgi_IndPagCta3rosTypeFormat {}
  trait DefaultUycomdgi_IndPagCta3rosTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.IndPagCta3rosType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndPagCta3rosType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1Value13

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndPagCta3rosType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndPagCta3rosType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildUycomdgi_IndCobPropiaTypeFormat = new DefaultUycomdgi_IndCobPropiaTypeFormat {}
  trait DefaultUycomdgi_IndCobPropiaTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.IndCobPropiaType] {
    val targetNamespace: Option[String] = Some("http://cfe.dgi.gub.uy")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): uy.com.dgi.IndCobPropiaType = scalaxb.fromXML[BigInt](scala.xml.Text(value)) match {
      case x: BigInt if x == scalaxb.fromXML[BigInt](scala.xml.Text("1")) => uy.com.dgi.Number1

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.IndCobPropiaType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: uy.com.dgi.IndCobPropiaType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultUycomdgi_EncryptedTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.EncryptedType] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.EncryptedType] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.w3.org/2001/04/xmlenc#"), Some("EncryptedDataType")) => Right(scalaxb.fromXML[uy.com.dgi.EncryptedDataType](node, stack))
          case (Some("http://www.w3.org/2001/04/xmlenc#"), Some("EncryptedKeyType")) => Right(scalaxb.fromXML[uy.com.dgi.EncryptedKeyType](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: uy.com.dgi.EncryptedType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: uy.com.dgi.EncryptedDataType => scalaxb.toXML[uy.com.dgi.EncryptedDataType](x, __namespace, __elementLabel, __scope, true)
      case x: uy.com.dgi.EncryptedKeyType => scalaxb.toXML[uy.com.dgi.EncryptedKeyType](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultUycomdgi_EncryptionMethodTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.EncryptionMethodType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("EncryptionMethodType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EncryptionMethodType] =
      phrase(optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "KeySize")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "OAEPparams")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[scalaxb.Base64Binary](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      safeRep(((any(_.namespace != Some("http://www.w3.org/2001/04/xmlenc#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      uy.com.dgi.EncryptionMethodType(Seq.concat(p1.toList,
        p2.toList,
        p3.toList,
        p4.toList,
        p5.toList,
        p6.flatten,
        p7.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Algorithm").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Algorithm" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.EncryptionMethodType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Algorithm", _) => attr = scala.xml.Attribute(null, "Algorithm", __obj.Algorithm.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.EncryptionMethodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_CipherDataTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.CipherDataType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("CipherDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CipherDataType] =
      phrase((((scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "CipherValue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[scalaxb.Base64Binary](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "CipherReference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.CipherReferenceType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      uy.com.dgi.CipherDataType(p1) })
    
    def writesChildNodes(__obj: uy.com.dgi.CipherDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.cipherdatatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultUycomdgi_CipherReferenceTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.CipherReferenceType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("CipherReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CipherReferenceType] =
      phrase(opt(((scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "Transforms")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.TransformsTypeType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      uy.com.dgi.CipherReferenceType(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@URI").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@URI" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.CipherReferenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@URI", _) => attr = scala.xml.Attribute(null, "URI", __obj.URI.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.CipherReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.cipherreferencetypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[uy.com.dgi.TransformsTypeType]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_TransformsTypeTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.TransformsTypeType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("TransformsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.TransformsTypeType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Transform")) ^^
      { case p1 =>
      uy.com.dgi.TransformsTypeType(p1 map { scalaxb.fromXML[uy.com.dgi.TransformType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.TransformsTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Transform flatMap { scalaxb.toXML[uy.com.dgi.TransformType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Transform"), __scope, false) })

  }

  trait DefaultUycomdgi_EncryptedDataTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.EncryptedDataType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("EncryptedDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EncryptedDataType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "EncryptionMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "KeyInfo")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "CipherData")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "EncryptionProperties")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.EncryptedDataType(p1.headOption map { scalaxb.fromXML[uy.com.dgi.EncryptionMethodType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.KeyInfoType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CipherDataType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.EncryptionPropertiesType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ },
        (node \ "@Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ },
        (node \ "@MimeType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@MimeType" -> _ },
        (node \ "@Encoding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Encoding" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.EncryptedDataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(null, "Type", x.toString, attr) }
        case ("@MimeType", _) => __obj.MimeType foreach { x => attr = scala.xml.Attribute(null, "MimeType", x.toString, attr) }
        case ("@Encoding", _) => __obj.Encoding foreach { x => attr = scala.xml.Attribute(null, "Encoding", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.EncryptedDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EncryptionMethod map { scalaxb.toXML[uy.com.dgi.EncryptionMethodType](_, Some("http://www.w3.org/2001/04/xmlenc#"), Some("EncryptionMethod"), __scope, false) } getOrElse {Nil},
        __obj.KeyInfo map { scalaxb.toXML[uy.com.dgi.KeyInfoType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("KeyInfo"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CipherDataType](__obj.CipherData, Some("http://www.w3.org/2001/04/xmlenc#"), Some("CipherData"), __scope, false),
        __obj.EncryptionProperties map { scalaxb.toXML[uy.com.dgi.EncryptionPropertiesType](_, Some("http://www.w3.org/2001/04/xmlenc#"), Some("EncryptionProperties"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_EncryptedKeyTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.EncryptedKeyType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("EncryptedKeyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EncryptedKeyType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "EncryptionMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "KeyInfo")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "CipherData")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "EncryptionProperties")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "ReferenceList")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "CarriedKeyName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      uy.com.dgi.EncryptedKeyType(p1.headOption map { scalaxb.fromXML[uy.com.dgi.EncryptionMethodType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[uy.com.dgi.KeyInfoType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.CipherDataType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[uy.com.dgi.EncryptionPropertiesType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[uy.com.dgi.ReferenceList](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ },
        (node \ "@Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ },
        (node \ "@MimeType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@MimeType" -> _ },
        (node \ "@Encoding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Encoding" -> _ },
        (node \ "@Recipient").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Recipient" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.EncryptedKeyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(null, "Type", x.toString, attr) }
        case ("@MimeType", _) => __obj.MimeType foreach { x => attr = scala.xml.Attribute(null, "MimeType", x.toString, attr) }
        case ("@Encoding", _) => __obj.Encoding foreach { x => attr = scala.xml.Attribute(null, "Encoding", x.toString, attr) }
        case ("@Recipient", _) => __obj.Recipient foreach { x => attr = scala.xml.Attribute(null, "Recipient", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.EncryptedKeyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EncryptionMethod map { scalaxb.toXML[uy.com.dgi.EncryptionMethodType](_, Some("http://www.w3.org/2001/04/xmlenc#"), Some("EncryptionMethod"), __scope, false) } getOrElse {Nil},
        __obj.KeyInfo map { scalaxb.toXML[uy.com.dgi.KeyInfoType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("KeyInfo"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.CipherDataType](__obj.CipherData, Some("http://www.w3.org/2001/04/xmlenc#"), Some("CipherData"), __scope, false),
        __obj.EncryptionProperties map { scalaxb.toXML[uy.com.dgi.EncryptionPropertiesType](_, Some("http://www.w3.org/2001/04/xmlenc#"), Some("EncryptionProperties"), __scope, false) } getOrElse {Nil},
        __obj.ReferenceList map { scalaxb.toXML[uy.com.dgi.ReferenceList](_, Some("http://www.w3.org/2001/04/xmlenc#"), Some("ReferenceList"), __scope, false) } getOrElse {Nil},
        __obj.CarriedKeyName map { scalaxb.toXML[String](_, Some("http://www.w3.org/2001/04/xmlenc#"), Some("CarriedKeyName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_AgreementMethodTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.AgreementMethodType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("AgreementMethodType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.AgreementMethodType] =
      phrase(optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "KA-Nonce")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[scalaxb.Base64Binary](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      safeRep(((any(_.namespace != Some("http://www.w3.org/2001/04/xmlenc#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "OriginatorKeyInfo")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.KeyInfoType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "RecipientKeyInfo")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.KeyInfoType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      uy.com.dgi.AgreementMethodType(Seq.concat(p1.toList,
        p2.toList,
        p3.toList,
        p4.flatten,
        p5.toList,
        p6.toList,
        p7.toList,
        p8.toList,
        p9.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Algorithm").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Algorithm" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.AgreementMethodType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Algorithm", _) => attr = scala.xml.Attribute(null, "Algorithm", __obj.Algorithm.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.AgreementMethodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_ReferenceListFormat extends scalaxb.ElemNameParser[uy.com.dgi.ReferenceList] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ReferenceList] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "DataReference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.ReferenceTypeType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "KeyReference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.ReferenceTypeType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      uy.com.dgi.ReferenceList(p1) })
    
    def writesChildNodes(__obj: uy.com.dgi.ReferenceList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.referencelistoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[uy.com.dgi.ReferenceListOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultUycomdgi_ReferenceTypeTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.ReferenceTypeType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ReferenceTypeType] =
      phrase(safeRep(any(_.namespace != Some("http://www.w3.org/2001/04/xmlenc#"))) ^^
      { case p1 =>
      uy.com.dgi.ReferenceTypeType(p1 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@URI").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@URI" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.ReferenceTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@URI", _) => attr = scala.xml.Attribute(null, "URI", __obj.URI.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.ReferenceTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultUycomdgi_EncryptionPropertiesTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.EncryptionPropertiesType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("EncryptionPropertiesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EncryptionPropertiesType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.w3.org/2001/04/xmlenc#"), "EncryptionProperty")) ^^
      { case p1 =>
      uy.com.dgi.EncryptionPropertiesType(p1 map { scalaxb.fromXML[uy.com.dgi.EncryptionPropertyType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.EncryptionPropertiesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.EncryptionPropertiesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.EncryptionProperty flatMap { scalaxb.toXML[uy.com.dgi.EncryptionPropertyType](_, Some("http://www.w3.org/2001/04/xmlenc#"), Some("EncryptionProperty"), __scope, false) })

  }

  trait DefaultUycomdgi_EncryptionPropertyTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.EncryptionPropertyType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2001/04/xmlenc#")
    
    override def typeName: Option[String] = Some("EncryptionPropertyType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.EncryptionPropertyType] =
      phrase(optTextRecord ~ 
      safeRep((((any(_.namespace != Some("http://www.w3.org/2001/04/xmlenc#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.EncryptionPropertyType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Target").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Target" -> _ },
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "Target" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "Id" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.EncryptionPropertyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Target", _) => __obj.Target foreach { x => attr = scala.xml.Attribute(null, "Target", x.toString, attr) }
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.EncryptionPropertyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_SignatureTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.SignatureType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("SignatureType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SignatureType] =
      phrase((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "SignedInfo")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "SignatureValue")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "KeyInfo")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Object")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      uy.com.dgi.SignatureType(scalaxb.fromXML[uy.com.dgi.SignedInfoType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.SignatureValueType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[uy.com.dgi.KeyInfoType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[uy.com.dgi.ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.SignatureType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.SignatureType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.SignedInfoType](__obj.SignedInfo, Some("http://www.w3.org/2000/09/xmldsig#"), Some("SignedInfo"), __scope, false),
        scalaxb.toXML[uy.com.dgi.SignatureValueType](__obj.SignatureValue, Some("http://www.w3.org/2000/09/xmldsig#"), Some("SignatureValue"), __scope, false),
        __obj.KeyInfo map { scalaxb.toXML[uy.com.dgi.KeyInfoType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("KeyInfo"), __scope, false) } getOrElse {Nil},
        __obj.ObjectValue flatMap { scalaxb.toXML[uy.com.dgi.ObjectType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Object"), __scope, false) })

  }

  trait DefaultUycomdgi_SignatureValueTypeFormat extends scalaxb.XMLFormat[uy.com.dgi.SignatureValueType] with scalaxb.CanWriteChildNodes[uy.com.dgi.SignatureValueType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.SignatureValueType] = seq match {
      case node: scala.xml.Node => Right(uy.com.dgi.SignatureValueType(scalaxb.fromXML[scalaxb.Base64Binary](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: uy.com.dgi.SignatureValueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.SignatureValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultUycomdgi_SignedInfoTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.SignedInfoType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("SignedInfoType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SignedInfoType] =
      phrase((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "CanonicalizationMethod")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "SignatureMethod")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.SignedInfoType(scalaxb.fromXML[uy.com.dgi.CanonicalizationMethodType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[uy.com.dgi.SignatureMethodType](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[uy.com.dgi.ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.SignedInfoType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.SignedInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[uy.com.dgi.CanonicalizationMethodType](__obj.CanonicalizationMethod, Some("http://www.w3.org/2000/09/xmldsig#"), Some("CanonicalizationMethod"), __scope, false),
        scalaxb.toXML[uy.com.dgi.SignatureMethodType](__obj.SignatureMethod, Some("http://www.w3.org/2000/09/xmldsig#"), Some("SignatureMethod"), __scope, false),
        __obj.Reference flatMap { scalaxb.toXML[uy.com.dgi.ReferenceType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Reference"), __scope, false) })

  }

  trait DefaultUycomdgi_CanonicalizationMethodTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.CanonicalizationMethodType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("CanonicalizationMethodType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.CanonicalizationMethodType] =
      phrase(optTextRecord ~ 
      safeRep(((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.CanonicalizationMethodType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Algorithm").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Algorithm" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.CanonicalizationMethodType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Algorithm", _) => attr = scala.xml.Attribute(null, "Algorithm", __obj.Algorithm.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.CanonicalizationMethodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_SignatureMethodTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.SignatureMethodType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("SignatureMethodType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SignatureMethodType] =
      phrase(optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "HMACOutputLength")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      safeRep(((any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      uy.com.dgi.SignatureMethodType(Seq.concat(p1.toList,
        p2.toList,
        p3.toList,
        p4.flatten,
        p5.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Algorithm").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Algorithm" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.SignatureMethodType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Algorithm", _) => attr = scala.xml.Attribute(null, "Algorithm", __obj.Algorithm.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.SignatureMethodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_ReferenceTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.ReferenceType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ReferenceType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Transforms")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "DigestMethod")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "DigestValue")) ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.ReferenceType(p1.headOption map { scalaxb.fromXML[uy.com.dgi.TransformsType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[uy.com.dgi.DigestMethodType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.Base64Binary](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ },
        (node \ "@URI").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@URI" -> _ },
        (node \ "@Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.ReferenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case ("@URI", _) => __obj.URI foreach { x => attr = scala.xml.Attribute(null, "URI", x.toString, attr) }
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(null, "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Transforms map { scalaxb.toXML[uy.com.dgi.TransformsType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Transforms"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[uy.com.dgi.DigestMethodType](__obj.DigestMethod, Some("http://www.w3.org/2000/09/xmldsig#"), Some("DigestMethod"), __scope, false),
        scalaxb.toXML[scalaxb.Base64Binary](__obj.DigestValue, Some("http://www.w3.org/2000/09/xmldsig#"), Some("DigestValue"), __scope, false))

  }

  trait DefaultUycomdgi_TransformsTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.TransformsType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("TransformsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.TransformsType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Transform")) ^^
      { case p1 =>
      uy.com.dgi.TransformsType(p1 map { scalaxb.fromXML[uy.com.dgi.TransformType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: uy.com.dgi.TransformsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Transform flatMap { scalaxb.toXML[uy.com.dgi.TransformType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Transform"), __scope, false) })

  }

  trait DefaultUycomdgi_TransformTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.TransformType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("TransformType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.TransformType] =
      phrase(optTextRecord ~ 
      safeRep((((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "XPath")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) })) | 
      (((any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.TransformType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Algorithm").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Algorithm" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.TransformType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Algorithm", _) => attr = scala.xml.Attribute(null, "Algorithm", __obj.Algorithm.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.TransformType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_DigestMethodTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.DigestMethodType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("DigestMethodType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.DigestMethodType] =
      phrase(optTextRecord ~ 
      safeRep(((any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.DigestMethodType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Algorithm").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Algorithm" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.DigestMethodType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Algorithm", _) => attr = scala.xml.Attribute(null, "Algorithm", __obj.Algorithm.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.DigestMethodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_KeyInfoTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.KeyInfoType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("KeyInfoType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.KeyInfoType] =
      phrase(optTextRecord ~ 
      safeRep((((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "KeyName")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) }) ||| 
      ((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "KeyValue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.KeyValueType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) }) ||| 
      ((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "RetrievalMethod")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.RetrievalMethodType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) }) ||| 
      ((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "X509Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.X509DataType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) }) ||| 
      ((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "PGPData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.PGPDataType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) }) ||| 
      ((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "SPKIData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.SPKIDataType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) }) ||| 
      ((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "MgmtData")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) })) | 
      (((any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.KeyInfoType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.KeyInfoType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.KeyInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_KeyValueTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.KeyValueType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("KeyValueType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.KeyValueType] =
      phrase(optTextRecord ~ 
      ((((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "DSAKeyValue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.DSAKeyValueType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) }) ||| 
      ((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "RSAKeyValue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.RSAKeyValueType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) })) | 
      (((any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.KeyValueType(Seq.concat(p1.toList,
        p2,
        p3.toList)) })
    
    def writesChildNodes(__obj: uy.com.dgi.KeyValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_RetrievalMethodTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.RetrievalMethodType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("RetrievalMethodType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RetrievalMethodType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Transforms")) ^^
      { case p1 =>
      uy.com.dgi.RetrievalMethodType(p1.headOption map { scalaxb.fromXML[uy.com.dgi.TransformsType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@URI").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@URI" -> _ },
        (node \ "@Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.RetrievalMethodType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@URI", _) => __obj.URI foreach { x => attr = scala.xml.Attribute(null, "URI", x.toString, attr) }
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(null, "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.RetrievalMethodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Transforms map { scalaxb.toXML[uy.com.dgi.TransformsType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Transforms"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_X509DataTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.X509DataType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("X509DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.X509DataType] =
      phrase(safeRep((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "X509IssuerSerial")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[uy.com.dgi.X509IssuerSerialType](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "X509SKI")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[scalaxb.Base64Binary](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "X509SubjectName")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "X509Certificate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[scalaxb.Base64Binary](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "X509CRL")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[scalaxb.Base64Binary](x, scalaxb.ElemName(node) :: stack))))) | 
      ((any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      uy.com.dgi.X509DataType(p1) })
    
    def writesChildNodes(__obj: uy.com.dgi.X509DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.x509datatypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultUycomdgi_X509IssuerSerialTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.X509IssuerSerialType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("X509IssuerSerialType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.X509IssuerSerialType] =
      phrase((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "X509IssuerName")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "X509SerialNumber")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.X509IssuerSerialType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.X509IssuerSerialType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.X509IssuerName, Some("http://www.w3.org/2000/09/xmldsig#"), Some("X509IssuerName"), __scope, false),
        scalaxb.toXML[BigInt](__obj.X509SerialNumber, Some("http://www.w3.org/2000/09/xmldsig#"), Some("X509SerialNumber"), __scope, false))

  }

  trait DefaultUycomdgi_PGPDataTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.PGPDataType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("PGPDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.PGPDataType] =
      phrase(((((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "PGPKeyID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "PGPKeyPacket")) ~ 
      safeRep(any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")))) ^^ 
        { case p1 ~ p2 ~ p3 => scalaxb.DataRecord(uy.com.dgi.PGPDataTypeSequence1(scalaxb.fromXML[scalaxb.Base64Binary](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[scalaxb.Base64Binary](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) })) }) ||| 
      (((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "PGPKeyPacket")) ~ 
      safeRep(any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(uy.com.dgi.PGPDataTypeSequence2(scalaxb.fromXML[scalaxb.Base64Binary](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) })) })) ^^
      { case p1 =>
      uy.com.dgi.PGPDataType(p1) })
    
    def writesChildNodes(__obj: uy.com.dgi.PGPDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.pgpdatatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[uy.com.dgi.PGPDataTypeOption]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultUycomdgi_PGPDataTypeSequence2Format extends scalaxb.XMLFormat[uy.com.dgi.PGPDataTypeSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.PGPDataTypeSequence2] = Left("don't call me.")
    
    def writes(__obj: uy.com.dgi.PGPDataTypeSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[scalaxb.Base64Binary](__obj.PGPKeyPacket, Some("http://www.w3.org/2000/09/xmldsig#"), Some("PGPKeyPacket"), __scope, false),
        __obj.any2 flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })


  }

  trait DefaultUycomdgi_PGPDataTypeSequence1Format extends scalaxb.XMLFormat[uy.com.dgi.PGPDataTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.PGPDataTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: uy.com.dgi.PGPDataTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[scalaxb.Base64Binary](__obj.PGPKeyID, Some("http://www.w3.org/2000/09/xmldsig#"), Some("PGPKeyID"), __scope, false),
        __obj.PGPKeyPacket map { scalaxb.toXML[scalaxb.Base64Binary](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("PGPKeyPacket"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })


  }

  trait DefaultUycomdgi_SPKIDataTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.SPKIDataType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("SPKIDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SPKIDataType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "SPKISexp")) ~ 
      opt(any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")))) ^^ 
        { case p1 ~ p2 => uy.com.dgi.SPKIDataTypeSequence1(scalaxb.fromXML[scalaxb.Base64Binary](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 =>
      uy.com.dgi.SPKIDataType(p1) })
    
    def writesChildNodes(__obj: uy.com.dgi.SPKIDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.spkidatatypesequence1 flatMap { scalaxb.toXML[uy.com.dgi.SPKIDataTypeSequence1](_, None, Some("spkidatatypesequence1"), __scope, false) })

  }

  trait DefaultUycomdgi_SPKIDataTypeSequence1Format extends scalaxb.XMLFormat[uy.com.dgi.SPKIDataTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.SPKIDataTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: uy.com.dgi.SPKIDataTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[scalaxb.Base64Binary](__obj.SPKISexp, Some("http://www.w3.org/2000/09/xmldsig#"), Some("SPKISexp"), __scope, false),
        __obj.any map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})


  }

  trait DefaultUycomdgi_ObjectTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.ObjectType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("ObjectType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ObjectType] =
      phrase(optTextRecord ~ 
      safeRep(((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.ObjectType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ },
        (node \ "@MimeType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@MimeType" -> _ },
        (node \ "@Encoding").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Encoding" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case ("@MimeType", _) => __obj.MimeType foreach { x => attr = scala.xml.Attribute(null, "MimeType", x.toString, attr) }
        case ("@Encoding", _) => __obj.Encoding foreach { x => attr = scala.xml.Attribute(null, "Encoding", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_ManifestTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.ManifestType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("ManifestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.ManifestType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Reference")) ^^
      { case p1 =>
      uy.com.dgi.ManifestType(p1 map { scalaxb.fromXML[uy.com.dgi.ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.ManifestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.ManifestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Reference flatMap { scalaxb.toXML[uy.com.dgi.ReferenceType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Reference"), __scope, false) })

  }

  trait DefaultUycomdgi_SignaturePropertiesTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.SignaturePropertiesType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("SignaturePropertiesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SignaturePropertiesType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "SignatureProperty")) ^^
      { case p1 =>
      uy.com.dgi.SignaturePropertiesType(p1 map { scalaxb.fromXML[uy.com.dgi.SignaturePropertyType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.SignaturePropertiesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.SignaturePropertiesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SignatureProperty flatMap { scalaxb.toXML[uy.com.dgi.SignaturePropertyType](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("SignatureProperty"), __scope, false) })

  }

  trait DefaultUycomdgi_SignaturePropertyTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.SignaturePropertyType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("SignaturePropertyType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.SignaturePropertyType] =
      phrase(optTextRecord ~ 
      safeRep((((any(_.namespace != Some("http://www.w3.org/2000/09/xmldsig#")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      uy.com.dgi.SignaturePropertyType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@Target").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@Target" -> _ },
        (node \ "@Id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: uy.com.dgi.SignaturePropertyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Target", _) => attr = scala.xml.Attribute(null, "Target", __obj.Target.toString, attr)
        case ("@Id", _) => __obj.Id foreach { x => attr = scala.xml.Attribute(null, "Id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uy.com.dgi.SignaturePropertyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultUycomdgi_DSAKeyValueTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.DSAKeyValueType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("DSAKeyValueType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.DSAKeyValueType] =
      phrase(opt(((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "P")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Q"))) ^^ 
        { case p1 ~ p2 => uy.com.dgi.DSAKeyValueTypeSequence1(scalaxb.fromXML[scalaxb.Base64Binary](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.Base64Binary](p2, scalaxb.ElemName(node) :: stack)) }) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "G")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Y")) ~ 
      opt(scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "J")) ~ 
      opt(((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Seed")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "PgenCounter"))) ^^ 
        { case p1 ~ p2 => uy.com.dgi.DSAKeyValueTypeSequence2(scalaxb.fromXML[scalaxb.Base64Binary](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.Base64Binary](p2, scalaxb.ElemName(node) :: stack)) }) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      uy.com.dgi.DSAKeyValueType(p1,
        p2.headOption map { scalaxb.fromXML[scalaxb.Base64Binary](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[scalaxb.Base64Binary](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[scalaxb.Base64Binary](_, scalaxb.ElemName(node) :: stack) },
        p5) })
    
    def writesChildNodes(__obj: uy.com.dgi.DSAKeyValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dsakeyvaluetypesequence1 map { scalaxb.toXML[uy.com.dgi.DSAKeyValueTypeSequence1](_, None, Some("dsakeyvaluetypesequence1"), __scope, false) } getOrElse {Nil},
        __obj.G map { scalaxb.toXML[scalaxb.Base64Binary](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("G"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[scalaxb.Base64Binary](__obj.Y, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Y"), __scope, false),
        __obj.J map { scalaxb.toXML[scalaxb.Base64Binary](_, Some("http://www.w3.org/2000/09/xmldsig#"), Some("J"), __scope, false) } getOrElse {Nil},
        __obj.dsakeyvaluetypesequence2 map { scalaxb.toXML[uy.com.dgi.DSAKeyValueTypeSequence2](_, None, Some("dsakeyvaluetypesequence2"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultUycomdgi_DSAKeyValueTypeSequence2Format extends scalaxb.XMLFormat[uy.com.dgi.DSAKeyValueTypeSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.DSAKeyValueTypeSequence2] = Left("don't call me.")
    
    def writes(__obj: uy.com.dgi.DSAKeyValueTypeSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[scalaxb.Base64Binary](__obj.Seed, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Seed"), __scope, false),
        scalaxb.toXML[scalaxb.Base64Binary](__obj.PgenCounter, Some("http://www.w3.org/2000/09/xmldsig#"), Some("PgenCounter"), __scope, false))


  }

  trait DefaultUycomdgi_DSAKeyValueTypeSequence1Format extends scalaxb.XMLFormat[uy.com.dgi.DSAKeyValueTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uy.com.dgi.DSAKeyValueTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: uy.com.dgi.DSAKeyValueTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[scalaxb.Base64Binary](__obj.P, Some("http://www.w3.org/2000/09/xmldsig#"), Some("P"), __scope, false),
        scalaxb.toXML[scalaxb.Base64Binary](__obj.Q, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Q"), __scope, false))


  }

  trait DefaultUycomdgi_RSAKeyValueTypeFormat extends scalaxb.ElemNameParser[uy.com.dgi.RSAKeyValueType] {
    val targetNamespace: Option[String] = Some("http://www.w3.org/2000/09/xmldsig#")
    
    override def typeName: Option[String] = Some("RSAKeyValueType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[uy.com.dgi.RSAKeyValueType] =
      phrase((scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Modulus")) ~ 
      (scalaxb.ElemName(Some("http://www.w3.org/2000/09/xmldsig#"), "Exponent")) ^^
      { case p1 ~ p2 =>
      uy.com.dgi.RSAKeyValueType(scalaxb.fromXML[scalaxb.Base64Binary](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.Base64Binary](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: uy.com.dgi.RSAKeyValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[scalaxb.Base64Binary](__obj.Modulus, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Modulus"), __scope, false),
        scalaxb.toXML[scalaxb.Base64Binary](__obj.Exponent, Some("http://www.w3.org/2000/09/xmldsig#"), Some("Exponent"), __scope, false))

  }


}

