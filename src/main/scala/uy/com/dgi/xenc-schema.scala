// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package uy.com.dgi


trait EncryptedType {
  def EncryptionMethod: Option[uy.com.dgi.EncryptionMethodType]
  def KeyInfo: Option[uy.com.dgi.KeyInfoType]
  def CipherData: uy.com.dgi.CipherDataType
  def EncryptionProperties: Option[uy.com.dgi.EncryptionPropertiesType]
  def Id: Option[String]
  def Type: Option[java.net.URI]
  def MimeType: Option[String]
  def Encoding: Option[java.net.URI]
}


case class EncryptionMethodType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Algorithm = attributes("@Algorithm").as[java.net.URI]
}

      


case class CipherDataType(cipherdatatypeoption: scalaxb.DataRecord[Any])
      

trait CipherDataTypeOption

case class CipherReferenceType(cipherreferencetypeoption: Option[scalaxb.DataRecord[uy.com.dgi.TransformsTypeType]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val URI = attributes("@URI").as[java.net.URI]
}

      

trait CipherReferenceTypeOption

case class TransformsTypeType(Transform: Seq[uy.com.dgi.TransformType] = Nil) extends CipherReferenceTypeOption
      


case class EncryptedDataType(EncryptionMethod: Option[uy.com.dgi.EncryptionMethodType] = None,
  KeyInfo: Option[uy.com.dgi.KeyInfoType] = None,
  CipherData: uy.com.dgi.CipherDataType,
  EncryptionProperties: Option[uy.com.dgi.EncryptionPropertiesType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends EncryptedType with Compl_FiscalTypeOption {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
  lazy val Type = attributes.get("@Type") map { _.as[java.net.URI]}
  lazy val MimeType = attributes.get("@MimeType") map { _.as[String]}
  lazy val Encoding = attributes.get("@Encoding") map { _.as[java.net.URI]}
}

      


case class EncryptedKeyType(EncryptionMethod: Option[uy.com.dgi.EncryptionMethodType] = None,
  KeyInfo: Option[uy.com.dgi.KeyInfoType] = None,
  CipherData: uy.com.dgi.CipherDataType,
  EncryptionProperties: Option[uy.com.dgi.EncryptionPropertiesType] = None,
  ReferenceList: Option[uy.com.dgi.ReferenceList] = None,
  CarriedKeyName: Option[String] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends EncryptedType {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
  lazy val Type = attributes.get("@Type") map { _.as[java.net.URI]}
  lazy val MimeType = attributes.get("@MimeType") map { _.as[String]}
  lazy val Encoding = attributes.get("@Encoding") map { _.as[java.net.URI]}
  lazy val Recipient = attributes.get("@Recipient") map { _.as[String]}
}

      


case class AgreementMethodType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Algorithm = attributes("@Algorithm").as[java.net.URI]
}

      


case class ReferenceList(referencelistoption: Seq[scalaxb.DataRecord[uy.com.dgi.ReferenceListOption]] = Nil)
      

trait ReferenceListOption

case class ReferenceTypeType(any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends ReferenceListOption {
  lazy val URI = attributes("@URI").as[java.net.URI]
}

      


case class EncryptionPropertiesType(EncryptionProperty: Seq[uy.com.dgi.EncryptionPropertyType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      


case class EncryptionPropertyType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Target = attributes.get("@Target") map { _.as[java.net.URI]}
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      

trait EncryptionPropertyTypeOption
