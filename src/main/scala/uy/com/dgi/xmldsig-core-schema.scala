// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package uy.com.dgi


case class SignatureType(SignedInfo: uy.com.dgi.SignedInfoType,
  SignatureValue: uy.com.dgi.SignatureValueType,
  KeyInfo: Option[uy.com.dgi.KeyInfoType] = None,
  ObjectValue: Seq[uy.com.dgi.ObjectType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      


case class SignatureValueType(value: scalaxb.Base64Binary,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      


case class SignedInfoType(CanonicalizationMethod: uy.com.dgi.CanonicalizationMethodType,
  SignatureMethod: uy.com.dgi.SignatureMethodType,
  Reference: Seq[uy.com.dgi.ReferenceType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      


case class CanonicalizationMethodType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Algorithm = attributes("@Algorithm").as[java.net.URI]
}

      


case class SignatureMethodType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Algorithm = attributes("@Algorithm").as[java.net.URI]
}

      


case class ReferenceType(Transforms: Option[uy.com.dgi.TransformsType] = None,
  DigestMethod: uy.com.dgi.DigestMethodType,
  DigestValue: scalaxb.Base64Binary,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
  lazy val URI = attributes.get("@URI") map { _.as[java.net.URI]}
  lazy val Type = attributes.get("@Type") map { _.as[java.net.URI]}
}

      


case class TransformsType(Transform: Seq[uy.com.dgi.TransformType] = Nil)
      


case class TransformType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Algorithm = attributes("@Algorithm").as[java.net.URI]
}

      

trait TransformTypeOption

case class DigestMethodType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Algorithm = attributes("@Algorithm").as[java.net.URI]
}

      


case class KeyInfoType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      

trait KeyInfoTypeOption

case class KeyValueType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil)
      

trait KeyValueTypeOption

case class RetrievalMethodType(Transforms: Option[uy.com.dgi.TransformsType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val URI = attributes.get("@URI") map { _.as[java.net.URI]}
  lazy val Type = attributes.get("@Type") map { _.as[java.net.URI]}
}

      


case class X509DataType(x509datatypeoption: Seq[scalaxb.DataRecord[Any]] = Nil)
      

trait X509DataTypeOption

case class X509IssuerSerialType(X509IssuerName: String,
  X509SerialNumber: BigInt)
      


case class PGPDataType(pgpdatatypeoption: scalaxb.DataRecord[uy.com.dgi.PGPDataTypeOption])
      

case class PGPDataTypeSequence2(PGPKeyPacket: scalaxb.Base64Binary,
  any2: Seq[scalaxb.DataRecord[Any]] = Nil) extends PGPDataTypeOption

case class PGPDataTypeSequence1(PGPKeyID: scalaxb.Base64Binary,
  PGPKeyPacket: Option[scalaxb.Base64Binary] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil) extends PGPDataTypeOption

trait PGPDataTypeOption

case class SPKIDataType(spkidatatypesequence1: Seq[uy.com.dgi.SPKIDataTypeSequence1] = Nil)
      

case class SPKIDataTypeSequence1(SPKISexp: scalaxb.Base64Binary,
  any: Option[scalaxb.DataRecord[Any]] = None)


case class ObjectType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
  lazy val MimeType = attributes.get("@MimeType") map { _.as[String]}
  lazy val Encoding = attributes.get("@Encoding") map { _.as[java.net.URI]}
}

      


case class ManifestType(Reference: Seq[uy.com.dgi.ReferenceType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      


case class SignaturePropertiesType(SignatureProperty: Seq[uy.com.dgi.SignaturePropertyType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      


case class SignaturePropertyType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val Target = attributes("@Target").as[java.net.URI]
  lazy val Id = attributes.get("@Id") map { _.as[String]}
}

      

trait SignaturePropertyTypeOption

case class DSAKeyValueType(dsakeyvaluetypesequence1: Option[uy.com.dgi.DSAKeyValueTypeSequence1] = None,
  G: Option[scalaxb.Base64Binary] = None,
  Y: scalaxb.Base64Binary,
  J: Option[scalaxb.Base64Binary] = None,
  dsakeyvaluetypesequence2: Option[uy.com.dgi.DSAKeyValueTypeSequence2] = None) extends KeyValueTypeOption
      

case class DSAKeyValueTypeSequence2(Seed: scalaxb.Base64Binary,
  PgenCounter: scalaxb.Base64Binary)

case class DSAKeyValueTypeSequence1(P: scalaxb.Base64Binary,
  Q: scalaxb.Base64Binary)


case class RSAKeyValueType(Modulus: scalaxb.Base64Binary,
  Exponent: scalaxb.Base64Binary) extends KeyValueTypeOption
      

